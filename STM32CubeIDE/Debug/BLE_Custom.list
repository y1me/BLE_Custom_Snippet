
BLE_Custom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c380  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c44  0800c4c0  0800c4c0  0001c4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d104  0800d104  0001d104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d10c  0800d10c  0001d10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d110  0800d110  0001d110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000008  0800d114  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000094  0800d1a0  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 00000088  20000130  0800d239  00020130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 00000045  200001b8  0800d2c1  000201b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  20000200  0800d306  00020200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000015d4  20000214  0800d317  00020214  2**2
                  ALLOC
 12 ._user_heap_stack 00001400  200017e8  0800d317  000217e8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b8  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   0002f5c6  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00006421  00000000  00000000  0004f807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002938  00000000  00000000  00055c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002678  00000000  00000000  00058560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002de56  00000000  00000000  0005abd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0002ed28  00000000  00000000  00088a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000facd2  00000000  00000000  000b7756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001b2428  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000b2e4  00000000  00000000  001b2478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000214 	.word	0x20000214
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c4a8 	.word	0x0800c4a8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000218 	.word	0x20000218
 800017c:	0800c4a8 	.word	0x0800c4a8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <LL_EXTI_EnableIT_32_63+0x24>)
 800053e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000542:	4905      	ldr	r1, [pc, #20]	; (8000558 <LL_EXTI_EnableIT_32_63+0x24>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4313      	orrs	r3, r2
 8000548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	58000800 	.word	0x58000800

0800055c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800058e:	b480      	push	{r7}
 8000590:	b085      	sub	sp, #20
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800059a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800059e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80005aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ae:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4013      	ands	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b8:	68fb      	ldr	r3, [r7, #12]
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80005ca:	f003 fbf1 	bl	8003db0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80005ce:	f003 fbf5 	bl	8003dbc <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80005d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005d6:	f7ff ffad 	bl	8000534 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80005da:	f008 ffeb 	bl	80095b4 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80005de:	f000 f821 	bl	8000624 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005e2:	f000 f8c3 	bl	800076c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005e6:	bf00      	nop
}
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <APPD_EnableCPU2+0x34>)
 80005f4:	1d3c      	adds	r4, r7, #4
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000600:	c403      	stmia	r4!, {r0, r1}
 8000602:	8022      	strh	r2, [r4, #0]
 8000604:	3402      	adds	r4, #2
 8000606:	0c13      	lsrs	r3, r2, #16
 8000608:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800060a:	f00a fbed 	bl	800ade8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4618      	mov	r0, r3
 8000612:	f009 fa42 	bl	8009a9a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000616:	bf00      	nop
}
 8000618:	3720      	adds	r7, #32
 800061a:	46bd      	mov	sp, r7
 800061c:	bdb0      	pop	{r4, r5, r7, pc}
 800061e:	bf00      	nop
 8000620:	0800c4c0 	.word	0x0800c4c0

08000624 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000644:	2300      	movs	r3, #0
 8000646:	77fb      	strb	r3, [r7, #31]
 8000648:	e038      	b.n	80006bc <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800064a:	7ffb      	ldrb	r3, [r7, #31]
 800064c:	4a44      	ldr	r2, [pc, #272]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	4413      	add	r3, r2
 8000652:	799b      	ldrb	r3, [r3, #6]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d02b      	beq.n	80006b0 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000658:	7ffb      	ldrb	r3, [r7, #31]
 800065a:	4a41      	ldr	r2, [pc, #260]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 800065c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000660:	4a40      	ldr	r2, [pc, #256]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d01b      	beq.n	800069e <APPD_SetCPU2GpioConfig+0x7a>
 8000666:	4a3f      	ldr	r2, [pc, #252]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d823      	bhi.n	80006b4 <APPD_SetCPU2GpioConfig+0x90>
 800066c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000670:	d003      	beq.n	800067a <APPD_SetCPU2GpioConfig+0x56>
 8000672:	4a3d      	ldr	r2, [pc, #244]	; (8000768 <APPD_SetCPU2GpioConfig+0x144>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d009      	beq.n	800068c <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000678:	e01c      	b.n	80006b4 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800067a:	7ffb      	ldrb	r3, [r7, #31]
 800067c:	4a38      	ldr	r2, [pc, #224]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	4413      	add	r3, r2
 8000682:	889a      	ldrh	r2, [r3, #4]
 8000684:	8bbb      	ldrh	r3, [r7, #28]
 8000686:	4313      	orrs	r3, r2
 8000688:	83bb      	strh	r3, [r7, #28]
          break;
 800068a:	e014      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800068c:	7ffb      	ldrb	r3, [r7, #31]
 800068e:	4a34      	ldr	r2, [pc, #208]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	4413      	add	r3, r2
 8000694:	889a      	ldrh	r2, [r3, #4]
 8000696:	8b7b      	ldrh	r3, [r7, #26]
 8000698:	4313      	orrs	r3, r2
 800069a:	837b      	strh	r3, [r7, #26]
          break;
 800069c:	e00b      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800069e:	7ffb      	ldrb	r3, [r7, #31]
 80006a0:	4a2f      	ldr	r2, [pc, #188]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	4413      	add	r3, r2
 80006a6:	889a      	ldrh	r2, [r3, #4]
 80006a8:	8b3b      	ldrh	r3, [r7, #24]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	833b      	strh	r3, [r7, #24]
          break;
 80006ae:	e002      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 80006b0:	bf00      	nop
 80006b2:	e000      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
          break;
 80006b4:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006b6:	7ffb      	ldrb	r3, [r7, #31]
 80006b8:	3301      	adds	r3, #1
 80006ba:	77fb      	strb	r3, [r7, #31]
 80006bc:	7ffb      	ldrb	r3, [r7, #31]
 80006be:	2b25      	cmp	r3, #37	; 0x25
 80006c0:	d9c3      	bls.n	800064a <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ca:	2303      	movs	r3, #3
 80006cc:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80006ce:	8bbb      	ldrh	r3, [r7, #28]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d014      	beq.n	80006fe <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 80006d4:	8bbb      	ldrh	r3, [r7, #28]
 80006d6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff3f 	bl	800055c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80006de:	2001      	movs	r0, #1
 80006e0:	f7ff ff55 	bl	800058e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f004 f878 	bl	80047e0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80006f0:	8bbb      	ldrh	r3, [r7, #28]
 80006f2:	2200      	movs	r2, #0
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f004 f9e1 	bl	8004ac0 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80006fe:	8b7b      	ldrh	r3, [r7, #26]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d012      	beq.n	800072a <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000704:	8b7b      	ldrh	r3, [r7, #26]
 8000706:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff ff27 	bl	800055c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800070e:	2002      	movs	r0, #2
 8000710:	f7ff ff3d 	bl	800058e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4813      	ldr	r0, [pc, #76]	; (8000768 <APPD_SetCPU2GpioConfig+0x144>)
 800071a:	f004 f861 	bl	80047e0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800071e:	8b7b      	ldrh	r3, [r7, #26]
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	4810      	ldr	r0, [pc, #64]	; (8000768 <APPD_SetCPU2GpioConfig+0x144>)
 8000726:	f004 f9cb 	bl	8004ac0 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800072a:	8b3b      	ldrh	r3, [r7, #24]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d013      	beq.n	8000758 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000730:	8b3b      	ldrh	r3, [r7, #24]
 8000732:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000734:	2004      	movs	r0, #4
 8000736:	f7ff ff11 	bl	800055c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800073a:	2004      	movs	r0, #4
 800073c:	f7ff ff27 	bl	800058e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	4619      	mov	r1, r3
 8000744:	4807      	ldr	r0, [pc, #28]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000746:	f004 f84b 	bl	80047e0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800074a:	8b3b      	ldrh	r3, [r7, #24]
 800074c:	2200      	movs	r2, #0
 800074e:	4619      	mov	r1, r3
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000752:	f004 f9b5 	bl	8004ac0 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000756:	bf00      	nop
 8000758:	bf00      	nop
}
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	0800cd70 	.word	0x0800cd70
 8000764:	48000800 	.word	0x48000800
 8000768:	48000400 	.word	0x48000400

0800076c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000770:	bf00      	nop
}
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 800077e:	f001 fc01 	bl	8001f84 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000782:	bf00      	nop
}
 8000784:	bd80      	pop	{r7, pc}

08000786 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b084      	sub	sp, #16
 800078a:	af00      	add	r7, sp, #0
 800078c:	60f8      	str	r0, [r7, #12]
 800078e:	460b      	mov	r3, r1
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000794:	897a      	ldrh	r2, [r7, #10]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	68f9      	ldr	r1, [r7, #12]
 800079a:	2000      	movs	r0, #0
 800079c:	f001 fa70 	bl	8001c80 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80007a0:	bf00      	nop
}
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <LL_C2_PWR_SetPowerMode+0x28>)
 80007b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007b6:	f023 0207 	bic.w	r2, r3, #7
 80007ba:	4905      	ldr	r1, [pc, #20]	; (80007d0 <LL_C2_PWR_SetPowerMode+0x28>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	58000400 	.word	0x58000400

080007d4 <LL_EXTI_EnableIT_32_63>:
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <LL_EXTI_EnableIT_32_63+0x24>)
 80007de:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007e2:	4905      	ldr	r1, [pc, #20]	; (80007f8 <LL_EXTI_EnableIT_32_63+0x24>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	58000800 	.word	0x58000800

080007fc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800080a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800080e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000816:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000822:	4313      	orrs	r3, r2
 8000824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	cafecafe 	.word	0xcafecafe

08000838 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800084a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4313      	orrs	r3, r2
 8000852:	608b      	str	r3, [r1, #8]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800086c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800088e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80008a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80008b8:	d101      	bne.n	80008be <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80008ba:	2301      	movs	r3, #1
 80008bc:	e000      	b.n	80008c0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80008ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008de:	d101      	bne.n	80008e4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <LL_AHB3_GRP1_EnableClock>:
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80008f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4313      	orrs	r3, r2
 8000906:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800090c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4013      	ands	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000914:	68fb      	ldr	r3, [r7, #12]
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <LL_DBGMCU_GetRevisionID+0x18>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	0c1b      	lsrs	r3, r3, #16
 800092e:	b29b      	uxth	r3, r3
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e0042000 	.word	0xe0042000

08000940 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	041b      	lsls	r3, r3, #16
 8000952:	431a      	orrs	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	605a      	str	r2, [r3, #4]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	431a      	orrs	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	605a      	str	r2, [r3, #4]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	695a      	ldr	r2, [r3, #20]
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	041b      	lsls	r3, r3, #16
 8000998:	431a      	orrs	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	615a      	str	r2, [r3, #20]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
 80009b2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	695a      	ldr	r2, [r3, #20]
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	615a      	str	r2, [r3, #20]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	609a      	str	r2, [r3, #8]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	619a      	str	r2, [r3, #24]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	22ff      	movs	r2, #255	; 0xff
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	22ca      	movs	r2, #202	; 0xca
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2253      	movs	r2, #83	; 0x53
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f023 0207 	bic.w	r2, r3, #7
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	431a      	orrs	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	609a      	str	r2, [r3, #8]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <MX_APPE_Config+0x18>)
 8000a6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a6e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8000a70:	f000 f82a 	bl	8000ac8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000a74:	f000 f86a 	bl	8000b4c <Config_HSE>

  return;
 8000a78:	bf00      	nop
}
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	58004000 	.word	0x58004000

08000a80 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 8000a84:	f000 f876 	bl	8000b74 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000a88:	f000 f88e 	bl	8000ba8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000a8c:	4906      	ldr	r1, [pc, #24]	; (8000aa8 <MX_APPE_Init+0x28>)
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 feee 	bl	8001870 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000a94:	f7ff fd97 	bl	80005c6 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000a98:	2101      	movs	r1, #1
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f00a fa42 	bl	800af24 <UTIL_LPM_SetOffMode>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000aa0:	f000 f890 	bl	8000bc4 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000aa4:	bf00      	nop
}
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000474 	.word	0x20000474

08000aac <Init_Smps>:

void Init_Smps( void )
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 8000ab0:	bf00      	nop
}
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <Init_Exti>:

void Init_Exti( void )
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff fe88 	bl	80007d4 <LL_EXTI_EnableIT_32_63>

  return;
 8000ac4:	bf00      	nop
}
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8000acc:	f000 f804 	bl	8000ad8 <Reset_BackupDomain>

  Reset_IPCC();
 8000ad0:	f000 f81a 	bl	8000b08 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 8000ad4:	bf00      	nop
}
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000adc:	f7ff fee2 	bl	80008a4 <LL_RCC_IsActiveFlag_PINRST>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00d      	beq.n	8000b02 <Reset_BackupDomain+0x2a>
 8000ae6:	f7ff fef0 	bl	80008ca <LL_RCC_IsActiveFlag_SFTRST>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d108      	bne.n	8000b02 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000af0:	f004 f8a8 	bl	8004c44 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000af4:	f004 f8a6 	bl	8004c44 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000af8:	f7ff feb2 	bl	8000860 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000afc:	f7ff fec1 	bl	8000882 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
}
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000b0c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b10:	f7ff feee 	bl	80008f0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000b14:	213f      	movs	r1, #63	; 0x3f
 8000b16:	480c      	ldr	r0, [pc, #48]	; (8000b48 <Reset_IPCC+0x40>)
 8000b18:	f7ff ff58 	bl	80009cc <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000b1c:	213f      	movs	r1, #63	; 0x3f
 8000b1e:	480a      	ldr	r0, [pc, #40]	; (8000b48 <Reset_IPCC+0x40>)
 8000b20:	f7ff ff62 	bl	80009e8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000b24:	213f      	movs	r1, #63	; 0x3f
 8000b26:	4808      	ldr	r0, [pc, #32]	; (8000b48 <Reset_IPCC+0x40>)
 8000b28:	f7ff ff0a 	bl	8000940 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000b2c:	213f      	movs	r1, #63	; 0x3f
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <Reset_IPCC+0x40>)
 8000b30:	f7ff ff29 	bl	8000986 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000b34:	213f      	movs	r1, #63	; 0x3f
 8000b36:	4804      	ldr	r0, [pc, #16]	; (8000b48 <Reset_IPCC+0x40>)
 8000b38:	f7ff ff14 	bl	8000964 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000b3c:	213f      	movs	r1, #63	; 0x3f
 8000b3e:	4802      	ldr	r0, [pc, #8]	; (8000b48 <Reset_IPCC+0x40>)
 8000b40:	f7ff ff33 	bl	80009aa <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000b44:	bf00      	nop
}
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	58000c00 	.word	0x58000c00

08000b4c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f008 ff62 	bl	8009a1c <OTP_Read>
 8000b58:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d005      	beq.n	8000b6c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	799b      	ldrb	r3, [r3, #6]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fe49 	bl	80007fc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000b6a:	bf00      	nop
 8000b6c:	bf00      	nop
}
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <System_Init>:

static void System_Init( void )
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  Init_Smps( );
 8000b78:	f7ff ff98 	bl	8000aac <Init_Smps>

  Init_Exti( );
 8000b7c:	f7ff ff9d 	bl	8000aba <Init_Exti>

  Init_Rtc( );
 8000b80:	f000 f802 	bl	8000b88 <Init_Rtc>

  return;
 8000b84:	bf00      	nop
}
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <Init_Rtc>:

static void Init_Rtc( void )
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <Init_Rtc+0x1c>)
 8000b8e:	f7ff ff46 	bl	8000a1e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000b92:	2100      	movs	r1, #0
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <Init_Rtc+0x1c>)
 8000b96:	f7ff ff52 	bl	8000a3e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000b9a:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <Init_Rtc+0x1c>)
 8000b9c:	f7ff ff32 	bl	8000a04 <LL_RTC_EnableWriteProtection>

  return;
 8000ba0:	bf00      	nop
}
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40002800 	.word	0x40002800

08000ba8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000bac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000bb0:	f7ff fe42 	bl	8000838 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000bb4:	f00a f9a4 	bl	800af00 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000bb8:	2004      	movs	r0, #4
 8000bba:	f7ff fdf5 	bl	80007a8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000bbe:	bf00      	nop
}
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000bca:	f009 ff57 	bl	800aa7c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000bce:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <appe_Tl_Init+0x50>)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2020      	movs	r0, #32
 8000bd4:	f00a fac0 	bl	800b158 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <appe_Tl_Init+0x54>)
 8000bda:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <appe_Tl_Init+0x58>)
 8000bde:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	480e      	ldr	r0, [pc, #56]	; (8000c20 <appe_Tl_Init+0x5c>)
 8000be6:	f009 f833 	bl	8009c50 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <appe_Tl_Init+0x60>)
 8000bec:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <appe_Tl_Init+0x64>)
 8000bf0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <appe_Tl_Init+0x68>)
 8000bf4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000bf6:	f240 533c 	movw	r3, #1340	; 0x53c
 8000bfa:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	4618      	mov	r0, r3
 8000c02:	f00a f87d 	bl	800ad00 <TL_MM_Init>

  TL_Enable();
 8000c06:	f009 ff33 	bl	800aa70 <TL_Enable>

  return;
 8000c0a:	bf00      	nop
}
 8000c0c:	3720      	adds	r7, #32
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	08009c89 	.word	0x08009c89
 8000c18:	20030724 	.word	0x20030724
 8000c1c:	08000c31 	.word	0x08000c31
 8000c20:	08000c49 	.word	0x08000c49
 8000c24:	2003093c 	.word	0x2003093c
 8000c28:	20030830 	.word	0x20030830
 8000c2c:	200301e8 	.word	0x200301e8

08000c30 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c3a:	bf00      	nop
}
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	330b      	adds	r3, #11
 8000c56:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f008 ff49 	bl	8009af4 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000c62:	485e      	ldr	r0, [pc, #376]	; (8000ddc <APPE_SysUserEvtRx+0x194>)
 8000c64:	f008 fc46 	bl	80094f4 <DbgTraceGetFileName>
 8000c68:	4601      	mov	r1, r0
 8000c6a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8000c6e:	4a5c      	ldr	r2, [pc, #368]	; (8000de0 <APPE_SysUserEvtRx+0x198>)
 8000c70:	485c      	ldr	r0, [pc, #368]	; (8000de4 <APPE_SysUserEvtRx+0x19c>)
 8000c72:	f00a fbf5 	bl	800b460 <iprintf>
 8000c76:	7b3b      	ldrb	r3, [r7, #12]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	7b7b      	ldrb	r3, [r7, #13]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	7bbb      	ldrb	r3, [r7, #14]
 8000c80:	4859      	ldr	r0, [pc, #356]	; (8000de8 <APPE_SysUserEvtRx+0x1a0>)
 8000c82:	f00a fbed 	bl	800b460 <iprintf>
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000c86:	4855      	ldr	r0, [pc, #340]	; (8000ddc <APPE_SysUserEvtRx+0x194>)
 8000c88:	f008 fc34 	bl	80094f4 <DbgTraceGetFileName>
 8000c8c:	4601      	mov	r1, r0
 8000c8e:	f240 136d 	movw	r3, #365	; 0x16d
 8000c92:	4a53      	ldr	r2, [pc, #332]	; (8000de0 <APPE_SysUserEvtRx+0x198>)
 8000c94:	4853      	ldr	r0, [pc, #332]	; (8000de4 <APPE_SysUserEvtRx+0x19c>)
 8000c96:	f00a fbe3 	bl	800b460 <iprintf>
 8000c9a:	7c3b      	ldrb	r3, [r7, #16]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4853      	ldr	r0, [pc, #332]	; (8000dec <APPE_SysUserEvtRx+0x1a4>)
 8000ca0:	f00a fbde 	bl	800b460 <iprintf>
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000ca4:	484d      	ldr	r0, [pc, #308]	; (8000ddc <APPE_SysUserEvtRx+0x194>)
 8000ca6:	f008 fc25 	bl	80094f4 <DbgTraceGetFileName>
 8000caa:	4601      	mov	r1, r0
 8000cac:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8000cb0:	4a4b      	ldr	r2, [pc, #300]	; (8000de0 <APPE_SysUserEvtRx+0x198>)
 8000cb2:	484c      	ldr	r0, [pc, #304]	; (8000de4 <APPE_SysUserEvtRx+0x19c>)
 8000cb4:	f00a fbd4 	bl	800b460 <iprintf>
 8000cb8:	7dbb      	ldrb	r3, [r7, #22]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	7dfb      	ldrb	r3, [r7, #23]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	7e3b      	ldrb	r3, [r7, #24]
 8000cc2:	484b      	ldr	r0, [pc, #300]	; (8000df0 <APPE_SysUserEvtRx+0x1a8>)
 8000cc4:	f00a fbcc 	bl	800b460 <iprintf>

  switch(p_sys_event->subevtcode)
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000cd2:	2b07      	cmp	r3, #7
 8000cd4:	d87c      	bhi.n	8000dd0 <APPE_SysUserEvtRx+0x188>
 8000cd6:	a201      	add	r2, pc, #4	; (adr r2, 8000cdc <APPE_SysUserEvtRx+0x94>)
 8000cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cdc:	08000cfd 	.word	0x08000cfd
 8000ce0:	08000d05 	.word	0x08000d05
 8000ce4:	08000d0d 	.word	0x08000d0d
 8000ce8:	08000dd1 	.word	0x08000dd1
 8000cec:	08000d51 	.word	0x08000d51
 8000cf0:	08000d75 	.word	0x08000d75
 8000cf4:	08000d91 	.word	0x08000d91
 8000cf8:	08000db5 	.word	0x08000db5
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 f8cf 	bl	8000ea0 <APPE_SysEvtReadyProcessing>
    break;
 8000d02:	e066      	b.n	8000dd2 <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f000 f881 	bl	8000e0c <APPE_SysEvtError>
    break;
 8000d0a:	e062      	b.n	8000dd2 <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG("-- BLE NVM RAM HAS BEEN UPDATED BY CMO+ \n");
 8000d0c:	4833      	ldr	r0, [pc, #204]	; (8000ddc <APPE_SysUserEvtRx+0x194>)
 8000d0e:	f008 fbf1 	bl	80094f4 <DbgTraceGetFileName>
 8000d12:	4601      	mov	r1, r0
 8000d14:	f240 137b 	movw	r3, #379	; 0x17b
 8000d18:	4a31      	ldr	r2, [pc, #196]	; (8000de0 <APPE_SysUserEvtRx+0x198>)
 8000d1a:	4832      	ldr	r0, [pc, #200]	; (8000de4 <APPE_SysUserEvtRx+0x19c>)
 8000d1c:	f00a fba0 	bl	800b460 <iprintf>
 8000d20:	4834      	ldr	r0, [pc, #208]	; (8000df4 <APPE_SysUserEvtRx+0x1ac>)
 8000d22:	f00a fc23 	bl	800b56c <puts>
    APP_DBG_MSG("SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE : StartAddress = %lx , Size = %ld\n",
 8000d26:	482d      	ldr	r0, [pc, #180]	; (8000ddc <APPE_SysUserEvtRx+0x194>)
 8000d28:	f008 fbe4 	bl	80094f4 <DbgTraceGetFileName>
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8000d32:	4a2b      	ldr	r2, [pc, #172]	; (8000de0 <APPE_SysUserEvtRx+0x198>)
 8000d34:	482b      	ldr	r0, [pc, #172]	; (8000de4 <APPE_SysUserEvtRx+0x19c>)
 8000d36:	f00a fb93 	bl	800b460 <iprintf>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	6819      	ldr	r1, [r3, #0]
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	3302      	adds	r3, #2
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	461a      	mov	r2, r3
 8000d48:	482b      	ldr	r0, [pc, #172]	; (8000df8 <APPE_SysUserEvtRx+0x1b0>)
 8000d4a:	f00a fb89 	bl	800b460 <iprintf>
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8000d4e:	e040      	b.n	8000dd2 <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000d50:	4822      	ldr	r0, [pc, #136]	; (8000ddc <APPE_SysUserEvtRx+0x194>)
 8000d52:	f008 fbcf 	bl	80094f4 <DbgTraceGetFileName>
 8000d56:	4601      	mov	r1, r0
 8000d58:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8000d5c:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <APPE_SysUserEvtRx+0x198>)
 8000d5e:	4821      	ldr	r0, [pc, #132]	; (8000de4 <APPE_SysUserEvtRx+0x19c>)
 8000d60:	f00a fb7e 	bl	800b460 <iprintf>
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	3302      	adds	r3, #2
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4823      	ldr	r0, [pc, #140]	; (8000dfc <APPE_SysUserEvtRx+0x1b4>)
 8000d6e:	f00a fb77 	bl	800b460 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8000d72:	e02e      	b.n	8000dd2 <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_WRITE\n");
 8000d74:	4819      	ldr	r0, [pc, #100]	; (8000ddc <APPE_SysUserEvtRx+0x194>)
 8000d76:	f008 fbbd 	bl	80094f4 <DbgTraceGetFileName>
 8000d7a:	4601      	mov	r1, r0
 8000d7c:	f240 1387 	movw	r3, #391	; 0x187
 8000d80:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <APPE_SysUserEvtRx+0x198>)
 8000d82:	4818      	ldr	r0, [pc, #96]	; (8000de4 <APPE_SysUserEvtRx+0x19c>)
 8000d84:	f00a fb6c 	bl	800b460 <iprintf>
 8000d88:	481d      	ldr	r0, [pc, #116]	; (8000e00 <APPE_SysUserEvtRx+0x1b8>)
 8000d8a:	f00a fbef 	bl	800b56c <puts>
    break;
 8000d8e:	e020      	b.n	8000dd2 <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000d90:	4812      	ldr	r0, [pc, #72]	; (8000ddc <APPE_SysUserEvtRx+0x194>)
 8000d92:	f008 fbaf 	bl	80094f4 <DbgTraceGetFileName>
 8000d96:	4601      	mov	r1, r0
 8000d98:	f240 138b 	movw	r3, #395	; 0x18b
 8000d9c:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <APPE_SysUserEvtRx+0x198>)
 8000d9e:	4811      	ldr	r0, [pc, #68]	; (8000de4 <APPE_SysUserEvtRx+0x19c>)
 8000da0:	f00a fb5e 	bl	800b460 <iprintf>
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	3302      	adds	r3, #2
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4619      	mov	r1, r3
 8000dac:	4815      	ldr	r0, [pc, #84]	; (8000e04 <APPE_SysUserEvtRx+0x1bc>)
 8000dae:	f00a fb57 	bl	800b460 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 8000db2:	e00e      	b.n	8000dd2 <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
 8000db4:	4809      	ldr	r0, [pc, #36]	; (8000ddc <APPE_SysUserEvtRx+0x194>)
 8000db6:	f008 fb9d 	bl	80094f4 <DbgTraceGetFileName>
 8000dba:	4601      	mov	r1, r0
 8000dbc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <APPE_SysUserEvtRx+0x198>)
 8000dc2:	4808      	ldr	r0, [pc, #32]	; (8000de4 <APPE_SysUserEvtRx+0x19c>)
 8000dc4:	f00a fb4c 	bl	800b460 <iprintf>
 8000dc8:	480f      	ldr	r0, [pc, #60]	; (8000e08 <APPE_SysUserEvtRx+0x1c0>)
 8000dca:	f00a fbcf 	bl	800b56c <puts>
    break;
 8000dce:	e000      	b.n	8000dd2 <APPE_SysUserEvtRx+0x18a>

  default:
    break;
 8000dd0:	bf00      	nop
  }

  return;
 8000dd2:	bf00      	nop
}
 8000dd4:	3720      	adds	r7, #32
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	0800c4dc 	.word	0x0800c4dc
 8000de0:	0800cea0 	.word	0x0800cea0
 8000de4:	0800c528 	.word	0x0800c528
 8000de8:	0800c53c 	.word	0x0800c53c
 8000dec:	0800c560 	.word	0x0800c560
 8000df0:	0800c57c 	.word	0x0800c57c
 8000df4:	0800c594 	.word	0x0800c594
 8000df8:	0800c5c0 	.word	0x0800c5c0
 8000dfc:	0800c604 	.word	0x0800c604
 8000e00:	0800c638 	.word	0x0800c638
 8000e04:	0800c654 	.word	0x0800c654
 8000e08:	0800c68c 	.word	0x0800c68c

08000e0c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	330b      	adds	r3, #11
 8000e1a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	3302      	adds	r3, #2
 8000e20:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n",(*p_sys_error_code));
 8000e22:	4819      	ldr	r0, [pc, #100]	; (8000e88 <APPE_SysEvtError+0x7c>)
 8000e24:	f008 fb66 	bl	80094f4 <DbgTraceGetFileName>
 8000e28:	4601      	mov	r1, r0
 8000e2a:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 8000e2e:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <APPE_SysEvtError+0x80>)
 8000e30:	4817      	ldr	r0, [pc, #92]	; (8000e90 <APPE_SysEvtError+0x84>)
 8000e32:	f00a fb15 	bl	800b460 <iprintf>
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4815      	ldr	r0, [pc, #84]	; (8000e94 <APPE_SysEvtError+0x88>)
 8000e3e:	f00a fb0f 	bl	800b460 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10d      	bne.n	8000e66 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000e4a:	480f      	ldr	r0, [pc, #60]	; (8000e88 <APPE_SysEvtError+0x7c>)
 8000e4c:	f008 fb52 	bl	80094f4 <DbgTraceGetFileName>
 8000e50:	4601      	mov	r1, r0
 8000e52:	f240 13ad 	movw	r3, #429	; 0x1ad
 8000e56:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <APPE_SysEvtError+0x80>)
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <APPE_SysEvtError+0x84>)
 8000e5a:	f00a fb01 	bl	800b460 <iprintf>
 8000e5e:	480e      	ldr	r0, [pc, #56]	; (8000e98 <APPE_SysEvtError+0x8c>)
 8000e60:	f00a fb84 	bl	800b56c <puts>
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000e64:	e00d      	b.n	8000e82 <APPE_SysEvtError+0x76>
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000e66:	4808      	ldr	r0, [pc, #32]	; (8000e88 <APPE_SysEvtError+0x7c>)
 8000e68:	f008 fb44 	bl	80094f4 <DbgTraceGetFileName>
 8000e6c:	4601      	mov	r1, r0
 8000e6e:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000e72:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <APPE_SysEvtError+0x80>)
 8000e74:	4806      	ldr	r0, [pc, #24]	; (8000e90 <APPE_SysEvtError+0x84>)
 8000e76:	f00a faf3 	bl	800b460 <iprintf>
 8000e7a:	4808      	ldr	r0, [pc, #32]	; (8000e9c <APPE_SysEvtError+0x90>)
 8000e7c:	f00a fb76 	bl	800b56c <puts>
  return;
 8000e80:	bf00      	nop
}
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	0800c4dc 	.word	0x0800c4dc
 8000e8c:	0800ceb4 	.word	0x0800ceb4
 8000e90:	0800c528 	.word	0x0800c528
 8000e94:	0800c6a8 	.word	0x0800c6a8
 8000e98:	0800c6d4 	.word	0x0800c6d4
 8000e9c:	0800c70c 	.word	0x0800c70c

08000ea0 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	330b      	adds	r3, #11
 8000ec0:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000ec2:	6a3b      	ldr	r3, [r7, #32]
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d132      	bne.n	8000f36 <APPE_SysEvtReadyProcessing+0x96>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");
 8000ed0:	482c      	ldr	r0, [pc, #176]	; (8000f84 <APPE_SysEvtReadyProcessing+0xe4>)
 8000ed2:	f008 fb0f 	bl	80094f4 <DbgTraceGetFileName>
 8000ed6:	4601      	mov	r1, r0
 8000ed8:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
 8000edc:	4a2a      	ldr	r2, [pc, #168]	; (8000f88 <APPE_SysEvtReadyProcessing+0xe8>)
 8000ede:	482b      	ldr	r0, [pc, #172]	; (8000f8c <APPE_SysEvtReadyProcessing+0xec>)
 8000ee0:	f00a fabe 	bl	800b460 <iprintf>
 8000ee4:	482a      	ldr	r0, [pc, #168]	; (8000f90 <APPE_SysEvtReadyProcessing+0xf0>)
 8000ee6:	f00a fb41 	bl	800b56c <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8000eea:	f7ff fb7f 	bl	80005ec <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000eee:	230d      	movs	r3, #13
 8000ef0:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000ef2:	237f      	movs	r3, #127	; 0x7f
 8000ef4:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000ef6:	f7ff fd15 	bl	8000924 <LL_DBGMCU_GetRevisionID>
 8000efa:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);
 8000efc:	4821      	ldr	r0, [pc, #132]	; (8000f84 <APPE_SysEvtReadyProcessing+0xe4>)
 8000efe:	f008 faf9 	bl	80094f4 <DbgTraceGetFileName>
 8000f02:	4601      	mov	r1, r0
 8000f04:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8000f08:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <APPE_SysEvtReadyProcessing+0xe8>)
 8000f0a:	4820      	ldr	r0, [pc, #128]	; (8000f8c <APPE_SysEvtReadyProcessing+0xec>)
 8000f0c:	f00a faa8 	bl	800b460 <iprintf>
 8000f10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f12:	4820      	ldr	r0, [pc, #128]	; (8000f94 <APPE_SysEvtReadyProcessing+0xf4>)
 8000f14:	f00a faa4 	bl	800b460 <iprintf>

    config_param.RevisionID = RevisionID;
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	4618      	mov	r0, r3
 8000f24:	f008 fdd0 	bl	8009ac8 <SHCI_C2_Config>

    APP_BLE_Init( );
 8000f28:	f001 fc2c 	bl	8002784 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f009 fff8 	bl	800af24 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 8000f34:	e022      	b.n	8000f7c <APPE_SysEvtReadyProcessing+0xdc>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d110      	bne.n	8000f60 <APPE_SysEvtReadyProcessing+0xc0>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n");
 8000f3e:	4811      	ldr	r0, [pc, #68]	; (8000f84 <APPE_SysEvtReadyProcessing+0xe4>)
 8000f40:	f008 fad8 	bl	80094f4 <DbgTraceGetFileName>
 8000f44:	4601      	mov	r1, r0
 8000f46:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8000f4a:	4a0f      	ldr	r2, [pc, #60]	; (8000f88 <APPE_SysEvtReadyProcessing+0xe8>)
 8000f4c:	480f      	ldr	r0, [pc, #60]	; (8000f8c <APPE_SysEvtReadyProcessing+0xec>)
 8000f4e:	f00a fa87 	bl	800b460 <iprintf>
 8000f52:	4811      	ldr	r0, [pc, #68]	; (8000f98 <APPE_SysEvtReadyProcessing+0xf8>)
 8000f54:	f00a fb0a 	bl	800b56c <puts>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
  return;
 8000f5e:	e00d      	b.n	8000f7c <APPE_SysEvtReadyProcessing+0xdc>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
 8000f60:	4808      	ldr	r0, [pc, #32]	; (8000f84 <APPE_SysEvtReadyProcessing+0xe4>)
 8000f62:	f008 fac7 	bl	80094f4 <DbgTraceGetFileName>
 8000f66:	4601      	mov	r1, r0
 8000f68:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <APPE_SysEvtReadyProcessing+0xe8>)
 8000f6e:	4807      	ldr	r0, [pc, #28]	; (8000f8c <APPE_SysEvtReadyProcessing+0xec>)
 8000f70:	f00a fa76 	bl	800b460 <iprintf>
 8000f74:	4809      	ldr	r0, [pc, #36]	; (8000f9c <APPE_SysEvtReadyProcessing+0xfc>)
 8000f76:	f00a faf9 	bl	800b56c <puts>
  return;
 8000f7a:	bf00      	nop
}
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	0800c4dc 	.word	0x0800c4dc
 8000f88:	0800cec8 	.word	0x0800cec8
 8000f8c:	0800c528 	.word	0x0800c528
 8000f90:	0800c740 	.word	0x0800c740
 8000f94:	0800c770 	.word	0x0800c770
 8000f98:	0800c790 	.word	0x0800c790
 8000f9c:	0800c7bc 	.word	0x0800c7bc

08000fa0 <MX_APPE_Process>:
    __WFI( );
  }
}

void MX_APPE_Process(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa8:	f009 ffec 	bl	800af84 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000fb4:	bf00      	nop
}
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fcc:	f009 ffda 	bl	800af84 <UTIL_SEQ_Run>

  return;
 8000fd0:	bf00      	nop
}
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2020      	movs	r0, #32
 8000fe4:	f00a f8da 	bl	800b19c <UTIL_SEQ_SetTask>
  return;
 8000fe8:	bf00      	nop
}
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f00a f93b 	bl	800b274 <UTIL_SEQ_SetEvt>
  return;
 8000ffe:	bf00      	nop
}
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800100e:	2002      	movs	r0, #2
 8001010:	f00a f950 	bl	800b2b4 <UTIL_SEQ_WaitEvt>
  return;
 8001014:	bf00      	nop
}
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <LL_EXTI_EnableIT_0_31>:
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <LL_EXTI_EnableIT_0_31+0x24>)
 8001026:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800102a:	4905      	ldr	r1, [pc, #20]	; (8001040 <LL_EXTI_EnableIT_0_31+0x24>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4313      	orrs	r3, r2
 8001030:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	58000800 	.word	0x58000800

08001044 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4904      	ldr	r1, [pc, #16]	; (8001064 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4313      	orrs	r3, r2
 8001056:	600b      	str	r3, [r1, #0]

}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	58000800 	.word	0x58000800

08001068 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <ReadRtcSsrValue+0x3c>)
 8001070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001072:	b29b      	uxth	r3, r3
 8001074:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <ReadRtcSsrValue+0x3c>)
 8001078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107a:	b29b      	uxth	r3, r3
 800107c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800107e:	e005      	b.n	800108c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <ReadRtcSsrValue+0x3c>)
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	b29b      	uxth	r3, r3
 800108a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d1f5      	bne.n	8001080 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001094:	683b      	ldr	r3, [r7, #0]
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40002800 	.word	0x40002800

080010a8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	460a      	mov	r2, r1
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	4613      	mov	r3, r2
 80010b6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80010b8:	79ba      	ldrb	r2, [r7, #6]
 80010ba:	491d      	ldr	r1, [pc, #116]	; (8001130 <LinkTimerAfter+0x88>)
 80010bc:	4613      	mov	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	440b      	add	r3, r1
 80010c6:	3315      	adds	r3, #21
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d009      	beq.n	80010e6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	4916      	ldr	r1, [pc, #88]	; (8001130 <LinkTimerAfter+0x88>)
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	440b      	add	r3, r1
 80010e0:	3314      	adds	r3, #20
 80010e2:	79fa      	ldrb	r2, [r7, #7]
 80010e4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80010e6:	79fa      	ldrb	r2, [r7, #7]
 80010e8:	4911      	ldr	r1, [pc, #68]	; (8001130 <LinkTimerAfter+0x88>)
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	440b      	add	r3, r1
 80010f4:	3315      	adds	r3, #21
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80010fa:	79fa      	ldrb	r2, [r7, #7]
 80010fc:	490c      	ldr	r1, [pc, #48]	; (8001130 <LinkTimerAfter+0x88>)
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	440b      	add	r3, r1
 8001108:	3314      	adds	r3, #20
 800110a:	79ba      	ldrb	r2, [r7, #6]
 800110c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800110e:	79ba      	ldrb	r2, [r7, #6]
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <LinkTimerAfter+0x88>)
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	440b      	add	r3, r1
 800111c:	3315      	adds	r3, #21
 800111e:	79fa      	ldrb	r2, [r7, #7]
 8001120:	701a      	strb	r2, [r3, #0]

  return;
 8001122:	bf00      	nop
}
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000094 	.word	0x20000094

08001134 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	460a      	mov	r2, r1
 800113e:	71fb      	strb	r3, [r7, #7]
 8001140:	4613      	mov	r3, r2
 8001142:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <LinkTimerBefore+0xb8>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	79ba      	ldrb	r2, [r7, #6]
 800114c:	429a      	cmp	r2, r3
 800114e:	d032      	beq.n	80011b6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001150:	79ba      	ldrb	r2, [r7, #6]
 8001152:	4927      	ldr	r1, [pc, #156]	; (80011f0 <LinkTimerBefore+0xbc>)
 8001154:	4613      	mov	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4413      	add	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	440b      	add	r3, r1
 800115e:	3314      	adds	r3, #20
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001164:	7bfa      	ldrb	r2, [r7, #15]
 8001166:	4922      	ldr	r1, [pc, #136]	; (80011f0 <LinkTimerBefore+0xbc>)
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	440b      	add	r3, r1
 8001172:	3315      	adds	r3, #21
 8001174:	79fa      	ldrb	r2, [r7, #7]
 8001176:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001178:	79fa      	ldrb	r2, [r7, #7]
 800117a:	491d      	ldr	r1, [pc, #116]	; (80011f0 <LinkTimerBefore+0xbc>)
 800117c:	4613      	mov	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	440b      	add	r3, r1
 8001186:	3315      	adds	r3, #21
 8001188:	79ba      	ldrb	r2, [r7, #6]
 800118a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800118c:	79fa      	ldrb	r2, [r7, #7]
 800118e:	4918      	ldr	r1, [pc, #96]	; (80011f0 <LinkTimerBefore+0xbc>)
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	3314      	adds	r3, #20
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80011a0:	79ba      	ldrb	r2, [r7, #6]
 80011a2:	4913      	ldr	r1, [pc, #76]	; (80011f0 <LinkTimerBefore+0xbc>)
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	440b      	add	r3, r1
 80011ae:	3314      	adds	r3, #20
 80011b0:	79fa      	ldrb	r2, [r7, #7]
 80011b2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80011b4:	e014      	b.n	80011e0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80011b6:	79fa      	ldrb	r2, [r7, #7]
 80011b8:	490d      	ldr	r1, [pc, #52]	; (80011f0 <LinkTimerBefore+0xbc>)
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	440b      	add	r3, r1
 80011c4:	3315      	adds	r3, #21
 80011c6:	79ba      	ldrb	r2, [r7, #6]
 80011c8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80011ca:	79ba      	ldrb	r2, [r7, #6]
 80011cc:	4908      	ldr	r1, [pc, #32]	; (80011f0 <LinkTimerBefore+0xbc>)
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	440b      	add	r3, r1
 80011d8:	3314      	adds	r3, #20
 80011da:	79fa      	ldrb	r2, [r7, #7]
 80011dc:	701a      	strb	r2, [r3, #0]
  return;
 80011de:	bf00      	nop
}
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000124 	.word	0x20000124
 80011f0:	20000094 	.word	0x20000094

080011f4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011fe:	4b4e      	ldr	r3, [pc, #312]	; (8001338 <linkTimer+0x144>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b06      	cmp	r3, #6
 8001206:	d118      	bne.n	800123a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <linkTimer+0x144>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b4b      	ldr	r3, [pc, #300]	; (800133c <linkTimer+0x148>)
 8001210:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001212:	4a49      	ldr	r2, [pc, #292]	; (8001338 <linkTimer+0x144>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001218:	79fa      	ldrb	r2, [r7, #7]
 800121a:	4949      	ldr	r1, [pc, #292]	; (8001340 <linkTimer+0x14c>)
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	440b      	add	r3, r1
 8001226:	3315      	adds	r3, #21
 8001228:	2206      	movs	r2, #6
 800122a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800122c:	4b45      	ldr	r3, [pc, #276]	; (8001344 <linkTimer+0x150>)
 800122e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001232:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	81fb      	strh	r3, [r7, #14]
 8001238:	e078      	b.n	800132c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800123a:	f000 f909 	bl	8001450 <ReturnTimeElapsed>
 800123e:	4603      	mov	r3, r0
 8001240:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001242:	79fa      	ldrb	r2, [r7, #7]
 8001244:	493e      	ldr	r1, [pc, #248]	; (8001340 <linkTimer+0x14c>)
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	440b      	add	r3, r1
 8001250:	3308      	adds	r3, #8
 8001252:	6819      	ldr	r1, [r3, #0]
 8001254:	89fb      	ldrh	r3, [r7, #14]
 8001256:	79fa      	ldrb	r2, [r7, #7]
 8001258:	4419      	add	r1, r3
 800125a:	4839      	ldr	r0, [pc, #228]	; (8001340 <linkTimer+0x14c>)
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	4403      	add	r3, r0
 8001266:	3308      	adds	r3, #8
 8001268:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	4934      	ldr	r1, [pc, #208]	; (8001340 <linkTimer+0x14c>)
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	440b      	add	r3, r1
 8001278:	3308      	adds	r3, #8
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800127e:	4b2e      	ldr	r3, [pc, #184]	; (8001338 <linkTimer+0x144>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	4619      	mov	r1, r3
 8001286:	4a2e      	ldr	r2, [pc, #184]	; (8001340 <linkTimer+0x14c>)
 8001288:	460b      	mov	r3, r1
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	440b      	add	r3, r1
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	3308      	adds	r3, #8
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	429a      	cmp	r2, r3
 800129a:	d337      	bcc.n	800130c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800129c:	4b26      	ldr	r3, [pc, #152]	; (8001338 <linkTimer+0x144>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80012a2:	7b7a      	ldrb	r2, [r7, #13]
 80012a4:	4926      	ldr	r1, [pc, #152]	; (8001340 <linkTimer+0x14c>)
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	440b      	add	r3, r1
 80012b0:	3315      	adds	r3, #21
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80012b6:	e013      	b.n	80012e0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80012b8:	7b7a      	ldrb	r2, [r7, #13]
 80012ba:	4921      	ldr	r1, [pc, #132]	; (8001340 <linkTimer+0x14c>)
 80012bc:	4613      	mov	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	440b      	add	r3, r1
 80012c6:	3315      	adds	r3, #21
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80012cc:	7b7a      	ldrb	r2, [r7, #13]
 80012ce:	491c      	ldr	r1, [pc, #112]	; (8001340 <linkTimer+0x14c>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	440b      	add	r3, r1
 80012da:	3315      	adds	r3, #21
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80012e0:	7b3b      	ldrb	r3, [r7, #12]
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d00b      	beq.n	80012fe <linkTimer+0x10a>
 80012e6:	7b3a      	ldrb	r2, [r7, #12]
 80012e8:	4915      	ldr	r1, [pc, #84]	; (8001340 <linkTimer+0x14c>)
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	440b      	add	r3, r1
 80012f4:	3308      	adds	r3, #8
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d2dc      	bcs.n	80012b8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80012fe:	7b7a      	ldrb	r2, [r7, #13]
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fecf 	bl	80010a8 <LinkTimerAfter>
 800130a:	e00f      	b.n	800132c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <linkTimer+0x144>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff0c 	bl	8001134 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <linkTimer+0x144>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <linkTimer+0x148>)
 8001324:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <linkTimer+0x144>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800132c:	89fb      	ldrh	r3, [r7, #14]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000124 	.word	0x20000124
 800133c:	20000125 	.word	0x20000125
 8001340:	20000094 	.word	0x20000094
 8001344:	20000128 	.word	0x20000128

08001348 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	460a      	mov	r2, r1
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	4613      	mov	r3, r2
 8001356:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001358:	4b39      	ldr	r3, [pc, #228]	; (8001440 <UnlinkTimer+0xf8>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	79fa      	ldrb	r2, [r7, #7]
 8001360:	429a      	cmp	r2, r3
 8001362:	d111      	bne.n	8001388 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001364:	4b36      	ldr	r3, [pc, #216]	; (8001440 <UnlinkTimer+0xf8>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b36      	ldr	r3, [pc, #216]	; (8001444 <UnlinkTimer+0xfc>)
 800136c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800136e:	79fa      	ldrb	r2, [r7, #7]
 8001370:	4935      	ldr	r1, [pc, #212]	; (8001448 <UnlinkTimer+0x100>)
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	440b      	add	r3, r1
 800137c:	3315      	adds	r3, #21
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <UnlinkTimer+0xf8>)
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	e03e      	b.n	8001406 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001388:	79fa      	ldrb	r2, [r7, #7]
 800138a:	492f      	ldr	r1, [pc, #188]	; (8001448 <UnlinkTimer+0x100>)
 800138c:	4613      	mov	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	3314      	adds	r3, #20
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800139c:	79fa      	ldrb	r2, [r7, #7]
 800139e:	492a      	ldr	r1, [pc, #168]	; (8001448 <UnlinkTimer+0x100>)
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	3315      	adds	r3, #21
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80013b0:	79f9      	ldrb	r1, [r7, #7]
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	4824      	ldr	r0, [pc, #144]	; (8001448 <UnlinkTimer+0x100>)
 80013b6:	460b      	mov	r3, r1
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	440b      	add	r3, r1
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	4403      	add	r3, r0
 80013c0:	3315      	adds	r3, #21
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b2d8      	uxtb	r0, r3
 80013c6:	4920      	ldr	r1, [pc, #128]	; (8001448 <UnlinkTimer+0x100>)
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	3315      	adds	r3, #21
 80013d4:	4602      	mov	r2, r0
 80013d6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013d8:	7bbb      	ldrb	r3, [r7, #14]
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d013      	beq.n	8001406 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80013de:	79f9      	ldrb	r1, [r7, #7]
 80013e0:	7bba      	ldrb	r2, [r7, #14]
 80013e2:	4819      	ldr	r0, [pc, #100]	; (8001448 <UnlinkTimer+0x100>)
 80013e4:	460b      	mov	r3, r1
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	440b      	add	r3, r1
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4403      	add	r3, r0
 80013ee:	3314      	adds	r3, #20
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b2d8      	uxtb	r0, r3
 80013f4:	4914      	ldr	r1, [pc, #80]	; (8001448 <UnlinkTimer+0x100>)
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	440b      	add	r3, r1
 8001400:	3314      	adds	r3, #20
 8001402:	4602      	mov	r2, r0
 8001404:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001406:	79fa      	ldrb	r2, [r7, #7]
 8001408:	490f      	ldr	r1, [pc, #60]	; (8001448 <UnlinkTimer+0x100>)
 800140a:	4613      	mov	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	440b      	add	r3, r1
 8001414:	330c      	adds	r3, #12
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <UnlinkTimer+0xf8>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b06      	cmp	r3, #6
 8001422:	d107      	bne.n	8001434 <UnlinkTimer+0xec>
 8001424:	79bb      	ldrb	r3, [r7, #6]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d104      	bne.n	8001434 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <UnlinkTimer+0x104>)
 800142c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001430:	601a      	str	r2, [r3, #0]
  }

  return;
 8001432:	bf00      	nop
 8001434:	bf00      	nop
}
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	20000124 	.word	0x20000124
 8001444:	20000125 	.word	0x20000125
 8001448:	20000094 	.word	0x20000094
 800144c:	20000128 	.word	0x20000128

08001450 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <ReturnTimeElapsed+0x70>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800145e:	d026      	beq.n	80014ae <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001460:	f7ff fe02 	bl	8001068 <ReadRtcSsrValue>
 8001464:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <ReturnTimeElapsed+0x70>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	429a      	cmp	r2, r3
 800146e:	d805      	bhi.n	800147c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <ReturnTimeElapsed+0x70>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	e00a      	b.n	8001492 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <ReturnTimeElapsed+0x74>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001488:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <ReturnTimeElapsed+0x70>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	4413      	add	r3, r2
 8001490:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <ReturnTimeElapsed+0x78>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	fb02 f303 	mul.w	r3, r2, r3
 800149e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <ReturnTimeElapsed+0x7c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	40d3      	lsrs	r3, r2
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	e001      	b.n	80014b2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	b29b      	uxth	r3, r3
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000128 	.word	0x20000128
 80014c4:	20000236 	.word	0x20000236
 80014c8:	20000235 	.word	0x20000235
 80014cc:	20000234 	.word	0x20000234

080014d0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d108      	bne.n	80014f2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80014e0:	f7ff fdc2 	bl	8001068 <ReadRtcSsrValue>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a24      	ldr	r2, [pc, #144]	; (8001578 <RestartWakeupCounter+0xa8>)
 80014e8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80014ea:	2003      	movs	r0, #3
 80014ec:	f002 fde9 	bl	80040c2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80014f0:	e03e      	b.n	8001570 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d803      	bhi.n	8001500 <RestartWakeupCounter+0x30>
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <RestartWakeupCounter+0xac>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d002      	beq.n	8001506 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	3b01      	subs	r3, #1
 8001504:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001506:	bf00      	nop
 8001508:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <RestartWakeupCounter+0xb0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f7      	beq.n	8001508 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <RestartWakeupCounter+0xb0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <RestartWakeupCounter+0xb0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800152c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <RestartWakeupCounter+0xb4>)
 8001530:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001534:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001536:	2003      	movs	r0, #3
 8001538:	f002 fdd1 	bl	80040de <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <RestartWakeupCounter+0xb8>)
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	0c1b      	lsrs	r3, r3, #16
 8001542:	041b      	lsls	r3, r3, #16
 8001544:	88fa      	ldrh	r2, [r7, #6]
 8001546:	4910      	ldr	r1, [pc, #64]	; (8001588 <RestartWakeupCounter+0xb8>)
 8001548:	4313      	orrs	r3, r2
 800154a:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800154c:	f7ff fd8c 	bl	8001068 <ReadRtcSsrValue>
 8001550:	4603      	mov	r3, r0
 8001552:	4a09      	ldr	r2, [pc, #36]	; (8001578 <RestartWakeupCounter+0xa8>)
 8001554:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <RestartWakeupCounter+0xb0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <RestartWakeupCounter+0xb0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001568:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800156a:	f3af 8000 	nop.w
  return ;
 800156e:	bf00      	nop
}
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000128 	.word	0x20000128
 800157c:	20000234 	.word	0x20000234
 8001580:	20000230 	.word	0x20000230
 8001584:	58000800 	.word	0x58000800
 8001588:	40002800 	.word	0x40002800

0800158c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001592:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <RescheduleTimerList+0x124>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800159e:	d108      	bne.n	80015b2 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80015a0:	bf00      	nop
 80015a2:	4b44      	ldr	r3, [pc, #272]	; (80016b4 <RescheduleTimerList+0x128>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f7      	bne.n	80015a2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80015b2:	4b40      	ldr	r3, [pc, #256]	; (80016b4 <RescheduleTimerList+0x128>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <RescheduleTimerList+0x128>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015c4:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80015c6:	4b3c      	ldr	r3, [pc, #240]	; (80016b8 <RescheduleTimerList+0x12c>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	493b      	ldr	r1, [pc, #236]	; (80016bc <RescheduleTimerList+0x130>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	3308      	adds	r3, #8
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80015e0:	f7ff ff36 	bl	8001450 <ReturnTimeElapsed>
 80015e4:	4603      	mov	r3, r0
 80015e6:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d205      	bcs.n	80015fc <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80015f4:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <RescheduleTimerList+0x134>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	e04d      	b.n	8001698 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	4a31      	ldr	r2, [pc, #196]	; (80016c4 <RescheduleTimerList+0x138>)
 8001600:	8812      	ldrh	r2, [r2, #0]
 8001602:	b292      	uxth	r2, r2
 8001604:	4413      	add	r3, r2
 8001606:	461a      	mov	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4293      	cmp	r3, r2
 800160c:	d906      	bls.n	800161c <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800160e:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <RescheduleTimerList+0x138>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <RescheduleTimerList+0x134>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
 800161a:	e03d      	b.n	8001698 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	b29a      	uxth	r2, r3
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <RescheduleTimerList+0x134>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800162c:	e034      	b.n	8001698 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	4922      	ldr	r1, [pc, #136]	; (80016bc <RescheduleTimerList+0x130>)
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	440b      	add	r3, r1
 800163c:	3308      	adds	r3, #8
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	429a      	cmp	r2, r3
 8001644:	d20a      	bcs.n	800165c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	491c      	ldr	r1, [pc, #112]	; (80016bc <RescheduleTimerList+0x130>)
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	440b      	add	r3, r1
 8001654:	3308      	adds	r3, #8
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e013      	b.n	8001684 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	4917      	ldr	r1, [pc, #92]	; (80016bc <RescheduleTimerList+0x130>)
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	440b      	add	r3, r1
 800166a:	3308      	adds	r3, #8
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	7bfa      	ldrb	r2, [r7, #15]
 8001672:	1ac9      	subs	r1, r1, r3
 8001674:	4811      	ldr	r0, [pc, #68]	; (80016bc <RescheduleTimerList+0x130>)
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4403      	add	r3, r0
 8001680:	3308      	adds	r3, #8
 8001682:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001684:	7bfa      	ldrb	r2, [r7, #15]
 8001686:	490d      	ldr	r1, [pc, #52]	; (80016bc <RescheduleTimerList+0x130>)
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	3315      	adds	r3, #21
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	2b06      	cmp	r3, #6
 800169c:	d1c7      	bne.n	800162e <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800169e:	89bb      	ldrh	r3, [r7, #12]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff15 	bl	80014d0 <RestartWakeupCounter>

  return ;
 80016a6:	bf00      	nop
}
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40002800 	.word	0x40002800
 80016b4:	20000230 	.word	0x20000230
 80016b8:	20000124 	.word	0x20000124
 80016bc:	20000094 	.word	0x20000094
 80016c0:	2000012c 	.word	0x2000012c
 80016c4:	20000238 	.word	0x20000238

080016c8 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016ce:	f3ef 8310 	mrs	r3, PRIMASK
 80016d2:	617b      	str	r3, [r7, #20]
  return(result);
 80016d4:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80016dc:	4b5f      	ldr	r3, [pc, #380]	; (800185c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	22ca      	movs	r2, #202	; 0xca
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24
 80016e6:	4b5d      	ldr	r3, [pc, #372]	; (800185c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2253      	movs	r2, #83	; 0x53
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80016f0:	4b5a      	ldr	r3, [pc, #360]	; (800185c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	4b58      	ldr	r3, [pc, #352]	; (800185c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001702:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001704:	4b56      	ldr	r3, [pc, #344]	; (8001860 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800170c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001710:	4954      	ldr	r1, [pc, #336]	; (8001864 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	330c      	adds	r3, #12
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d172      	bne.n	800180c <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001726:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800172a:	494e      	ldr	r1, [pc, #312]	; (8001864 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800173a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800173e:	4949      	ldr	r1, [pc, #292]	; (8001864 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	3310      	adds	r3, #16
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001750:	4b45      	ldr	r3, [pc, #276]	; (8001868 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d050      	beq.n	80017fc <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800175a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800175e:	4941      	ldr	r1, [pc, #260]	; (8001864 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	440b      	add	r3, r1
 800176a:	330d      	adds	r3, #13
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b01      	cmp	r3, #1
 8001772:	d126      	bne.n	80017c2 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001774:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001778:	2101      	movs	r1, #1
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fde4 	bl	8001348 <UnlinkTimer>
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f383 8810 	msr	PRIMASK, r3
}
 800178a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800178c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001790:	4934      	ldr	r1, [pc, #208]	; (8001864 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	440b      	add	r3, r1
 800179c:	3304      	adds	r3, #4
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f9d4 	bl	8001b54 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80017ac:	4b2b      	ldr	r3, [pc, #172]	; (800185c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	22ca      	movs	r2, #202	; 0xca
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
 80017b6:	4b29      	ldr	r3, [pc, #164]	; (800185c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2253      	movs	r2, #83	; 0x53
 80017be:	625a      	str	r2, [r3, #36]	; 0x24
 80017c0:	e014      	b.n	80017ec <HW_TS_RTC_Wakeup_Handler+0x124>
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f383 8810 	msr	PRIMASK, r3
}
 80017cc:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80017ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f932 	bl	8001a3c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80017d8:	4b20      	ldr	r3, [pc, #128]	; (800185c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	22ca      	movs	r2, #202	; 0xca
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2253      	movs	r2, #83	; 0x53
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80017ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017f0:	69fa      	ldr	r2, [r7, #28]
 80017f2:	4619      	mov	r1, r3
 80017f4:	69b8      	ldr	r0, [r7, #24]
 80017f6:	f000 fa35 	bl	8001c64 <HW_TS_RTC_Int_AppNot>
 80017fa:	e025      	b.n	8001848 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 80017fc:	f7ff fec6 	bl	800158c <RescheduleTimerList>
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f383 8810 	msr	PRIMASK, r3
}
 800180a:	e01d      	b.n	8001848 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800180c:	bf00      	nop
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f7      	beq.n	800180e <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001832:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8001836:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f383 8810 	msr	PRIMASK, r3
}
 8001846:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	22ff      	movs	r2, #255	; 0xff
 8001850:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001852:	bf00      	nop
}
 8001854:	3728      	adds	r7, #40	; 0x28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000230 	.word	0x20000230
 8001860:	20000124 	.word	0x20000124
 8001864:	20000094 	.word	0x20000094
 8001868:	2000012c 	.word	0x2000012c
 800186c:	58000800 	.word	0x58000800

08001870 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800187c:	4a64      	ldr	r2, [pc, #400]	; (8001a10 <HW_TS_Init+0x1a0>)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001882:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HW_TS_Init+0x1a0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	22ca      	movs	r2, #202	; 0xca
 800188a:	625a      	str	r2, [r3, #36]	; 0x24
 800188c:	4b60      	ldr	r3, [pc, #384]	; (8001a10 <HW_TS_Init+0x1a0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2253      	movs	r2, #83	; 0x53
 8001894:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001896:	4b5f      	ldr	r3, [pc, #380]	; (8001a14 <HW_TS_Init+0x1a4>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	4a5e      	ldr	r2, [pc, #376]	; (8001a14 <HW_TS_Init+0x1a4>)
 800189c:	f043 0320 	orr.w	r3, r3, #32
 80018a0:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80018a2:	4b5c      	ldr	r3, [pc, #368]	; (8001a14 <HW_TS_Init+0x1a4>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f1c3 0304 	rsb	r3, r3, #4
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	4b58      	ldr	r3, [pc, #352]	; (8001a18 <HW_TS_Init+0x1a8>)
 80018b6:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80018b8:	4b56      	ldr	r3, [pc, #344]	; (8001a14 <HW_TS_Init+0x1a4>)
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80018c0:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80018c4:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	fa92 f2a2 	rbit	r2, r2
 80018cc:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	2a00      	cmp	r2, #0
 80018d6:	d101      	bne.n	80018dc <HW_TS_Init+0x6c>
  {
    return 32U;
 80018d8:	2220      	movs	r2, #32
 80018da:	e003      	b.n	80018e4 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	fab2 f282 	clz	r2, r2
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	40d3      	lsrs	r3, r2
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <HW_TS_Init+0x1ac>)
 80018ee:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80018f0:	4b48      	ldr	r3, [pc, #288]	; (8001a14 <HW_TS_Init+0x1a4>)
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	3301      	adds	r3, #1
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HW_TS_Init+0x1b0>)
 8001902:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001904:	4b46      	ldr	r3, [pc, #280]	; (8001a20 <HW_TS_Init+0x1b0>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	3b01      	subs	r3, #1
 800190a:	4a44      	ldr	r2, [pc, #272]	; (8001a1c <HW_TS_Init+0x1ac>)
 800190c:	7812      	ldrb	r2, [r2, #0]
 800190e:	fb02 f303 	mul.w	r3, r2, r3
 8001912:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001916:	4a40      	ldr	r2, [pc, #256]	; (8001a18 <HW_TS_Init+0x1a8>)
 8001918:	7812      	ldrb	r2, [r2, #0]
 800191a:	40d3      	lsrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001924:	4293      	cmp	r3, r2
 8001926:	d904      	bls.n	8001932 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001928:	4b3e      	ldr	r3, [pc, #248]	; (8001a24 <HW_TS_Init+0x1b4>)
 800192a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800192e:	801a      	strh	r2, [r3, #0]
 8001930:	e003      	b.n	800193a <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	b29a      	uxth	r2, r3
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <HW_TS_Init+0x1b4>)
 8001938:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800193a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800193e:	f7ff fb81 	bl	8001044 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001942:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001946:	f7ff fb69 	bl	800101c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d143      	bne.n	80019d8 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001950:	4b35      	ldr	r3, [pc, #212]	; (8001a28 <HW_TS_Init+0x1b8>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001956:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <HW_TS_Init+0x1bc>)
 8001958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800195c:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800195e:	2300      	movs	r3, #0
 8001960:	77fb      	strb	r3, [r7, #31]
 8001962:	e00c      	b.n	800197e <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001964:	7ffa      	ldrb	r2, [r7, #31]
 8001966:	4932      	ldr	r1, [pc, #200]	; (8001a30 <HW_TS_Init+0x1c0>)
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	330c      	adds	r3, #12
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001978:	7ffb      	ldrb	r3, [r7, #31]
 800197a:	3301      	adds	r3, #1
 800197c:	77fb      	strb	r3, [r7, #31]
 800197e:	7ffb      	ldrb	r3, [r7, #31]
 8001980:	2b05      	cmp	r3, #5
 8001982:	d9ef      	bls.n	8001964 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001984:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <HW_TS_Init+0x1c4>)
 8001986:	2206      	movs	r2, #6
 8001988:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800198a:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <HW_TS_Init+0x1a0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <HW_TS_Init+0x1a0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800199c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <HW_TS_Init+0x1a0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HW_TS_Init+0x1a0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80019b2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80019b4:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <HW_TS_Init+0x1c8>)
 80019b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019ba:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80019bc:	2003      	movs	r0, #3
 80019be:	f002 fb8e 	bl	80040de <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HW_TS_Init+0x1a0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HW_TS_Init+0x1a0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	e00a      	b.n	80019ee <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80019d8:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <HW_TS_Init+0x1a0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80019e8:	2003      	movs	r0, #3
 80019ea:	f002 fb6a 	bl	80040c2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HW_TS_Init+0x1a0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	22ff      	movs	r2, #255	; 0xff
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80019f8:	2200      	movs	r2, #0
 80019fa:	2103      	movs	r1, #3
 80019fc:	2003      	movs	r0, #3
 80019fe:	f002 fb1e 	bl	800403e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a02:	2003      	movs	r0, #3
 8001a04:	f002 fb35 	bl	8004072 <HAL_NVIC_EnableIRQ>

  return;
 8001a08:	bf00      	nop
}
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000230 	.word	0x20000230
 8001a14:	40002800 	.word	0x40002800
 8001a18:	20000234 	.word	0x20000234
 8001a1c:	20000235 	.word	0x20000235
 8001a20:	20000236 	.word	0x20000236
 8001a24:	20000238 	.word	0x20000238
 8001a28:	2000012c 	.word	0x2000012c
 8001a2c:	20000128 	.word	0x20000128
 8001a30:	20000094 	.word	0x20000094
 8001a34:	20000124 	.word	0x20000124
 8001a38:	58000800 	.word	0x58000800

08001a3c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a46:	f3ef 8310 	mrs	r3, PRIMASK
 8001a4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001a4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a50:	b672      	cpsid	i
}
 8001a52:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001a54:	2003      	movs	r0, #3
 8001a56:	f002 fb1a 	bl	800408e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a5a:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <HW_TS_Stop+0x100>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	22ca      	movs	r2, #202	; 0xca
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24
 8001a64:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <HW_TS_Stop+0x100>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2253      	movs	r2, #83	; 0x53
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001a6e:	79fa      	ldrb	r2, [r7, #7]
 8001a70:	4933      	ldr	r1, [pc, #204]	; (8001b40 <HW_TS_Stop+0x104>)
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	440b      	add	r3, r1
 8001a7c:	330c      	adds	r3, #12
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d148      	bne.n	8001b18 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fc5c 	bl	8001348 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001a90:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <HW_TS_Stop+0x108>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a96:	7cfb      	ldrb	r3, [r7, #19]
 8001a98:	2b06      	cmp	r3, #6
 8001a9a:	d135      	bne.n	8001b08 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HW_TS_Stop+0x10c>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa8:	d108      	bne.n	8001abc <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001aaa:	bf00      	nop
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <HW_TS_Stop+0x100>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f7      	bne.n	8001aac <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <HW_TS_Stop+0x100>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HW_TS_Stop+0x100>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ace:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001ad0:	bf00      	nop
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HW_TS_Stop+0x100>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f7      	beq.n	8001ad2 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HW_TS_Stop+0x100>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HW_TS_Stop+0x100>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001af6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <HW_TS_Stop+0x110>)
 8001afa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001afe:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001b00:	2003      	movs	r0, #3
 8001b02:	f002 faec 	bl	80040de <HAL_NVIC_ClearPendingIRQ>
 8001b06:	e007      	b.n	8001b18 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HW_TS_Stop+0x114>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	7cfa      	ldrb	r2, [r7, #19]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001b14:	f7ff fd3a 	bl	800158c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <HW_TS_Stop+0x100>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	22ff      	movs	r2, #255	; 0xff
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001b22:	2003      	movs	r0, #3
 8001b24:	f002 faa5 	bl	8004072 <HAL_NVIC_EnableIRQ>
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f383 8810 	msr	PRIMASK, r3
}
 8001b32:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001b34:	bf00      	nop
}
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000230 	.word	0x20000230
 8001b40:	20000094 	.word	0x20000094
 8001b44:	20000124 	.word	0x20000124
 8001b48:	40002800 	.word	0x40002800
 8001b4c:	58000800 	.word	0x58000800
 8001b50:	20000125 	.word	0x20000125

08001b54 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001b60:	79fa      	ldrb	r2, [r7, #7]
 8001b62:	493c      	ldr	r1, [pc, #240]	; (8001c54 <HW_TS_Start+0x100>)
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	440b      	add	r3, r1
 8001b6e:	330c      	adds	r3, #12
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d103      	bne.n	8001b80 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff5e 	bl	8001a3c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b80:	f3ef 8310 	mrs	r3, PRIMASK
 8001b84:	60fb      	str	r3, [r7, #12]
  return(result);
 8001b86:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b8a:	b672      	cpsid	i
}
 8001b8c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001b8e:	2003      	movs	r0, #3
 8001b90:	f002 fa7d 	bl	800408e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HW_TS_Start+0x104>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	22ca      	movs	r2, #202	; 0xca
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <HW_TS_Start+0x104>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2253      	movs	r2, #83	; 0x53
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001ba8:	79fa      	ldrb	r2, [r7, #7]
 8001baa:	492a      	ldr	r1, [pc, #168]	; (8001c54 <HW_TS_Start+0x100>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	330c      	adds	r3, #12
 8001bb8:	2202      	movs	r2, #2
 8001bba:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001bbc:	79fa      	ldrb	r2, [r7, #7]
 8001bbe:	4925      	ldr	r1, [pc, #148]	; (8001c54 <HW_TS_Start+0x100>)
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	440b      	add	r3, r1
 8001bca:	3308      	adds	r3, #8
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001bd0:	79fa      	ldrb	r2, [r7, #7]
 8001bd2:	4920      	ldr	r1, [pc, #128]	; (8001c54 <HW_TS_Start+0x100>)
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	3304      	adds	r3, #4
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fb04 	bl	80011f4 <linkTimer>
 8001bec:	4603      	mov	r3, r0
 8001bee:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HW_TS_Start+0x108>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <HW_TS_Start+0x10c>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	7c7a      	ldrb	r2, [r7, #17]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d002      	beq.n	8001c08 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001c02:	f7ff fcc3 	bl	800158c <RescheduleTimerList>
 8001c06:	e013      	b.n	8001c30 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001c08:	79fa      	ldrb	r2, [r7, #7]
 8001c0a:	4912      	ldr	r1, [pc, #72]	; (8001c54 <HW_TS_Start+0x100>)
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	3308      	adds	r3, #8
 8001c18:	6819      	ldr	r1, [r3, #0]
 8001c1a:	8a7b      	ldrh	r3, [r7, #18]
 8001c1c:	79fa      	ldrb	r2, [r7, #7]
 8001c1e:	1ac9      	subs	r1, r1, r3
 8001c20:	480c      	ldr	r0, [pc, #48]	; (8001c54 <HW_TS_Start+0x100>)
 8001c22:	4613      	mov	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4403      	add	r3, r0
 8001c2c:	3308      	adds	r3, #8
 8001c2e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HW_TS_Start+0x104>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	22ff      	movs	r2, #255	; 0xff
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c3a:	2003      	movs	r0, #3
 8001c3c:	f002 fa19 	bl	8004072 <HAL_NVIC_EnableIRQ>
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f383 8810 	msr	PRIMASK, r3
}
 8001c4a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001c4c:	bf00      	nop
}
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000094 	.word	0x20000094
 8001c58:	20000230 	.word	0x20000230
 8001c5c:	20000124 	.word	0x20000124
 8001c60:	20000125 	.word	0x20000125

08001c64 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4798      	blx	r3

  return;
 8001c76:	bf00      	nop
}
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001c96:	2300      	movs	r3, #0
 8001c98:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <HW_UART_Transmit_DMA+0x26>
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d00f      	beq.n	8001cc4 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001ca4:	e01d      	b.n	8001ce2 <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 8001ca6:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <HW_UART_Transmit_DMA+0xa4>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <HW_UART_Transmit_DMA+0xa8>)
 8001cae:	4a1f      	ldr	r2, [pc, #124]	; (8001d2c <HW_UART_Transmit_DMA+0xac>)
 8001cb0:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001cb2:	89bb      	ldrh	r3, [r7, #12]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	481b      	ldr	r0, [pc, #108]	; (8001d28 <HW_UART_Transmit_DMA+0xa8>)
 8001cba:	f004 fff9 	bl	8006cb0 <HAL_UART_Transmit_DMA>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	75fb      	strb	r3, [r7, #23]
            break;
 8001cc2:	e00e      	b.n	8001ce2 <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8001cc4:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <HW_UART_Transmit_DMA+0xb0>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8001cca:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <HW_UART_Transmit_DMA+0xb4>)
 8001ccc:	4a1a      	ldr	r2, [pc, #104]	; (8001d38 <HW_UART_Transmit_DMA+0xb8>)
 8001cce:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8001cd0:	89bb      	ldrh	r3, [r7, #12]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	4817      	ldr	r0, [pc, #92]	; (8001d34 <HW_UART_Transmit_DMA+0xb4>)
 8001cd8:	f004 ffea 	bl	8006cb0 <HAL_UART_Transmit_DMA>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	75fb      	strb	r3, [r7, #23]
            break;
 8001ce0:	bf00      	nop
    }

    switch (hal_status)
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d817      	bhi.n	8001d18 <HW_UART_Transmit_DMA+0x98>
 8001ce8:	a201      	add	r2, pc, #4	; (adr r2, 8001cf0 <HW_UART_Transmit_DMA+0x70>)
 8001cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cee:	bf00      	nop
 8001cf0:	08001d01 	.word	0x08001d01
 8001cf4:	08001d07 	.word	0x08001d07
 8001cf8:	08001d0d 	.word	0x08001d0d
 8001cfc:	08001d13 	.word	0x08001d13
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001d00:	2300      	movs	r3, #0
 8001d02:	75bb      	strb	r3, [r7, #22]
            break;
 8001d04:	e009      	b.n	8001d1a <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001d06:	2301      	movs	r3, #1
 8001d08:	75bb      	strb	r3, [r7, #22]
            break;
 8001d0a:	e006      	b.n	8001d1a <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	75bb      	strb	r3, [r7, #22]
            break;
 8001d10:	e003      	b.n	8001d1a <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001d12:	2303      	movs	r3, #3
 8001d14:	75bb      	strb	r3, [r7, #22]
            break;
 8001d16:	e000      	b.n	8001d1a <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 8001d18:	bf00      	nop
    }

    return hw_status;
 8001d1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	2000023c 	.word	0x2000023c
 8001d28:	20000310 	.word	0x20000310
 8001d2c:	40013800 	.word	0x40013800
 8001d30:	20000240 	.word	0x20000240
 8001d34:	20000280 	.word	0x20000280
 8001d38:	40008000 	.word	0x40008000

08001d3c <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0f      	ldr	r2, [pc, #60]	; (8001d88 <HAL_UART_TxCpltCallback+0x4c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00a      	beq.n	8001d64 <HAL_UART_TxCpltCallback+0x28>
 8001d4e:	4a0f      	ldr	r2, [pc, #60]	; (8001d8c <HAL_UART_TxCpltCallback+0x50>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d10f      	bne.n	8001d74 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001d54:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <HAL_UART_TxCpltCallback+0x54>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00d      	beq.n	8001d78 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_UART_TxCpltCallback+0x54>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4798      	blx	r3
            }
            break;
 8001d62:	e009      	b.n	8001d78 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_UART_TxCpltCallback+0x58>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_UART_TxCpltCallback+0x58>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4798      	blx	r3
            }
            break;
 8001d72:	e003      	b.n	8001d7c <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8001d74:	bf00      	nop
 8001d76:	e002      	b.n	8001d7e <HAL_UART_TxCpltCallback+0x42>
            break;
 8001d78:	bf00      	nop
 8001d7a:	e000      	b.n	8001d7e <HAL_UART_TxCpltCallback+0x42>
            break;
 8001d7c:	bf00      	nop
    }

    return;
 8001d7e:	bf00      	nop
}
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40008000 	.word	0x40008000
 8001d8c:	40013800 	.word	0x40013800
 8001d90:	2000023c 	.word	0x2000023c
 8001d94:	20000240 	.word	0x20000240

08001d98 <LL_RCC_LSE_SetDriveCapability>:
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da8:	f023 0218 	bic.w	r2, r3, #24
 8001dac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_AHB1_GRP1_EnableClock>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001de8:	68fb      	ldr	r3, [r7, #12]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <LL_AHB2_GRP1_EnableClock>:
{
 8001df6:	b480      	push	{r7}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4013      	ands	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e2c:	f001 ff3a 	bl	8003ca4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001e30:	f7fe fe18 	bl	8000a64 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e34:	f000 f814 	bl	8001e60 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001e38:	f000 f870 	bl	8001f1c <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001e3c:	f000 f88e 	bl	8001f5c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e40:	f000 f95d 	bl	80020fe <MX_GPIO_Init>
  MX_DMA_Init();
 8001e44:	f000 f93e 	bl	80020c4 <MX_DMA_Init>
  MX_RF_Init();
 8001e48:	f000 f8ea 	bl	8002020 <MX_RF_Init>
  MX_RTC_Init();
 8001e4c:	f000 f906 	bl	800205c <MX_RTC_Init>
  MX_RNG_Init();
 8001e50:	f000 f8ee 	bl	8002030 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001e54:	f7fe fe14 	bl	8000a80 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001e58:	f7ff f8a2 	bl	8000fa0 <MX_APPE_Process>
 8001e5c:	e7fc      	b.n	8001e58 <main+0x30>
	...

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b09a      	sub	sp, #104	; 0x68
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0320 	add.w	r3, r7, #32
 8001e6a:	2248      	movs	r2, #72	; 0x48
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f009 faee 	bl	800b450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]
 8001e82:	615a      	str	r2, [r3, #20]
 8001e84:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e86:	f002 fedd 	bl	8004c44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7ff ff84 	bl	8001d98 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e90:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <SystemClock_Config+0xb8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e98:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <SystemClock_Config+0xb8>)
 8001e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <SystemClock_Config+0xb8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001eac:	2347      	movs	r3, #71	; 0x47
 8001eae:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ec4:	2340      	movs	r3, #64	; 0x40
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ecc:	f107 0320 	add.w	r3, r7, #32
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 fa4b 	bl	800536c <HAL_RCC_OscConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001edc:	f000 f91c 	bl	8002118 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001ee0:	236f      	movs	r3, #111	; 0x6f
 8001ee2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001eec:	2300      	movs	r3, #0
 8001eee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	2101      	movs	r1, #1
 8001f00:	4618      	mov	r0, r3
 8001f02:	f003 fdc1 	bl	8005a88 <HAL_RCC_ClockConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001f0c:	f000 f904 	bl	8002118 <Error_Handler>
  }
}
 8001f10:	bf00      	nop
 8001f12:	3768      	adds	r7, #104	; 0x68
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	58000400 	.word	0x58000400

08001f1c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b094      	sub	sp, #80	; 0x50
 8001f20:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f22:	463b      	mov	r3, r7
 8001f24:	2250      	movs	r2, #80	; 0x50
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f009 fa91 	bl	800b450 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001f2e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f32:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001f34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f38:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001f3e:	2310      	movs	r3, #16
 8001f40:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f42:	463b      	mov	r3, r7
 8001f44:	4618      	mov	r0, r3
 8001f46:	f004 f9dc 	bl	8006302 <HAL_RCCEx_PeriphCLKConfig>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001f50:	f000 f8e2 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001f54:	bf00      	nop
 8001f56:	3750      	adds	r7, #80	; 0x50
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <MX_IPCC_Init+0x20>)
 8001f62:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <MX_IPCC_Init+0x24>)
 8001f64:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_IPCC_Init+0x20>)
 8001f68:	f002 fde6 	bl	8004b38 <HAL_IPCC_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001f72:	f000 f8d1 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000244 	.word	0x20000244
 8001f80:	58000c00 	.word	0x58000c00

08001f84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f88:	4b23      	ldr	r3, [pc, #140]	; (8002018 <MX_USART1_UART_Init+0x94>)
 8001f8a:	4a24      	ldr	r2, [pc, #144]	; (800201c <MX_USART1_UART_Init+0x98>)
 8001f8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f8e:	4b22      	ldr	r3, [pc, #136]	; (8002018 <MX_USART1_UART_Init+0x94>)
 8001f90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f96:	4b20      	ldr	r3, [pc, #128]	; (8002018 <MX_USART1_UART_Init+0x94>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <MX_USART1_UART_Init+0x94>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <MX_USART1_UART_Init+0x94>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <MX_USART1_UART_Init+0x94>)
 8001faa:	220c      	movs	r2, #12
 8001fac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fae:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <MX_USART1_UART_Init+0x94>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001fb4:	4b18      	ldr	r3, [pc, #96]	; (8002018 <MX_USART1_UART_Init+0x94>)
 8001fb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fba:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fbc:	4b16      	ldr	r3, [pc, #88]	; (8002018 <MX_USART1_UART_Init+0x94>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <MX_USART1_UART_Init+0x94>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fc8:	4b13      	ldr	r3, [pc, #76]	; (8002018 <MX_USART1_UART_Init+0x94>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fce:	4812      	ldr	r0, [pc, #72]	; (8002018 <MX_USART1_UART_Init+0x94>)
 8001fd0:	f004 fe1e 	bl	8006c10 <HAL_UART_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001fda:	f000 f89d 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fde:	2100      	movs	r1, #0
 8001fe0:	480d      	ldr	r0, [pc, #52]	; (8002018 <MX_USART1_UART_Init+0x94>)
 8001fe2:	f005 ffe6 	bl	8007fb2 <HAL_UARTEx_SetTxFifoThreshold>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001fec:	f000 f894 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4809      	ldr	r0, [pc, #36]	; (8002018 <MX_USART1_UART_Init+0x94>)
 8001ff4:	f006 f81b 	bl	800802e <HAL_UARTEx_SetRxFifoThreshold>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001ffe:	f000 f88b 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002002:	4805      	ldr	r0, [pc, #20]	; (8002018 <MX_USART1_UART_Init+0x94>)
 8002004:	f005 ff9c 	bl	8007f40 <HAL_UARTEx_DisableFifoMode>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800200e:	f000 f883 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000310 	.word	0x20000310
 800201c:	40013800 	.word	0x40013800

08002020 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <MX_RNG_Init+0x24>)
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <MX_RNG_Init+0x28>)
 8002038:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <MX_RNG_Init+0x24>)
 800203c:	2200      	movs	r2, #0
 800203e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002040:	4804      	ldr	r0, [pc, #16]	; (8002054 <MX_RNG_Init+0x24>)
 8002042:	f004 fbe5 	bl	8006810 <HAL_RNG_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800204c:	f000 f864 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000460 	.word	0x20000460
 8002058:	58001000 	.word	0x58001000

0800205c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <MX_RTC_Init+0x60>)
 8002062:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <MX_RTC_Init+0x64>)
 8002064:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <MX_RTC_Init+0x60>)
 8002068:	2200      	movs	r2, #0
 800206a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <MX_RTC_Init+0x60>)
 800206e:	220f      	movs	r2, #15
 8002070:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <MX_RTC_Init+0x60>)
 8002074:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002078:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <MX_RTC_Init+0x60>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <MX_RTC_Init+0x60>)
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <MX_RTC_Init+0x60>)
 8002088:	2200      	movs	r2, #0
 800208a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <MX_RTC_Init+0x60>)
 800208e:	2200      	movs	r2, #0
 8002090:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002092:	480a      	ldr	r0, [pc, #40]	; (80020bc <MX_RTC_Init+0x60>)
 8002094:	f004 fbf1 	bl	800687a <HAL_RTC_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800209e:	f000 f83b 	bl	8002118 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	4805      	ldr	r0, [pc, #20]	; (80020bc <MX_RTC_Init+0x60>)
 80020a8:	f004 fcd6 	bl	8006a58 <HAL_RTCEx_SetWakeUpTimer_IT>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80020b2:	f000 f831 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000474 	.word	0x20000474
 80020c0:	40002800 	.word	0x40002800

080020c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80020c8:	2004      	movs	r0, #4
 80020ca:	f7ff fe7b 	bl	8001dc4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020ce:	2001      	movs	r0, #1
 80020d0:	f7ff fe78 	bl	8001dc4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020d4:	2002      	movs	r0, #2
 80020d6:	f7ff fe75 	bl	8001dc4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	210f      	movs	r1, #15
 80020de:	200e      	movs	r0, #14
 80020e0:	f001 ffad 	bl	800403e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80020e4:	200e      	movs	r0, #14
 80020e6:	f001 ffc4 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	210f      	movs	r1, #15
 80020ee:	203a      	movs	r0, #58	; 0x3a
 80020f0:	f001 ffa5 	bl	800403e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80020f4:	203a      	movs	r0, #58	; 0x3a
 80020f6:	f001 ffbc 	bl	8004072 <HAL_NVIC_EnableIRQ>

}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}

080020fe <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002102:	2004      	movs	r0, #4
 8002104:	f7ff fe77 	bl	8001df6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002108:	2001      	movs	r0, #1
 800210a:	f7ff fe74 	bl	8001df6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	2002      	movs	r0, #2
 8002110:	f7ff fe71 	bl	8001df6 <LL_AHB2_GRP1_EnableClock>

}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}

08002118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_RCC_EnableRTC>:
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800212a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800213a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_AHB2_GRP1_EnableClock>:
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002154:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4313      	orrs	r3, r2
 800215e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002164:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4013      	ands	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800216c:	68fb      	ldr	r3, [r7, #12]
}
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <LL_AHB3_GRP1_EnableClock>:
{
 800217a:	b480      	push	{r7}
 800217c:	b085      	sub	sp, #20
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002186:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002188:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4313      	orrs	r3, r2
 8002190:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002196:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4013      	ands	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800219e:	68fb      	ldr	r3, [r7, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_APB1_GRP1_EnableClock>:
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80021b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80021c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4013      	ands	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021d0:	68fb      	ldr	r3, [r7, #12]
}
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_APB1_GRP2_EnableClock>:
{
 80021de:	b480      	push	{r7}
 80021e0:	b085      	sub	sp, #20
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80021e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80021f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4013      	ands	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002202:	68fb      	ldr	r3, [r7, #12]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_APB2_GRP1_EnableClock>:
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800221e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4313      	orrs	r3, r2
 8002226:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002234:	68fb      	ldr	r3, [r7, #12]
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002246:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800224a:	f7ff ff96 	bl	800217a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	202e      	movs	r0, #46	; 0x2e
 8002254:	f001 fef3 	bl	800403e <HAL_NVIC_SetPriority>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002258:	202e      	movs	r0, #46	; 0x2e
 800225a:	f001 ff0a 	bl	8004072 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <HAL_IPCC_MspInit+0x44>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d113      	bne.n	800229e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002276:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800227a:	f7ff ff7e 	bl	800217a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	202c      	movs	r0, #44	; 0x2c
 8002284:	f001 fedb 	bl	800403e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002288:	202c      	movs	r0, #44	; 0x2c
 800228a:	f001 fef2 	bl	8004072 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	202d      	movs	r0, #45	; 0x2d
 8002294:	f001 fed3 	bl	800403e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002298:	202d      	movs	r0, #45	; 0x2d
 800229a:	f001 feea 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	58000c00 	.word	0x58000c00

080022ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b0a0      	sub	sp, #128	; 0x80
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	2250      	movs	r2, #80	; 0x50
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f009 f8bf 	bl	800b450 <memset>
  if(huart->Instance==LPUART1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a68      	ldr	r2, [pc, #416]	; (8002478 <HAL_UART_MspInit+0x1cc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d16e      	bne.n	80023ba <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80022dc:	2302      	movs	r3, #2
 80022de:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	4618      	mov	r0, r3
 80022ea:	f004 f80a 	bl	8006302 <HAL_RCCEx_PeriphCLKConfig>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022f4:	f7ff ff10 	bl	8002118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80022f8:	2001      	movs	r0, #1
 80022fa:	f7ff ff70 	bl	80021de <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fe:	2001      	movs	r0, #1
 8002300:	f7ff ff22 	bl	8002148 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002304:	230c      	movs	r3, #12
 8002306:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002314:	2308      	movs	r3, #8
 8002316:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002318:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800231c:	4619      	mov	r1, r3
 800231e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002322:	f002 fa5d 	bl	80047e0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8002326:	4b55      	ldr	r3, [pc, #340]	; (800247c <HAL_UART_MspInit+0x1d0>)
 8002328:	4a55      	ldr	r2, [pc, #340]	; (8002480 <HAL_UART_MspInit+0x1d4>)
 800232a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800232c:	4b53      	ldr	r3, [pc, #332]	; (800247c <HAL_UART_MspInit+0x1d0>)
 800232e:	2211      	movs	r2, #17
 8002330:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002332:	4b52      	ldr	r3, [pc, #328]	; (800247c <HAL_UART_MspInit+0x1d0>)
 8002334:	2210      	movs	r2, #16
 8002336:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002338:	4b50      	ldr	r3, [pc, #320]	; (800247c <HAL_UART_MspInit+0x1d0>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800233e:	4b4f      	ldr	r3, [pc, #316]	; (800247c <HAL_UART_MspInit+0x1d0>)
 8002340:	2280      	movs	r2, #128	; 0x80
 8002342:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002344:	4b4d      	ldr	r3, [pc, #308]	; (800247c <HAL_UART_MspInit+0x1d0>)
 8002346:	2200      	movs	r2, #0
 8002348:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800234a:	4b4c      	ldr	r3, [pc, #304]	; (800247c <HAL_UART_MspInit+0x1d0>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002350:	4b4a      	ldr	r3, [pc, #296]	; (800247c <HAL_UART_MspInit+0x1d0>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002356:	4b49      	ldr	r3, [pc, #292]	; (800247c <HAL_UART_MspInit+0x1d0>)
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800235c:	4847      	ldr	r0, [pc, #284]	; (800247c <HAL_UART_MspInit+0x1d0>)
 800235e:	f001 fecd 	bl	80040fc <HAL_DMA_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002368:	f7ff fed6 	bl	8002118 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 800236c:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8002370:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002372:	2300      	movs	r3, #0
 8002374:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 8002382:	2301      	movs	r3, #1
 8002384:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002386:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800238a:	4619      	mov	r1, r3
 800238c:	483b      	ldr	r0, [pc, #236]	; (800247c <HAL_UART_MspInit+0x1d0>)
 800238e:	f002 f9e7 	bl	8004760 <HAL_DMAEx_ConfigMuxSync>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8002398:	f7ff febe 	bl	8002118 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a37      	ldr	r2, [pc, #220]	; (800247c <HAL_UART_MspInit+0x1d0>)
 80023a0:	679a      	str	r2, [r3, #120]	; 0x78
 80023a2:	4a36      	ldr	r2, [pc, #216]	; (800247c <HAL_UART_MspInit+0x1d0>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2100      	movs	r1, #0
 80023ac:	2025      	movs	r0, #37	; 0x25
 80023ae:	f001 fe46 	bl	800403e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80023b2:	2025      	movs	r0, #37	; 0x25
 80023b4:	f001 fe5d 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023b8:	e05a      	b.n	8002470 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a31      	ldr	r2, [pc, #196]	; (8002484 <HAL_UART_MspInit+0x1d8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d155      	bne.n	8002470 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023c8:	2300      	movs	r3, #0
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 ff96 	bl	8006302 <HAL_RCCEx_PeriphCLKConfig>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_UART_MspInit+0x134>
      Error_Handler();
 80023dc:	f7ff fe9c 	bl	8002118 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80023e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023e4:	f7ff ff14 	bl	8002210 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e8:	2002      	movs	r0, #2
 80023ea:	f7ff fead 	bl	8002148 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023ee:	23c0      	movs	r3, #192	; 0xc0
 80023f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023f6:	2301      	movs	r3, #1
 80023f8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fa:	2303      	movs	r3, #3
 80023fc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023fe:	2307      	movs	r3, #7
 8002400:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002402:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002406:	4619      	mov	r1, r3
 8002408:	481f      	ldr	r0, [pc, #124]	; (8002488 <HAL_UART_MspInit+0x1dc>)
 800240a:	f002 f9e9 	bl	80047e0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 800240e:	4b1f      	ldr	r3, [pc, #124]	; (800248c <HAL_UART_MspInit+0x1e0>)
 8002410:	4a1f      	ldr	r2, [pc, #124]	; (8002490 <HAL_UART_MspInit+0x1e4>)
 8002412:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002414:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_UART_MspInit+0x1e0>)
 8002416:	220f      	movs	r2, #15
 8002418:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <HAL_UART_MspInit+0x1e0>)
 800241c:	2210      	movs	r2, #16
 800241e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002420:	4b1a      	ldr	r3, [pc, #104]	; (800248c <HAL_UART_MspInit+0x1e0>)
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002426:	4b19      	ldr	r3, [pc, #100]	; (800248c <HAL_UART_MspInit+0x1e0>)
 8002428:	2280      	movs	r2, #128	; 0x80
 800242a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800242c:	4b17      	ldr	r3, [pc, #92]	; (800248c <HAL_UART_MspInit+0x1e0>)
 800242e:	2200      	movs	r2, #0
 8002430:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <HAL_UART_MspInit+0x1e0>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_UART_MspInit+0x1e0>)
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_UART_MspInit+0x1e0>)
 8002440:	2200      	movs	r2, #0
 8002442:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002444:	4811      	ldr	r0, [pc, #68]	; (800248c <HAL_UART_MspInit+0x1e0>)
 8002446:	f001 fe59 	bl	80040fc <HAL_DMA_Init>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002450:	f7ff fe62 	bl	8002118 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a0d      	ldr	r2, [pc, #52]	; (800248c <HAL_UART_MspInit+0x1e0>)
 8002458:	679a      	str	r2, [r3, #120]	; 0x78
 800245a:	4a0c      	ldr	r2, [pc, #48]	; (800248c <HAL_UART_MspInit+0x1e0>)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002460:	2200      	movs	r2, #0
 8002462:	2100      	movs	r1, #0
 8002464:	2024      	movs	r0, #36	; 0x24
 8002466:	f001 fdea 	bl	800403e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800246a:	2024      	movs	r0, #36	; 0x24
 800246c:	f001 fe01 	bl	8004072 <HAL_NVIC_EnableIRQ>
}
 8002470:	bf00      	nop
 8002472:	3780      	adds	r7, #128	; 0x80
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40008000 	.word	0x40008000
 800247c:	200003a0 	.word	0x200003a0
 8002480:	40020044 	.word	0x40020044
 8002484:	40013800 	.word	0x40013800
 8002488:	48000400 	.word	0x48000400
 800248c:	20000400 	.word	0x20000400
 8002490:	40020444 	.word	0x40020444

08002494 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b096      	sub	sp, #88	; 0x58
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800249c:	f107 0308 	add.w	r3, r7, #8
 80024a0:	2250      	movs	r2, #80	; 0x50
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f008 ffd3 	bl	800b450 <memset>
  if(hrng->Instance==RNG)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a0d      	ldr	r2, [pc, #52]	; (80024e4 <HAL_RNG_MspInit+0x50>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d113      	bne.n	80024dc <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80024b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024b8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80024ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80024be:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024c0:	f107 0308 	add.w	r3, r7, #8
 80024c4:	4618      	mov	r0, r3
 80024c6:	f003 ff1c 	bl	8006302 <HAL_RCCEx_PeriphCLKConfig>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80024d0:	f7ff fe22 	bl	8002118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80024d4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80024d8:	f7ff fe4f 	bl	800217a <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80024dc:	bf00      	nop
 80024de:	3758      	adds	r7, #88	; 0x58
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	58001000 	.word	0x58001000

080024e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b096      	sub	sp, #88	; 0x58
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024f0:	f107 0308 	add.w	r3, r7, #8
 80024f4:	2250      	movs	r2, #80	; 0x50
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f008 ffa9 	bl	800b450 <memset>
  if(hrtc->Instance==RTC)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a12      	ldr	r2, [pc, #72]	; (800254c <HAL_RTC_MspInit+0x64>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d11d      	bne.n	8002544 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002508:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800250c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800250e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002512:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002514:	f107 0308 	add.w	r3, r7, #8
 8002518:	4618      	mov	r0, r3
 800251a:	f003 fef2 	bl	8006302 <HAL_RCCEx_PeriphCLKConfig>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002524:	f7ff fdf8 	bl	8002118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002528:	f7ff fdfd 	bl	8002126 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800252c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002530:	f7ff fe3c 	bl	80021ac <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002534:	2200      	movs	r2, #0
 8002536:	2100      	movs	r1, #0
 8002538:	2003      	movs	r0, #3
 800253a:	f001 fd80 	bl	800403e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800253e:	2003      	movs	r0, #3
 8002540:	f001 fd97 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002544:	bf00      	nop
 8002546:	3758      	adds	r7, #88	; 0x58
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40002800 	.word	0x40002800

08002550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002562:	e7fe      	b.n	8002562 <HardFault_Handler+0x4>

08002564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002568:	e7fe      	b.n	8002568 <MemManage_Handler+0x4>

0800256a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800256e:	e7fe      	b.n	800256e <BusFault_Handler+0x4>

08002570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002574:	e7fe      	b.n	8002574 <UsageFault_Handler+0x4>

08002576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a4:	f001 fbd8 	bl	8003d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}

080025ac <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80025b0:	f7ff f88a 	bl	80016c8 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80025bc:	4802      	ldr	r0, [pc, #8]	; (80025c8 <DMA1_Channel4_IRQHandler+0x10>)
 80025be:	f001 ff7e 	bl	80044be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200003a0 	.word	0x200003a0

080025cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <USART1_IRQHandler+0x10>)
 80025d2:	f004 fbff 	bl	8006dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000310 	.word	0x20000310

080025e0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <LPUART1_IRQHandler+0x10>)
 80025e6:	f004 fbf5 	bl	8006dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000280 	.word	0x20000280

080025f4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80025f8:	f001 f962 	bl	80038c0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}

08002600 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002604:	f001 f994 	bl	8003930 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}

0800260c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002610:	f002 fa6e 	bl	8004af0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}

08002618 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <DMA2_Channel4_IRQHandler+0x10>)
 800261e:	f001 ff4e 	bl	80044be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000400 	.word	0x20000400

0800262c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	e00a      	b.n	8002654 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800263e:	f3af 8000 	nop.w
 8002642:	4601      	mov	r1, r0
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	60ba      	str	r2, [r7, #8]
 800264a:	b2ca      	uxtb	r2, r1
 800264c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	3301      	adds	r3, #1
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	429a      	cmp	r2, r3
 800265a:	dbf0      	blt.n	800263e <_read+0x12>
	}

return len;
 800265c:	687b      	ldr	r3, [r7, #4]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
	return -1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800268e:	605a      	str	r2, [r3, #4]
	return 0;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <_isatty>:

int _isatty(int file)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
	return 1;
 80026a6:	2301      	movs	r3, #1
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
	return 0;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d8:	4a14      	ldr	r2, [pc, #80]	; (800272c <_sbrk+0x5c>)
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <_sbrk+0x60>)
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e4:	4b13      	ldr	r3, [pc, #76]	; (8002734 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d102      	bne.n	80026f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <_sbrk+0x64>)
 80026ee:	4a12      	ldr	r2, [pc, #72]	; (8002738 <_sbrk+0x68>)
 80026f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <_sbrk+0x64>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d207      	bcs.n	8002710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002700:	f008 fe6e 	bl	800b3e0 <__errno>
 8002704:	4603      	mov	r3, r0
 8002706:	220c      	movs	r2, #12
 8002708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800270a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800270e:	e009      	b.n	8002724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <_sbrk+0x64>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <_sbrk+0x64>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	4a05      	ldr	r2, [pc, #20]	; (8002734 <_sbrk+0x64>)
 8002720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002722:	68fb      	ldr	r3, [r7, #12]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20030000 	.word	0x20030000
 8002730:	00001000 	.word	0x00001000
 8002734:	20000498 	.word	0x20000498
 8002738:	200017e8 	.word	0x200017e8

0800273c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <LL_FLASH_GetUDN+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	1fff7580 	.word	0x1fff7580

08002754 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <LL_FLASH_GetDeviceID+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	b2db      	uxtb	r3, r3
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	1fff7584 	.word	0x1fff7584

0800276c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <LL_FLASH_GetSTCompanyID+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	0a1b      	lsrs	r3, r3, #8
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	1fff7584 	.word	0x1fff7584

08002784 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8002784:	b5b0      	push	{r4, r5, r7, lr}
 8002786:	b08e      	sub	sp, #56	; 0x38
 8002788:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800278a:	4b21      	ldr	r3, [pc, #132]	; (8002810 <APP_BLE_Init+0x8c>)
 800278c:	1d3c      	adds	r4, r7, #4
 800278e:	461d      	mov	r5, r3
 8002790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800279a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800279c:	682b      	ldr	r3, [r5, #0]
 800279e:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 80027a0:	f000 f978 	bl	8002a94 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80027a4:	2101      	movs	r1, #1
 80027a6:	2002      	movs	r0, #2
 80027a8:	f008 fbbc 	bl	800af24 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80027ac:	4a19      	ldr	r2, [pc, #100]	; (8002814 <APP_BLE_Init+0x90>)
 80027ae:	2100      	movs	r1, #0
 80027b0:	2002      	movs	r0, #2
 80027b2:	f008 fcd1 	bl	800b158 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	4618      	mov	r0, r3
 80027ba:	f007 f957 	bl	8009a6c <SHCI_C2_BLE_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 80027c4:	f7ff fca8 	bl	8002118 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80027c8:	f000 f97a 	bl	8002ac0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80027cc:	f008 f8aa 	bl	800a924 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <APP_BLE_Init+0x94>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <APP_BLE_Init+0x94>)
 80027da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027de:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80027e0:	4a0e      	ldr	r2, [pc, #56]	; (800281c <APP_BLE_Init+0x98>)
 80027e2:	2100      	movs	r1, #0
 80027e4:	2001      	movs	r0, #1
 80027e6:	f008 fcb7 	bl	800b158 <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 80027ea:	2006      	movs	r0, #6
 80027ec:	f006 fd8d 	bl	800930a <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80027f0:	f000 fc50 	bl	8003094 <Custom_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80027f4:	4b08      	ldr	r3, [pc, #32]	; (8002818 <APP_BLE_Init+0x94>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80027fa:	4b07      	ldr	r3, [pc, #28]	; (8002818 <APP_BLE_Init+0x94>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8002800:	2001      	movs	r0, #1
 8002802:	f000 f9f7 	bl	8002bf4 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8002806:	bf00      	nop
}
 8002808:	3738      	adds	r7, #56	; 0x38
 800280a:	46bd      	mov	sp, r7
 800280c:	bdb0      	pop	{r4, r5, r7, pc}
 800280e:	bf00      	nop
 8002810:	0800c7e8 	.word	0x0800c7e8
 8002814:	080096e9 	.word	0x080096e9
 8002818:	20000130 	.word	0x20000130
 800281c:	08002d31 	.word	0x08002d31

08002820 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	; 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3301      	adds	r3, #1
 800282c:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2bff      	cmp	r3, #255	; 0xff
 8002834:	f000 8082 	beq.w	800293c <SVCCTL_App_Notification+0x11c>
 8002838:	2bff      	cmp	r3, #255	; 0xff
 800283a:	f300 8108 	bgt.w	8002a4e <SVCCTL_App_Notification+0x22e>
 800283e:	2b05      	cmp	r3, #5
 8002840:	d002      	beq.n	8002848 <SVCCTL_App_Notification+0x28>
 8002842:	2b3e      	cmp	r3, #62	; 0x3e
 8002844:	d02d      	beq.n	80028a2 <SVCCTL_App_Notification+0x82>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8002846:	e102      	b.n	8002a4e <SVCCTL_App_Notification+0x22e>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	3302      	adds	r3, #2
 800284c:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002854:	b29a      	uxth	r2, r3
 8002856:	4b82      	ldr	r3, [pc, #520]	; (8002a60 <SVCCTL_App_Notification+0x240>)
 8002858:	8adb      	ldrh	r3, [r3, #22]
 800285a:	429a      	cmp	r2, r3
 800285c:	d113      	bne.n	8002886 <SVCCTL_App_Notification+0x66>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800285e:	4b80      	ldr	r3, [pc, #512]	; (8002a60 <SVCCTL_App_Notification+0x240>)
 8002860:	2200      	movs	r2, #0
 8002862:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002864:	4b7e      	ldr	r3, [pc, #504]	; (8002a60 <SVCCTL_App_Notification+0x240>)
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 800286c:	487d      	ldr	r0, [pc, #500]	; (8002a64 <SVCCTL_App_Notification+0x244>)
 800286e:	f006 fe41 	bl	80094f4 <DbgTraceGetFileName>
 8002872:	4601      	mov	r1, r0
 8002874:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8002878:	4a7b      	ldr	r2, [pc, #492]	; (8002a68 <SVCCTL_App_Notification+0x248>)
 800287a:	487c      	ldr	r0, [pc, #496]	; (8002a6c <SVCCTL_App_Notification+0x24c>)
 800287c:	f008 fdf0 	bl	800b460 <iprintf>
 8002880:	487b      	ldr	r0, [pc, #492]	; (8002a70 <SVCCTL_App_Notification+0x250>)
 8002882:	f008 fe73 	bl	800b56c <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 8002886:	2001      	movs	r0, #1
 8002888:	f000 f9b4 	bl	8002bf4 <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800288c:	4b79      	ldr	r3, [pc, #484]	; (8002a74 <SVCCTL_App_Notification+0x254>)
 800288e:	2201      	movs	r2, #1
 8002890:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002892:	4b73      	ldr	r3, [pc, #460]	; (8002a60 <SVCCTL_App_Notification+0x240>)
 8002894:	8ada      	ldrh	r2, [r3, #22]
 8002896:	4b77      	ldr	r3, [pc, #476]	; (8002a74 <SVCCTL_App_Notification+0x254>)
 8002898:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 800289a:	4876      	ldr	r0, [pc, #472]	; (8002a74 <SVCCTL_App_Notification+0x254>)
 800289c:	f000 fbe6 	bl	800306c <Custom_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80028a0:	e0d8      	b.n	8002a54 <SVCCTL_App_Notification+0x234>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	3302      	adds	r3, #2
 80028a6:	613b      	str	r3, [r7, #16]
      switch (meta_evt->subevent)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d00f      	beq.n	80028d0 <SVCCTL_App_Notification+0xb0>
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d141      	bne.n	8002938 <SVCCTL_App_Notification+0x118>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 80028b4:	486b      	ldr	r0, [pc, #428]	; (8002a64 <SVCCTL_App_Notification+0x244>)
 80028b6:	f006 fe1d 	bl	80094f4 <DbgTraceGetFileName>
 80028ba:	4601      	mov	r1, r0
 80028bc:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 80028c0:	4a69      	ldr	r2, [pc, #420]	; (8002a68 <SVCCTL_App_Notification+0x248>)
 80028c2:	486a      	ldr	r0, [pc, #424]	; (8002a6c <SVCCTL_App_Notification+0x24c>)
 80028c4:	f008 fdcc 	bl	800b460 <iprintf>
 80028c8:	486b      	ldr	r0, [pc, #428]	; (8002a78 <SVCCTL_App_Notification+0x258>)
 80028ca:	f008 fe4f 	bl	800b56c <puts>
          break;
 80028ce:	e034      	b.n	800293a <SVCCTL_App_Notification+0x11a>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	3301      	adds	r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG("HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 80028d6:	4863      	ldr	r0, [pc, #396]	; (8002a64 <SVCCTL_App_Notification+0x244>)
 80028d8:	f006 fe0c 	bl	80094f4 <DbgTraceGetFileName>
 80028dc:	4601      	mov	r1, r0
 80028de:	f240 13b7 	movw	r3, #439	; 0x1b7
 80028e2:	4a61      	ldr	r2, [pc, #388]	; (8002a68 <SVCCTL_App_Notification+0x248>)
 80028e4:	4861      	ldr	r0, [pc, #388]	; (8002a6c <SVCCTL_App_Notification+0x24c>)
 80028e6:	f008 fdbb 	bl	800b460 <iprintf>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	4619      	mov	r1, r3
 80028f4:	4861      	ldr	r0, [pc, #388]	; (8002a7c <SVCCTL_App_Notification+0x25c>)
 80028f6:	f008 fdb3 	bl	800b460 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80028fa:	4b59      	ldr	r3, [pc, #356]	; (8002a60 <SVCCTL_App_Notification+0x240>)
 80028fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002900:	2b04      	cmp	r3, #4
 8002902:	d104      	bne.n	800290e <SVCCTL_App_Notification+0xee>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8002904:	4b56      	ldr	r3, [pc, #344]	; (8002a60 <SVCCTL_App_Notification+0x240>)
 8002906:	2206      	movs	r2, #6
 8002908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800290c:	e003      	b.n	8002916 <SVCCTL_App_Notification+0xf6>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800290e:	4b54      	ldr	r3, [pc, #336]	; (8002a60 <SVCCTL_App_Notification+0x240>)
 8002910:	2205      	movs	r2, #5
 8002912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800291c:	b29a      	uxth	r2, r3
 800291e:	4b50      	ldr	r3, [pc, #320]	; (8002a60 <SVCCTL_App_Notification+0x240>)
 8002920:	82da      	strh	r2, [r3, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8002922:	4b54      	ldr	r3, [pc, #336]	; (8002a74 <SVCCTL_App_Notification+0x254>)
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002928:	4b4d      	ldr	r3, [pc, #308]	; (8002a60 <SVCCTL_App_Notification+0x240>)
 800292a:	8ada      	ldrh	r2, [r3, #22]
 800292c:	4b51      	ldr	r3, [pc, #324]	; (8002a74 <SVCCTL_App_Notification+0x254>)
 800292e:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 8002930:	4850      	ldr	r0, [pc, #320]	; (8002a74 <SVCCTL_App_Notification+0x254>)
 8002932:	f000 fb9b 	bl	800306c <Custom_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002936:	e000      	b.n	800293a <SVCCTL_App_Notification+0x11a>
          break;
 8002938:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 800293a:	e08b      	b.n	8002a54 <SVCCTL_App_Notification+0x234>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	3302      	adds	r3, #2
 8002940:	623b      	str	r3, [r7, #32]
      switch (blecore_evt->ecode)
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800294c:	d07b      	beq.n	8002a46 <SVCCTL_App_Notification+0x226>
 800294e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002952:	dc7e      	bgt.n	8002a52 <SVCCTL_App_Notification+0x232>
 8002954:	2b04      	cmp	r3, #4
 8002956:	d078      	beq.n	8002a4a <SVCCTL_App_Notification+0x22a>
 8002958:	2b04      	cmp	r3, #4
 800295a:	db7a      	blt.n	8002a52 <SVCCTL_App_Notification+0x232>
 800295c:	f240 420a 	movw	r2, #1034	; 0x40a
 8002960:	4293      	cmp	r3, r2
 8002962:	dc76      	bgt.n	8002a52 <SVCCTL_App_Notification+0x232>
 8002964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002968:	dd73      	ble.n	8002a52 <SVCCTL_App_Notification+0x232>
 800296a:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800296e:	2b09      	cmp	r3, #9
 8002970:	d86f      	bhi.n	8002a52 <SVCCTL_App_Notification+0x232>
 8002972:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <SVCCTL_App_Notification+0x158>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	08002a1f 	.word	0x08002a1f
 800297c:	080029d9 	.word	0x080029d9
 8002980:	08002a53 	.word	0x08002a53
 8002984:	08002a53 	.word	0x08002a53
 8002988:	08002a53 	.word	0x08002a53
 800298c:	08002a53 	.word	0x08002a53
 8002990:	080029a1 	.word	0x080029a1
 8002994:	08002a53 	.word	0x08002a53
 8002998:	080029e7 	.word	0x080029e7
 800299c:	080029bd 	.word	0x080029bd
        APP_DBG_MSG("\r\n\r** ACI_GAP_PROC_COMPLETE_VSEVT_CODE \n");
 80029a0:	4830      	ldr	r0, [pc, #192]	; (8002a64 <SVCCTL_App_Notification+0x244>)
 80029a2:	f006 fda7 	bl	80094f4 <DbgTraceGetFileName>
 80029a6:	4601      	mov	r1, r0
 80029a8:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 80029ac:	4a2e      	ldr	r2, [pc, #184]	; (8002a68 <SVCCTL_App_Notification+0x248>)
 80029ae:	482f      	ldr	r0, [pc, #188]	; (8002a6c <SVCCTL_App_Notification+0x24c>)
 80029b0:	f008 fd56 	bl	800b460 <iprintf>
 80029b4:	4832      	ldr	r0, [pc, #200]	; (8002a80 <SVCCTL_App_Notification+0x260>)
 80029b6:	f008 fdd9 	bl	800b56c <puts>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80029ba:	e047      	b.n	8002a4c <SVCCTL_App_Notification+0x22c>
         APP_DBG_MSG("\r\n\r** ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE \n");
 80029bc:	4829      	ldr	r0, [pc, #164]	; (8002a64 <SVCCTL_App_Notification+0x244>)
 80029be:	f006 fd99 	bl	80094f4 <DbgTraceGetFileName>
 80029c2:	4601      	mov	r1, r0
 80029c4:	f240 2301 	movw	r3, #513	; 0x201
 80029c8:	4a27      	ldr	r2, [pc, #156]	; (8002a68 <SVCCTL_App_Notification+0x248>)
 80029ca:	4828      	ldr	r0, [pc, #160]	; (8002a6c <SVCCTL_App_Notification+0x24c>)
 80029cc:	f008 fd48 	bl	800b460 <iprintf>
 80029d0:	482c      	ldr	r0, [pc, #176]	; (8002a84 <SVCCTL_App_Notification+0x264>)
 80029d2:	f008 fdcb 	bl	800b56c <puts>
        break;
 80029d6:	e039      	b.n	8002a4c <SVCCTL_App_Notification+0x22c>
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80029d8:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <SVCCTL_App_Notification+0x240>)
 80029da:	8adb      	ldrh	r3, [r3, #22]
 80029dc:	492a      	ldr	r1, [pc, #168]	; (8002a88 <SVCCTL_App_Notification+0x268>)
 80029de:	4618      	mov	r0, r3
 80029e0:	f005 fde8 	bl	80085b4 <aci_gap_pass_key_resp>
        break;
 80029e4:	e032      	b.n	8002a4c <SVCCTL_App_Notification+0x22c>
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blecore_evt->data;
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	3302      	adds	r3, #2
 80029ea:	61fb      	str	r3, [r7, #28]
            numeric_value = evt_numeric_value->Numeric_Value;
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80029f2:	61bb      	str	r3, [r7, #24]
            APP_DBG_MSG("numeric_value = %ld\n", numeric_value);
 80029f4:	481b      	ldr	r0, [pc, #108]	; (8002a64 <SVCCTL_App_Notification+0x244>)
 80029f6:	f006 fd7d 	bl	80094f4 <DbgTraceGetFileName>
 80029fa:	4601      	mov	r1, r0
 80029fc:	f240 230b 	movw	r3, #523	; 0x20b
 8002a00:	4a19      	ldr	r2, [pc, #100]	; (8002a68 <SVCCTL_App_Notification+0x248>)
 8002a02:	481a      	ldr	r0, [pc, #104]	; (8002a6c <SVCCTL_App_Notification+0x24c>)
 8002a04:	f008 fd2c 	bl	800b460 <iprintf>
 8002a08:	69b9      	ldr	r1, [r7, #24]
 8002a0a:	4820      	ldr	r0, [pc, #128]	; (8002a8c <SVCCTL_App_Notification+0x26c>)
 8002a0c:	f008 fd28 	bl	800b460 <iprintf>
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8002a10:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <SVCCTL_App_Notification+0x240>)
 8002a12:	8adb      	ldrh	r3, [r3, #22]
 8002a14:	2101      	movs	r1, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f005 ff76 	bl	8008908 <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 8002a1c:	e016      	b.n	8002a4c <SVCCTL_App_Notification+0x22c>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	3302      	adds	r3, #2
 8002a22:	617b      	str	r3, [r7, #20]
            APP_DBG_MSG("BLE_CTRL_App_Notification: ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE, pairing_complete->Status = %d\n",pairing_complete->Status);
 8002a24:	480f      	ldr	r0, [pc, #60]	; (8002a64 <SVCCTL_App_Notification+0x244>)
 8002a26:	f006 fd65 	bl	80094f4 <DbgTraceGetFileName>
 8002a2a:	4601      	mov	r1, r0
 8002a2c:	f240 2311 	movw	r3, #529	; 0x211
 8002a30:	4a0d      	ldr	r2, [pc, #52]	; (8002a68 <SVCCTL_App_Notification+0x248>)
 8002a32:	480e      	ldr	r0, [pc, #56]	; (8002a6c <SVCCTL_App_Notification+0x24c>)
 8002a34:	f008 fd14 	bl	800b460 <iprintf>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	789b      	ldrb	r3, [r3, #2]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4814      	ldr	r0, [pc, #80]	; (8002a90 <SVCCTL_App_Notification+0x270>)
 8002a40:	f008 fd0e 	bl	800b460 <iprintf>
        break;
 8002a44:	e002      	b.n	8002a4c <SVCCTL_App_Notification+0x22c>
      break;
 8002a46:	bf00      	nop
 8002a48:	e003      	b.n	8002a52 <SVCCTL_App_Notification+0x232>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8002a4a:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002a4c:	e001      	b.n	8002a52 <SVCCTL_App_Notification+0x232>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e000      	b.n	8002a54 <SVCCTL_App_Notification+0x234>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002a52:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8002a54:	2301      	movs	r3, #1
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3728      	adds	r7, #40	; 0x28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000130 	.word	0x20000130
 8002a64:	0800c81c 	.word	0x0800c81c
 8002a68:	0800cf0c 	.word	0x0800cf0c
 8002a6c:	0800c86c 	.word	0x0800c86c
 8002a70:	0800c880 	.word	0x0800c880
 8002a74:	200004a4 	.word	0x200004a4
 8002a78:	0800c8a8 	.word	0x0800c8a8
 8002a7c:	0800c8d4 	.word	0x0800c8d4
 8002a80:	0800c918 	.word	0x0800c918
 8002a84:	0800c940 	.word	0x0800c940
 8002a88:	0001b207 	.word	0x0001b207
 8002a8c:	0800c970 	.word	0x0800c970
 8002a90:	0800c988 	.word	0x0800c988

08002a94 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <Ble_Tl_Init+0x20>)
 8002a9c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <Ble_Tl_Init+0x24>)
 8002aa0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8002aa2:	463b      	mov	r3, r7
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4805      	ldr	r0, [pc, #20]	; (8002abc <Ble_Tl_Init+0x28>)
 8002aa8:	f006 fe02 	bl	80096b0 <hci_init>

  return;
 8002aac:	bf00      	nop
}
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20030028 	.word	0x20030028
 8002ab8:	08002e4d 	.word	0x08002e4d
 8002abc:	08002e15 	.word	0x08002e15

08002ac0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8002ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac2:	b08d      	sub	sp, #52	; 0x34
 8002ac4:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8002aca:	f006 fc72 	bl	80093b2 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8002ace:	f000 f8eb 	bl	8002ca8 <BleGetBdAddress>
 8002ad2:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	2106      	movs	r1, #6
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f006 fb2a 	bl	8009132 <aci_hal_write_config_data>
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8002ade:	4a40      	ldr	r2, [pc, #256]	; (8002be0 <Ble_Hci_Gap_Gatt_Init+0x120>)
 8002ae0:	2110      	movs	r1, #16
 8002ae2:	2018      	movs	r0, #24
 8002ae4:	f006 fb25 	bl	8009132 <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8002ae8:	4a3e      	ldr	r2, [pc, #248]	; (8002be4 <Ble_Hci_Gap_Gatt_Init+0x124>)
 8002aea:	2110      	movs	r1, #16
 8002aec:	2008      	movs	r0, #8
 8002aee:	f006 fb20 	bl	8009132 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8002af2:	2119      	movs	r1, #25
 8002af4:	2001      	movs	r0, #1
 8002af6:	f006 fba1 	bl	800923c <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8002afa:	f005 ff6c 	bl	80089d6 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8002b02:	7cfb      	ldrb	r3, [r7, #19]
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8002b0a:	7cfb      	ldrb	r3, [r7, #19]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01d      	beq.n	8002b4c <Ble_Hci_Gap_Gatt_Init+0x8c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8002b10:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <Ble_Hci_Gap_Gatt_Init+0x128>)
 8002b12:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 8002b14:	f107 020a 	add.w	r2, r7, #10
 8002b18:	7cf8      	ldrb	r0, [r7, #19]
 8002b1a:	1dbb      	adds	r3, r7, #6
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	f107 0308 	add.w	r3, r7, #8
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	4613      	mov	r3, r2
 8002b26:	2209      	movs	r2, #9
 8002b28:	2100      	movs	r1, #0
 8002b2a:	f005 fdaa 	bl	8008682 <aci_gap_init>
                 CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8002b2e:	897c      	ldrh	r4, [r7, #10]
 8002b30:	893d      	ldrh	r5, [r7, #8]
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f7fd fb24 	bl	8000180 <strlen>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	2200      	movs	r2, #0
 8002b44:	4629      	mov	r1, r5
 8002b46:	4620      	mov	r0, r4
 8002b48:	f006 f948 	bl	8008ddc <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8002b4c:	8978      	ldrh	r0, [r7, #10]
 8002b4e:	88f9      	ldrh	r1, [r7, #6]
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	2302      	movs	r3, #2
 8002b56:	2200      	movs	r2, #0
 8002b58:	f006 f940 	bl	8008ddc <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	2102      	movs	r1, #2
 8002b60:	2000      	movs	r0, #0
 8002b62:	f006 fc4a 	bl	80093fa <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8002b66:	4b21      	ldr	r3, [pc, #132]	; (8002bec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8002b6c:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f005 fc07 	bl	8008384 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8002b76:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002b7e:	2208      	movs	r2, #8
 8002b80:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8002b82:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002b84:	2210      	movs	r2, #16
 8002b86:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8002b88:	4b18      	ldr	r3, [pc, #96]	; (8002bec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002b90:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <Ble_Hci_Gap_Gatt_Init+0x130>)
 8002b92:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8002b94:	4b15      	ldr	r3, [pc, #84]	; (8002bec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8002b9a:	4b14      	ldr	r3, [pc, #80]	; (8002bec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002b9c:	789c      	ldrb	r4, [r3, #2]
 8002b9e:	4b13      	ldr	r3, [pc, #76]	; (8002bec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002ba0:	785d      	ldrb	r5, [r3, #1]
 8002ba2:	4b12      	ldr	r3, [pc, #72]	; (8002bec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002ba4:	791b      	ldrb	r3, [r3, #4]
 8002ba6:	4a11      	ldr	r2, [pc, #68]	; (8002bec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002ba8:	7952      	ldrb	r2, [r2, #5]
 8002baa:	4910      	ldr	r1, [pc, #64]	; (8002bec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002bac:	78c9      	ldrb	r1, [r1, #3]
 8002bae:	480f      	ldr	r0, [pc, #60]	; (8002bec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002bb0:	6880      	ldr	r0, [r0, #8]
 8002bb2:	2600      	movs	r6, #0
 8002bb4:	9604      	str	r6, [sp, #16]
 8002bb6:	9003      	str	r0, [sp, #12]
 8002bb8:	9102      	str	r1, [sp, #8]
 8002bba:	9201      	str	r2, [sp, #4]
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f005 fc31 	bl	800842c <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8002bca:	4b08      	ldr	r3, [pc, #32]	; (8002bec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002bcc:	789b      	ldrb	r3, [r3, #2]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <Ble_Hci_Gap_Gatt_Init+0x116>
   {
     aci_gap_configure_whitelist();
 8002bd2:	f005 fe75 	bl	80088c0 <aci_gap_configure_whitelist>
   }
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bde:	bf00      	nop
 8002be0:	0800ceec 	.word	0x0800ceec
 8002be4:	0800cefc 	.word	0x0800cefc
 8002be8:	0800c9e8 	.word	0x0800c9e8
 8002bec:	20000130 	.word	0x20000130
 8002bf0:	0001b207 	.word	0x0001b207

08002bf4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08c      	sub	sp, #48	; 0x30
 8002bf8:	af08      	add	r7, sp, #32
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002bfe:	2392      	movs	r3, #146	; 0x92
 8002c00:	73fb      	strb	r3, [r7, #15]

    BleApplicationContext.Device_Connection_Status = New_Status;
 8002c02:	4a22      	ldr	r2, [pc, #136]	; (8002c8c <Adv_Request+0x98>)
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	9306      	str	r3, [sp, #24]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	9305      	str	r3, [sp, #20]
 8002c12:	2300      	movs	r3, #0
 8002c14:	9304      	str	r3, [sp, #16]
 8002c16:	2300      	movs	r3, #0
 8002c18:	9303      	str	r3, [sp, #12]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	9302      	str	r3, [sp, #8]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	2300      	movs	r3, #0
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	2300      	movs	r3, #0
 8002c28:	22a0      	movs	r2, #160	; 0xa0
 8002c2a:	2180      	movs	r1, #128	; 0x80
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f005 faaf 	bl	8008190 <aci_gap_set_discoverable>
 8002c32:	4603      	mov	r3, r0
 8002c34:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 8002c36:	4916      	ldr	r1, [pc, #88]	; (8002c90 <Adv_Request+0x9c>)
 8002c38:	2013      	movs	r0, #19
 8002c3a:	f005 fdcf 	bl	80087dc <aci_gap_update_adv_data>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	73fb      	strb	r3, [r7, #15]

    if (ret == BLE_STATUS_SUCCESS)
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10d      	bne.n	8002c64 <Adv_Request+0x70>
    {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8002c48:	4812      	ldr	r0, [pc, #72]	; (8002c94 <Adv_Request+0xa0>)
 8002c4a:	f006 fc53 	bl	80094f4 <DbgTraceGetFileName>
 8002c4e:	4601      	mov	r1, r0
 8002c50:	f240 3305 	movw	r3, #773	; 0x305
 8002c54:	4a10      	ldr	r2, [pc, #64]	; (8002c98 <Adv_Request+0xa4>)
 8002c56:	4811      	ldr	r0, [pc, #68]	; (8002c9c <Adv_Request+0xa8>)
 8002c58:	f008 fc02 	bl	800b460 <iprintf>
 8002c5c:	4810      	ldr	r0, [pc, #64]	; (8002ca0 <Adv_Request+0xac>)
 8002c5e:	f008 fc85 	bl	800b56c <puts>
    else
    {
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
    }

  return;
 8002c62:	e00f      	b.n	8002c84 <Adv_Request+0x90>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 8002c64:	480b      	ldr	r0, [pc, #44]	; (8002c94 <Adv_Request+0xa0>)
 8002c66:	f006 fc45 	bl	80094f4 <DbgTraceGetFileName>
 8002c6a:	4601      	mov	r1, r0
 8002c6c:	f240 3309 	movw	r3, #777	; 0x309
 8002c70:	4a09      	ldr	r2, [pc, #36]	; (8002c98 <Adv_Request+0xa4>)
 8002c72:	480a      	ldr	r0, [pc, #40]	; (8002c9c <Adv_Request+0xa8>)
 8002c74:	f008 fbf4 	bl	800b460 <iprintf>
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4809      	ldr	r0, [pc, #36]	; (8002ca4 <Adv_Request+0xb0>)
 8002c7e:	f008 fbef 	bl	800b460 <iprintf>
  return;
 8002c82:	bf00      	nop
}
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000130 	.word	0x20000130
 8002c90:	20000008 	.word	0x20000008
 8002c94:	0800c81c 	.word	0x0800c81c
 8002c98:	0800cf24 	.word	0x0800cf24
 8002c9c:	0800c86c 	.word	0x0800c86c
 8002ca0:	0800c9f4 	.word	0x0800c9f4
 8002ca4:	0800ca1c 	.word	0x0800ca1c

08002ca8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8002cae:	f7ff fd45 	bl	800273c <LL_FLASH_GetUDN>
 8002cb2:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cba:	d023      	beq.n	8002d04 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8002cbc:	f7ff fd56 	bl	800276c <LL_FLASH_GetSTCompanyID>
 8002cc0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8002cc2:	f7ff fd47 	bl	8002754 <LL_FLASH_GetDeviceID>
 8002cc6:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <BleGetBdAddress+0x80>)
 8002cce:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <BleGetBdAddress+0x80>)
 8002cd8:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <BleGetBdAddress+0x80>)
 8002ce0:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <BleGetBdAddress+0x80>)
 8002ce8:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <BleGetBdAddress+0x80>)
 8002cf2:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	0c1b      	lsrs	r3, r3, #16
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <BleGetBdAddress+0x80>)
 8002cfc:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <BleGetBdAddress+0x80>)
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	e00b      	b.n	8002d1c <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8002d04:	2000      	movs	r0, #0
 8002d06:	f006 fe89 	bl	8009a1c <OTP_Read>
 8002d0a:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	e001      	b.n	8002d1c <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8002d18:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <BleGetBdAddress+0x84>)
 8002d1a:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8002d1c:	697b      	ldr	r3, [r7, #20]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	2000049c 	.word	0x2000049c
 8002d2c:	0800cee4 	.word	0x0800cee4

08002d30 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8002d36:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <Adv_Cancel+0x84>)
 8002d38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002d3c:	2b05      	cmp	r3, #5
 8002d3e:	d035      	beq.n	8002dac <Adv_Cancel+0x7c>

  {

    tBleStatus result = 0x00;
 8002d40:	2300      	movs	r3, #0
 8002d42:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8002d44:	f005 fa00 	bl	8008148 <aci_gap_set_non_discoverable>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <Adv_Cancel+0x84>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (result == BLE_STATUS_SUCCESS)
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d11a      	bne.n	8002d90 <Adv_Cancel+0x60>
    {
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8002d5a:	4817      	ldr	r0, [pc, #92]	; (8002db8 <Adv_Cancel+0x88>)
 8002d5c:	f006 fbca 	bl	80094f4 <DbgTraceGetFileName>
 8002d60:	4601      	mov	r1, r0
 8002d62:	f240 3359 	movw	r3, #857	; 0x359
 8002d66:	4a15      	ldr	r2, [pc, #84]	; (8002dbc <Adv_Cancel+0x8c>)
 8002d68:	4815      	ldr	r0, [pc, #84]	; (8002dc0 <Adv_Cancel+0x90>)
 8002d6a:	f008 fb79 	bl	800b460 <iprintf>
 8002d6e:	4815      	ldr	r0, [pc, #84]	; (8002dc4 <Adv_Cancel+0x94>)
 8002d70:	f008 fb76 	bl	800b460 <iprintf>
 8002d74:	4810      	ldr	r0, [pc, #64]	; (8002db8 <Adv_Cancel+0x88>)
 8002d76:	f006 fbbd 	bl	80094f4 <DbgTraceGetFileName>
 8002d7a:	4601      	mov	r1, r0
 8002d7c:	f240 3359 	movw	r3, #857	; 0x359
 8002d80:	4a0e      	ldr	r2, [pc, #56]	; (8002dbc <Adv_Cancel+0x8c>)
 8002d82:	480f      	ldr	r0, [pc, #60]	; (8002dc0 <Adv_Cancel+0x90>)
 8002d84:	f008 fb6c 	bl	800b460 <iprintf>
 8002d88:	480f      	ldr	r0, [pc, #60]	; (8002dc8 <Adv_Cancel+0x98>)
 8002d8a:	f008 fb69 	bl	800b460 <iprintf>
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8002d8e:	e00d      	b.n	8002dac <Adv_Cancel+0x7c>
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8002d90:	4809      	ldr	r0, [pc, #36]	; (8002db8 <Adv_Cancel+0x88>)
 8002d92:	f006 fbaf 	bl	80094f4 <DbgTraceGetFileName>
 8002d96:	4601      	mov	r1, r0
 8002d98:	f240 335d 	movw	r3, #861	; 0x35d
 8002d9c:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <Adv_Cancel+0x8c>)
 8002d9e:	4808      	ldr	r0, [pc, #32]	; (8002dc0 <Adv_Cancel+0x90>)
 8002da0:	f008 fb5e 	bl	800b460 <iprintf>
 8002da4:	4809      	ldr	r0, [pc, #36]	; (8002dcc <Adv_Cancel+0x9c>)
 8002da6:	f008 fb5b 	bl	800b460 <iprintf>
  return;
 8002daa:	bf00      	nop
 8002dac:	bf00      	nop
}
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000130 	.word	0x20000130
 8002db8:	0800c81c 	.word	0x0800c81c
 8002dbc:	0800cf30 	.word	0x0800cf30
 8002dc0:	0800c86c 	.word	0x0800c86c
 8002dc4:	0800ca4c 	.word	0x0800ca4c
 8002dc8:	0800ca54 	.word	0x0800ca54
 8002dcc:	0800ca70 	.word	0x0800ca70

08002dd0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002dd8:	2100      	movs	r1, #0
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f008 f9de 	bl	800b19c <UTIL_SEQ_SetTask>
  return;
 8002de0:	bf00      	nop
}
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002df0:	2001      	movs	r0, #1
 8002df2:	f008 fa3f 	bl	800b274 <UTIL_SEQ_SetEvt>
  return;
 8002df6:	bf00      	nop
}
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002e06:	2001      	movs	r0, #1
 8002e08:	f008 fa54 	bl	800b2b4 <UTIL_SEQ_WaitEvt>
  return;
 8002e0c:	bf00      	nop
}
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	3308      	adds	r3, #8
 8002e26:	4618      	mov	r0, r3
 8002e28:	f007 fdce 	bl	800a9c8 <SVCCTL_UserEvtRx>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8002e3c:	e003      	b.n	8002e46 <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
  return;
 8002e44:	bf00      	nop
}
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <BLE_StatusNot+0x16>
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d006      	beq.n	8002e6e <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8002e60:	e00b      	b.n	8002e7a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002e62:	231f      	movs	r3, #31
 8002e64:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f008 f9c4 	bl	800b1f4 <UTIL_SEQ_PauseTask>
      break;
 8002e6c:	e005      	b.n	8002e7a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002e6e:	231f      	movs	r3, #31
 8002e70:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f008 f9de 	bl	800b234 <UTIL_SEQ_ResumeTask>
      break;
 8002e78:	bf00      	nop
  }
  return;
 8002e7a:	bf00      	nop
}
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */
  static uint16_t hr_value, hr_energy;
    
  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch(pNotification->Custom_Evt_Opcode)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b06      	cmp	r3, #6
 8002e92:	f200 80c8 	bhi.w	8003026 <Custom_STM_App_Notification+0x1a2>
 8002e96:	a201      	add	r2, pc, #4	; (adr r2, 8002e9c <Custom_STM_App_Notification+0x18>)
 8002e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9c:	08002eb9 	.word	0x08002eb9
 8002ea0:	08002eff 	.word	0x08002eff
 8002ea4:	08003027 	.word	0x08003027
 8002ea8:	08002f19 	.word	0x08002f19
 8002eac:	08002fe7 	.word	0x08002fe7
 8002eb0:	08003027 	.word	0x08003027
 8002eb4:	08003007 	.word	0x08003007
    /* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

  /* My_P2P_Server */
    case CUSTOM_STM_LED_C_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LED_C_READ_EVT */
       PRINT_MESG_DBG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE My_Led_Char Read\n");
 8002eb8:	485d      	ldr	r0, [pc, #372]	; (8003030 <Custom_STM_App_Notification+0x1ac>)
 8002eba:	f006 fb1b 	bl	80094f4 <DbgTraceGetFileName>
 8002ebe:	4601      	mov	r1, r0
 8002ec0:	2372      	movs	r3, #114	; 0x72
 8002ec2:	4a5c      	ldr	r2, [pc, #368]	; (8003034 <Custom_STM_App_Notification+0x1b0>)
 8002ec4:	485c      	ldr	r0, [pc, #368]	; (8003038 <Custom_STM_App_Notification+0x1b4>)
 8002ec6:	f008 facb 	bl	800b460 <iprintf>
 8002eca:	485c      	ldr	r0, [pc, #368]	; (800303c <Custom_STM_App_Notification+0x1b8>)
 8002ecc:	f008 fb4e 	bl	800b56c <puts>
       UpdateCharData[0] = '2';
 8002ed0:	4b5b      	ldr	r3, [pc, #364]	; (8003040 <Custom_STM_App_Notification+0x1bc>)
 8002ed2:	2232      	movs	r2, #50	; 0x32
 8002ed4:	701a      	strb	r2, [r3, #0]
       UpdateCharData[1] = '2';
 8002ed6:	4b5a      	ldr	r3, [pc, #360]	; (8003040 <Custom_STM_App_Notification+0x1bc>)
 8002ed8:	2232      	movs	r2, #50	; 0x32
 8002eda:	705a      	strb	r2, [r3, #1]
       UpdateCharData[2] = '2';
 8002edc:	4b58      	ldr	r3, [pc, #352]	; (8003040 <Custom_STM_App_Notification+0x1bc>)
 8002ede:	2232      	movs	r2, #50	; 0x32
 8002ee0:	709a      	strb	r2, [r3, #2]
       UpdateCharData[3] = '2';
 8002ee2:	4b57      	ldr	r3, [pc, #348]	; (8003040 <Custom_STM_App_Notification+0x1bc>)
 8002ee4:	2232      	movs	r2, #50	; 0x32
 8002ee6:	70da      	strb	r2, [r3, #3]
       UpdateCharData[4] = '2';
 8002ee8:	4b55      	ldr	r3, [pc, #340]	; (8003040 <Custom_STM_App_Notification+0x1bc>)
 8002eea:	2232      	movs	r2, #50	; 0x32
 8002eec:	711a      	strb	r2, [r3, #4]
       UpdateCharData[5] = '2';
 8002eee:	4b54      	ldr	r3, [pc, #336]	; (8003040 <Custom_STM_App_Notification+0x1bc>)
 8002ef0:	2232      	movs	r2, #50	; 0x32
 8002ef2:	715a      	strb	r2, [r3, #5]
       Custom_STM_App_Update_Char(CUSTOM_STM_LED_C, (uint8_t *)UpdateCharData);
 8002ef4:	4952      	ldr	r1, [pc, #328]	; (8003040 <Custom_STM_App_Notification+0x1bc>)
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f000 fb72 	bl	80035e0 <Custom_STM_App_Update_Char>
      /* USER CODE END CUSTOM_STM_LED_C_READ_EVT */
      break;
 8002efc:	e094      	b.n	8003028 <Custom_STM_App_Notification+0x1a4>

    case CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
       PRINT_MESG_DBG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE My_Led_Char Write\n");
 8002efe:	484c      	ldr	r0, [pc, #304]	; (8003030 <Custom_STM_App_Notification+0x1ac>)
 8002f00:	f006 faf8 	bl	80094f4 <DbgTraceGetFileName>
 8002f04:	4601      	mov	r1, r0
 8002f06:	237f      	movs	r3, #127	; 0x7f
 8002f08:	4a4a      	ldr	r2, [pc, #296]	; (8003034 <Custom_STM_App_Notification+0x1b0>)
 8002f0a:	484b      	ldr	r0, [pc, #300]	; (8003038 <Custom_STM_App_Notification+0x1b4>)
 8002f0c:	f008 faa8 	bl	800b460 <iprintf>
 8002f10:	484c      	ldr	r0, [pc, #304]	; (8003044 <Custom_STM_App_Notification+0x1c0>)
 8002f12:	f008 fb2b 	bl	800b56c <puts>

      /* USER CODE END CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
      break;
 8002f16:	e087      	b.n	8003028 <Custom_STM_App_Notification+0x1a4>

  /* My_Heart_Rate */
    case CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT */

       PRINT_MESG_DBG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE My_HRS_Meas NOTIFICATION_ENABLED\n");
 8002f18:	4845      	ldr	r0, [pc, #276]	; (8003030 <Custom_STM_App_Notification+0x1ac>)
 8002f1a:	f006 faeb 	bl	80094f4 <DbgTraceGetFileName>
 8002f1e:	4601      	mov	r1, r0
 8002f20:	238e      	movs	r3, #142	; 0x8e
 8002f22:	4a44      	ldr	r2, [pc, #272]	; (8003034 <Custom_STM_App_Notification+0x1b0>)
 8002f24:	4844      	ldr	r0, [pc, #272]	; (8003038 <Custom_STM_App_Notification+0x1b4>)
 8002f26:	f008 fa9b 	bl	800b460 <iprintf>
 8002f2a:	4847      	ldr	r0, [pc, #284]	; (8003048 <Custom_STM_App_Notification+0x1c4>)
 8002f2c:	f008 fb1e 	bl	800b56c <puts>

       Custom_App_Context.Hrs_m_Notification_Status = 1;         /* Hrs_m notification status has been enabled */
 8002f30:	4b46      	ldr	r3, [pc, #280]	; (800304c <Custom_STM_App_Notification+0x1c8>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]

       /* Set Heart Rate Measurement value */
       if ((hr_value >= CUSTOM_STM_HRS_VALUE_MIN) && (hr_value <= CUSTOM_STM_HRS_VALUE_MAX))
 8002f36:	4b46      	ldr	r3, [pc, #280]	; (8003050 <Custom_STM_App_Notification+0x1cc>)
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	2b43      	cmp	r3, #67	; 0x43
 8002f3c:	d91c      	bls.n	8002f78 <Custom_STM_App_Notification+0xf4>
 8002f3e:	4b44      	ldr	r3, [pc, #272]	; (8003050 <Custom_STM_App_Notification+0x1cc>)
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	2b49      	cmp	r3, #73	; 0x49
 8002f44:	d818      	bhi.n	8002f78 <Custom_STM_App_Notification+0xf4>
       {
         hr_value += 1;
 8002f46:	4b42      	ldr	r3, [pc, #264]	; (8003050 <Custom_STM_App_Notification+0x1cc>)
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	4b40      	ldr	r3, [pc, #256]	; (8003050 <Custom_STM_App_Notification+0x1cc>)
 8002f50:	801a      	strh	r2, [r3, #0]
         
         /* Check if energy expanded has been reset */
         if (hr_energy_reset == CUSTOM_STM_HRS_ENERGY_RESET)
 8002f52:	4b40      	ldr	r3, [pc, #256]	; (8003054 <Custom_STM_App_Notification+0x1d0>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d107      	bne.n	8002f6a <Custom_STM_App_Notification+0xe6>
         {
           hr_energy = (uint16_t)CUSTOM_STM_HRS_ENERGY_MIN;
 8002f5a:	4b3f      	ldr	r3, [pc, #252]	; (8003058 <Custom_STM_App_Notification+0x1d4>)
 8002f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f60:	801a      	strh	r2, [r3, #0]
           hr_energy_reset = (uint8_t)CUSTOM_STM_HRS_ENERGY_NOT_RESET;
 8002f62:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <Custom_STM_App_Notification+0x1d0>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
         if (hr_energy_reset == CUSTOM_STM_HRS_ENERGY_RESET)
 8002f68:	e00d      	b.n	8002f86 <Custom_STM_App_Notification+0x102>
         }
         else
         {
           hr_energy += 1;
 8002f6a:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <Custom_STM_App_Notification+0x1d4>)
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	4b39      	ldr	r3, [pc, #228]	; (8003058 <Custom_STM_App_Notification+0x1d4>)
 8002f74:	801a      	strh	r2, [r3, #0]
         if (hr_energy_reset == CUSTOM_STM_HRS_ENERGY_RESET)
 8002f76:	e006      	b.n	8002f86 <Custom_STM_App_Notification+0x102>
         }
       }
       else
       {
         hr_value = (uint16_t)CUSTOM_STM_HRS_VALUE_MIN;
 8002f78:	4b35      	ldr	r3, [pc, #212]	; (8003050 <Custom_STM_App_Notification+0x1cc>)
 8002f7a:	2244      	movs	r2, #68	; 0x44
 8002f7c:	801a      	strh	r2, [r3, #0]
         hr_energy = (uint16_t)CUSTOM_STM_HRS_ENERGY_MIN;
 8002f7e:	4b36      	ldr	r3, [pc, #216]	; (8003058 <Custom_STM_App_Notification+0x1d4>)
 8002f80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f84:	801a      	strh	r2, [r3, #0]
       }
       PRINT_MESG_DBG("hr_value : %d, hr_energy : %d\n", hr_value, hr_energy);
 8002f86:	482a      	ldr	r0, [pc, #168]	; (8003030 <Custom_STM_App_Notification+0x1ac>)
 8002f88:	f006 fab4 	bl	80094f4 <DbgTraceGetFileName>
 8002f8c:	4601      	mov	r1, r0
 8002f8e:	23a7      	movs	r3, #167	; 0xa7
 8002f90:	4a28      	ldr	r2, [pc, #160]	; (8003034 <Custom_STM_App_Notification+0x1b0>)
 8002f92:	4829      	ldr	r0, [pc, #164]	; (8003038 <Custom_STM_App_Notification+0x1b4>)
 8002f94:	f008 fa64 	bl	800b460 <iprintf>
 8002f98:	4b2d      	ldr	r3, [pc, #180]	; (8003050 <Custom_STM_App_Notification+0x1cc>)
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4b2e      	ldr	r3, [pc, #184]	; (8003058 <Custom_STM_App_Notification+0x1d4>)
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	482d      	ldr	r0, [pc, #180]	; (800305c <Custom_STM_App_Notification+0x1d8>)
 8002fa6:	f008 fa5b 	bl	800b460 <iprintf>
       
       /* NotifyCharData array size depends on SizeHrs_M defined in custom_stm.c file */
       NotifyCharData[0] = HRS_HRM_ENERGY_EXPENDED_PRESENT | HRS_HRM_VALUE_FORMAT_UINT16;     /* Heart Rate Value Format is set to UINT16. Units: beats per minute (bpm). Energy Expended field is present. Units: kilo Joules  */
 8002faa:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <Custom_STM_App_Notification+0x1dc>)
 8002fac:	2209      	movs	r2, #9
 8002fae:	701a      	strb	r2, [r3, #0]
       NotifyCharData[1] = (uint8_t)hr_value;           /* Heart Rate Measurement Value LSB*/
 8002fb0:	4b27      	ldr	r3, [pc, #156]	; (8003050 <Custom_STM_App_Notification+0x1cc>)
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	4b2a      	ldr	r3, [pc, #168]	; (8003060 <Custom_STM_App_Notification+0x1dc>)
 8002fb8:	705a      	strb	r2, [r3, #1]
       NotifyCharData[2] = (uint8_t)(hr_value >> 8);    /* Heart Rate Measurement Value MSB*/
 8002fba:	4b25      	ldr	r3, [pc, #148]	; (8003050 <Custom_STM_App_Notification+0x1cc>)
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	4b26      	ldr	r3, [pc, #152]	; (8003060 <Custom_STM_App_Notification+0x1dc>)
 8002fc6:	709a      	strb	r2, [r3, #2]
       NotifyCharData[3] = (uint8_t)hr_energy;          /* Energy Expended LSB*/
 8002fc8:	4b23      	ldr	r3, [pc, #140]	; (8003058 <Custom_STM_App_Notification+0x1d4>)
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	4b24      	ldr	r3, [pc, #144]	; (8003060 <Custom_STM_App_Notification+0x1dc>)
 8002fd0:	70da      	strb	r2, [r3, #3]
       NotifyCharData[4] = (uint8_t)(hr_energy >> 8);   /* Energy Expended MSB*/
 8002fd2:	4b21      	ldr	r3, [pc, #132]	; (8003058 <Custom_STM_App_Notification+0x1d4>)
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	4b20      	ldr	r3, [pc, #128]	; (8003060 <Custom_STM_App_Notification+0x1dc>)
 8002fde:	711a      	strb	r2, [r3, #4]
       
       Custom_Hrs_m_Send_Notification();                       
 8002fe0:	f000 f872 	bl	80030c8 <Custom_Hrs_m_Send_Notification>
      /* USER CODE END CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT */
      break;
 8002fe4:	e020      	b.n	8003028 <Custom_STM_App_Notification+0x1a4>

    case CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT */
      PRINT_MESG_DBG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE My_HRS_Meas NOTIFICATION_DISABLED\n");
 8002fe6:	4812      	ldr	r0, [pc, #72]	; (8003030 <Custom_STM_App_Notification+0x1ac>)
 8002fe8:	f006 fa84 	bl	80094f4 <DbgTraceGetFileName>
 8002fec:	4601      	mov	r1, r0
 8002fee:	23b6      	movs	r3, #182	; 0xb6
 8002ff0:	4a10      	ldr	r2, [pc, #64]	; (8003034 <Custom_STM_App_Notification+0x1b0>)
 8002ff2:	4811      	ldr	r0, [pc, #68]	; (8003038 <Custom_STM_App_Notification+0x1b4>)
 8002ff4:	f008 fa34 	bl	800b460 <iprintf>
 8002ff8:	481a      	ldr	r0, [pc, #104]	; (8003064 <Custom_STM_App_Notification+0x1e0>)
 8002ffa:	f008 fab7 	bl	800b56c <puts>
      
      Custom_App_Context.Hrs_m_Notification_Status = 0;         /* Hrs_m notification status has been disabled */
 8002ffe:	4b13      	ldr	r3, [pc, #76]	; (800304c <Custom_STM_App_Notification+0x1c8>)
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT */
      break;
 8003004:	e010      	b.n	8003028 <Custom_STM_App_Notification+0x1a4>
      /* USER CODE END CUSTOM_STM_HRS_SL_READ_EVT */
      break;

    case CUSTOM_STM_HRS_CTRLP_WRITE_EVT:
      /* USER CODE BEGIN CUSTOM_STM_HRS_CTRLP_WRITE_EVT */
      PRINT_MESG_DBG("ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE My_HRS_CTRL_Point Write\n");
 8003006:	480a      	ldr	r0, [pc, #40]	; (8003030 <Custom_STM_App_Notification+0x1ac>)
 8003008:	f006 fa74 	bl	80094f4 <DbgTraceGetFileName>
 800300c:	4601      	mov	r1, r0
 800300e:	23c4      	movs	r3, #196	; 0xc4
 8003010:	4a08      	ldr	r2, [pc, #32]	; (8003034 <Custom_STM_App_Notification+0x1b0>)
 8003012:	4809      	ldr	r0, [pc, #36]	; (8003038 <Custom_STM_App_Notification+0x1b4>)
 8003014:	f008 fa24 	bl	800b460 <iprintf>
 8003018:	4813      	ldr	r0, [pc, #76]	; (8003068 <Custom_STM_App_Notification+0x1e4>)
 800301a:	f008 faa7 	bl	800b56c <puts>
      
      /* reset energy expended */
      hr_energy_reset = CUSTOM_STM_HRS_ENERGY_RESET;
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <Custom_STM_App_Notification+0x1d0>)
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_HRS_CTRLP_WRITE_EVT */
      break;
 8003024:	e000      	b.n	8003028 <Custom_STM_App_Notification+0x1a4>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8003026:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8003028:	bf00      	nop
}
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	0800ca94 	.word	0x0800ca94
 8003034:	0800cf3c 	.word	0x0800cf3c
 8003038:	0800cae8 	.word	0x0800cae8
 800303c:	0800cafc 	.word	0x0800cafc
 8003040:	200004a8 	.word	0x200004a8
 8003044:	0800cb34 	.word	0x0800cb34
 8003048:	0800cb70 	.word	0x0800cb70
 800304c:	200001b4 	.word	0x200001b4
 8003050:	20000698 	.word	0x20000698
 8003054:	2000001b 	.word	0x2000001b
 8003058:	2000069a 	.word	0x2000069a
 800305c:	0800cbb8 	.word	0x0800cbb8
 8003060:	200005a0 	.word	0x200005a0
 8003064:	0800cbd8 	.word	0x0800cbd8
 8003068:	0800cc24 	.word	0x0800cc24

0800306c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <Custom_APP_Notification+0x16>
 800307c:	2b01      	cmp	r3, #1
 800307e:	d002      	beq.n	8003086 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8003080:	e002      	b.n	8003088 <Custom_APP_Notification+0x1c>
      break;
 8003082:	bf00      	nop
 8003084:	e000      	b.n	8003088 <Custom_APP_Notification+0x1c>
      break;
 8003086:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8003088:	bf00      	nop
}
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
  uint8_t sensor_loc;

  sensor_loc = CUSTOM_STM_HRS_BODY_SENSOR_LOCATION_WRIST;
 800309a:	2302      	movs	r3, #2
 800309c:	71fb      	strb	r3, [r7, #7]
  Custom_STM_App_Update_Char(CUSTOM_STM_HRS_SL, (uint8_t *) &sensor_loc);       /*initialise My_Sensor_Loc char to wrist */
 800309e:	1dfb      	adds	r3, r7, #7
 80030a0:	4619      	mov	r1, r3
 80030a2:	2003      	movs	r0, #3
 80030a4:	f000 fa9c 	bl	80035e0 <Custom_STM_App_Update_Char>
  
  //Custom_Switch_c_Update_Char();
  Custom_Hrs_m_Update_Char();
 80030a8:	f000 f804 	bl	80030b4 <Custom_Hrs_m_Update_Char>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 80030ac:	bf00      	nop
}
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <Custom_Hrs_m_Update_Char>:
 *************************************************************/

  /* My_P2P_Server */
  /* My_Heart_Rate */
void Custom_Hrs_m_Update_Char(void) /* Property Read */
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  Custom_STM_App_Update_Char(CUSTOM_STM_HRS_M, (uint8_t *)UpdateCharData);
 80030b8:	4902      	ldr	r1, [pc, #8]	; (80030c4 <Custom_Hrs_m_Update_Char+0x10>)
 80030ba:	2002      	movs	r0, #2
 80030bc:	f000 fa90 	bl	80035e0 <Custom_STM_App_Update_Char>
  /* USER CODE BEGIN Hrs_m_UC*/

  /* USER CODE END Hrs_m_UC*/
  return;
 80030c0:	bf00      	nop
}
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	200004a8 	.word	0x200004a8

080030c8 <Custom_Hrs_m_Send_Notification>:

void Custom_Hrs_m_Send_Notification(void) /* Property Notification */
 {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  if(Custom_App_Context.Hrs_m_Notification_Status)
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <Custom_Hrs_m_Send_Notification+0x34>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d004      	beq.n	80030de <Custom_Hrs_m_Send_Notification+0x16>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_HRS_M, (uint8_t *)NotifyCharData);
 80030d4:	490a      	ldr	r1, [pc, #40]	; (8003100 <Custom_Hrs_m_Send_Notification+0x38>)
 80030d6:	2002      	movs	r0, #2
 80030d8:	f000 fa82 	bl	80035e0 <Custom_STM_App_Update_Char>
  }
  else
  {
    APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
  }
  return;
 80030dc:	e00d      	b.n	80030fa <Custom_Hrs_m_Send_Notification+0x32>
    APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
 80030de:	4809      	ldr	r0, [pc, #36]	; (8003104 <Custom_Hrs_m_Send_Notification+0x3c>)
 80030e0:	f006 fa08 	bl	80094f4 <DbgTraceGetFileName>
 80030e4:	4601      	mov	r1, r0
 80030e6:	f44f 7395 	mov.w	r3, #298	; 0x12a
 80030ea:	4a07      	ldr	r2, [pc, #28]	; (8003108 <Custom_Hrs_m_Send_Notification+0x40>)
 80030ec:	4807      	ldr	r0, [pc, #28]	; (800310c <Custom_Hrs_m_Send_Notification+0x44>)
 80030ee:	f008 f9b7 	bl	800b460 <iprintf>
 80030f2:	4807      	ldr	r0, [pc, #28]	; (8003110 <Custom_Hrs_m_Send_Notification+0x48>)
 80030f4:	f008 f9b4 	bl	800b460 <iprintf>
  return;
 80030f8:	bf00      	nop
}
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	200001b4 	.word	0x200001b4
 8003100:	200005a0 	.word	0x200005a0
 8003104:	0800ca94 	.word	0x0800ca94
 8003108:	0800cf58 	.word	0x0800cf58
 800310c:	0800cae8 	.word	0x0800cae8
 8003110:	0800cc64 	.word	0x0800cc64

08003114 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b090      	sub	sp, #64	; 0x40
 8003118:	af02      	add	r7, sp, #8
 800311a:	6078      	str	r0, [r7, #4]
                           Gatt Event Mask = GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP are defined, so:
                           BLE core event ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE must be considered*/
  /* aci_gatt_read_permit_req_event_rp0    *read_req; */ 
  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800311c:	2300      	movs	r3, #0
 800311e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3301      	adds	r3, #1
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28

  switch(event_pckt->evt)
 8003128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2bff      	cmp	r3, #255	; 0xff
 800312e:	f040 8148 	bne.w	80033c2 <Custom_STM_Event_Handler+0x2ae>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	3302      	adds	r3, #2
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blecore_evt->ecode)
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	f640 4214 	movw	r2, #3092	; 0xc14
 8003142:	4293      	cmp	r3, r2
 8003144:	f000 8087 	beq.w	8003256 <Custom_STM_Event_Handler+0x142>
 8003148:	f640 4214 	movw	r2, #3092	; 0xc14
 800314c:	4293      	cmp	r3, r2
 800314e:	f300 8130 	bgt.w	80033b2 <Custom_STM_Event_Handler+0x29e>
 8003152:	f640 4201 	movw	r2, #3073	; 0xc01
 8003156:	4293      	cmp	r3, r2
 8003158:	d005      	beq.n	8003166 <Custom_STM_Event_Handler+0x52>
 800315a:	f640 4213 	movw	r2, #3091	; 0xc13
 800315e:	4293      	cmp	r3, r2
 8003160:	f000 80eb 	beq.w	800333a <Custom_STM_Event_Handler+0x226>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8003164:	e125      	b.n	80033b2 <Custom_STM_Event_Handler+0x29e>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	3302      	adds	r3, #2
 800316a:	623b      	str	r3, [r7, #32]
          if(attribute_modified->Attr_Handle == (CustomContext.CustomHrs_MHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	885b      	ldrh	r3, [r3, #2]
 8003170:	b29b      	uxth	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	4b96      	ldr	r3, [pc, #600]	; (80033d0 <Custom_STM_Event_Handler+0x2bc>)
 8003176:	891b      	ldrh	r3, [r3, #8]
 8003178:	3302      	adds	r3, #2
 800317a:	429a      	cmp	r2, r3
 800317c:	d119      	bne.n	80031b2 <Custom_STM_Event_Handler+0x9e>
            return_value = SVCCTL_EvtAckFlowEnable;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            switch(attribute_modified->Attr_Data[0])
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	7a1b      	ldrb	r3, [r3, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <Custom_STM_Event_Handler+0x7e>
 800318c:	2b01      	cmp	r3, #1
 800318e:	d008      	beq.n	80031a2 <Custom_STM_Event_Handler+0x8e>
              break;
 8003190:	e060      	b.n	8003254 <Custom_STM_Event_Handler+0x140>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT;
 8003192:	2304      	movs	r3, #4
 8003194:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8003196:	f107 0308 	add.w	r3, r7, #8
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fe72 	bl	8002e84 <Custom_STM_App_Notification>
                break;
 80031a0:	e058      	b.n	8003254 <Custom_STM_Event_Handler+0x140>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80031a6:	f107 0308 	add.w	r3, r7, #8
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fe6a 	bl	8002e84 <Custom_STM_App_Notification>
                break;
 80031b0:	e050      	b.n	8003254 <Custom_STM_Event_Handler+0x140>
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	885b      	ldrh	r3, [r3, #2]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b85      	ldr	r3, [pc, #532]	; (80033d0 <Custom_STM_Event_Handler+0x2bc>)
 80031bc:	885b      	ldrh	r3, [r3, #2]
 80031be:	3301      	adds	r3, #1
 80031c0:	429a      	cmp	r2, r3
 80031c2:	f040 80f8 	bne.w	80033b6 <Custom_STM_Event_Handler+0x2a2>
            return_value = SVCCTL_EvtAckFlowEnable;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            Notification.Custom_Evt_Opcode = CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT;
 80031cc:	2301      	movs	r3, #1
 80031ce:	723b      	strb	r3, [r7, #8]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	88db      	ldrh	r3, [r3, #6]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	743b      	strb	r3, [r7, #16]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	3308      	adds	r3, #8
 80031de:	60fb      	str	r3, [r7, #12]
            for(int i=0; i < attribute_modified->Attr_Data_Length;i++ )
 80031e0:	2300      	movs	r3, #0
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
 80031e4:	e026      	b.n	8003234 <Custom_STM_Event_Handler+0x120>
            	PRINT_MESG_DBG("Data ascii = %c\n", attribute_modified->Attr_Data[i]);
 80031e6:	487b      	ldr	r0, [pc, #492]	; (80033d4 <Custom_STM_Event_Handler+0x2c0>)
 80031e8:	f006 f984 	bl	80094f4 <DbgTraceGetFileName>
 80031ec:	4601      	mov	r1, r0
 80031ee:	23db      	movs	r3, #219	; 0xdb
 80031f0:	4a79      	ldr	r2, [pc, #484]	; (80033d8 <Custom_STM_Event_Handler+0x2c4>)
 80031f2:	487a      	ldr	r0, [pc, #488]	; (80033dc <Custom_STM_Event_Handler+0x2c8>)
 80031f4:	f008 f934 	bl	800b460 <iprintf>
 80031f8:	6a3a      	ldr	r2, [r7, #32]
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	4413      	add	r3, r2
 80031fe:	3308      	adds	r3, #8
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	4619      	mov	r1, r3
 8003204:	4876      	ldr	r0, [pc, #472]	; (80033e0 <Custom_STM_Event_Handler+0x2cc>)
 8003206:	f008 f92b 	bl	800b460 <iprintf>
            	PRINT_MESG_DBG("Data dec = %i\n", attribute_modified->Attr_Data[i]);
 800320a:	4872      	ldr	r0, [pc, #456]	; (80033d4 <Custom_STM_Event_Handler+0x2c0>)
 800320c:	f006 f972 	bl	80094f4 <DbgTraceGetFileName>
 8003210:	4601      	mov	r1, r0
 8003212:	23dc      	movs	r3, #220	; 0xdc
 8003214:	4a70      	ldr	r2, [pc, #448]	; (80033d8 <Custom_STM_Event_Handler+0x2c4>)
 8003216:	4871      	ldr	r0, [pc, #452]	; (80033dc <Custom_STM_Event_Handler+0x2c8>)
 8003218:	f008 f922 	bl	800b460 <iprintf>
 800321c:	6a3a      	ldr	r2, [r7, #32]
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	4413      	add	r3, r2
 8003222:	3308      	adds	r3, #8
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	4619      	mov	r1, r3
 8003228:	486e      	ldr	r0, [pc, #440]	; (80033e4 <Custom_STM_Event_Handler+0x2d0>)
 800322a:	f008 f919 	bl	800b460 <iprintf>
            for(int i=0; i < attribute_modified->Attr_Data_Length;i++ )
 800322e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003230:	3301      	adds	r3, #1
 8003232:	633b      	str	r3, [r7, #48]	; 0x30
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	88db      	ldrh	r3, [r3, #6]
 8003238:	b29b      	uxth	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	4293      	cmp	r3, r2
 8003240:	dbd1      	blt.n	80031e6 <Custom_STM_Event_Handler+0xd2>
            attribute_modified->Attr_Data[0] = 0x46;
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	2246      	movs	r2, #70	; 0x46
 8003246:	721a      	strb	r2, [r3, #8]
            Custom_STM_App_Notification(&Notification);  
 8003248:	f107 0308 	add.w	r3, r7, #8
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fe19 	bl	8002e84 <Custom_STM_App_Notification>
          break;
 8003252:	e0b0      	b.n	80033b6 <Custom_STM_Event_Handler+0x2a2>
 8003254:	e0af      	b.n	80033b6 <Custom_STM_Event_Handler+0x2a2>
        	attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	3302      	adds	r3, #2
 800325a:	623b      	str	r3, [r7, #32]
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	3302      	adds	r3, #2
 8003260:	61fb      	str	r3, [r7, #28]
          if(read_req->Attribute_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	885b      	ldrh	r3, [r3, #2]
 8003266:	b29b      	uxth	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	4b59      	ldr	r3, [pc, #356]	; (80033d0 <Custom_STM_Event_Handler+0x2bc>)
 800326c:	885b      	ldrh	r3, [r3, #2]
 800326e:	3301      	adds	r3, #1
 8003270:	429a      	cmp	r2, r3
 8003272:	d14f      	bne.n	8003314 <Custom_STM_Event_Handler+0x200>
            return_value = SVCCTL_EvtAckFlowEnable;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            aci_gatt_allow_read(read_req->Connection_Handle);
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	b29b      	uxth	r3, r3
 8003280:	4618      	mov	r0, r3
 8003282:	f005 ff01 	bl	8009088 <aci_gatt_allow_read>
            PRINT_MESG_DBG("Length %i\n", attribute_modified->Attr_Data_Length);
 8003286:	4853      	ldr	r0, [pc, #332]	; (80033d4 <Custom_STM_Event_Handler+0x2c0>)
 8003288:	f006 f934 	bl	80094f4 <DbgTraceGetFileName>
 800328c:	4601      	mov	r1, r0
 800328e:	23f3      	movs	r3, #243	; 0xf3
 8003290:	4a51      	ldr	r2, [pc, #324]	; (80033d8 <Custom_STM_Event_Handler+0x2c4>)
 8003292:	4852      	ldr	r0, [pc, #328]	; (80033dc <Custom_STM_Event_Handler+0x2c8>)
 8003294:	f008 f8e4 	bl	800b460 <iprintf>
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	88db      	ldrh	r3, [r3, #6]
 800329c:	b29b      	uxth	r3, r3
 800329e:	4619      	mov	r1, r3
 80032a0:	4851      	ldr	r0, [pc, #324]	; (80033e8 <Custom_STM_Event_Handler+0x2d4>)
 80032a2:	f008 f8dd 	bl	800b460 <iprintf>
            for(int i=0; i < attribute_modified->Attr_Data_Length;i++ )
 80032a6:	2300      	movs	r3, #0
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032aa:	e026      	b.n	80032fa <Custom_STM_Event_Handler+0x1e6>
            	PRINT_MESG_DBG("Data ascii = %c\n", attribute_modified->Attr_Data[i]);
 80032ac:	4849      	ldr	r0, [pc, #292]	; (80033d4 <Custom_STM_Event_Handler+0x2c0>)
 80032ae:	f006 f921 	bl	80094f4 <DbgTraceGetFileName>
 80032b2:	4601      	mov	r1, r0
 80032b4:	23f6      	movs	r3, #246	; 0xf6
 80032b6:	4a48      	ldr	r2, [pc, #288]	; (80033d8 <Custom_STM_Event_Handler+0x2c4>)
 80032b8:	4848      	ldr	r0, [pc, #288]	; (80033dc <Custom_STM_Event_Handler+0x2c8>)
 80032ba:	f008 f8d1 	bl	800b460 <iprintf>
 80032be:	6a3a      	ldr	r2, [r7, #32]
 80032c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c2:	4413      	add	r3, r2
 80032c4:	3308      	adds	r3, #8
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	4619      	mov	r1, r3
 80032ca:	4845      	ldr	r0, [pc, #276]	; (80033e0 <Custom_STM_Event_Handler+0x2cc>)
 80032cc:	f008 f8c8 	bl	800b460 <iprintf>
            	PRINT_MESG_DBG("Data dec = %i\n", attribute_modified->Attr_Data[i]);
 80032d0:	4840      	ldr	r0, [pc, #256]	; (80033d4 <Custom_STM_Event_Handler+0x2c0>)
 80032d2:	f006 f90f 	bl	80094f4 <DbgTraceGetFileName>
 80032d6:	4601      	mov	r1, r0
 80032d8:	23f7      	movs	r3, #247	; 0xf7
 80032da:	4a3f      	ldr	r2, [pc, #252]	; (80033d8 <Custom_STM_Event_Handler+0x2c4>)
 80032dc:	483f      	ldr	r0, [pc, #252]	; (80033dc <Custom_STM_Event_Handler+0x2c8>)
 80032de:	f008 f8bf 	bl	800b460 <iprintf>
 80032e2:	6a3a      	ldr	r2, [r7, #32]
 80032e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e6:	4413      	add	r3, r2
 80032e8:	3308      	adds	r3, #8
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	4619      	mov	r1, r3
 80032ee:	483d      	ldr	r0, [pc, #244]	; (80033e4 <Custom_STM_Event_Handler+0x2d0>)
 80032f0:	f008 f8b6 	bl	800b460 <iprintf>
            for(int i=0; i < attribute_modified->Attr_Data_Length;i++ )
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	3301      	adds	r3, #1
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	88db      	ldrh	r3, [r3, #6]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	4293      	cmp	r3, r2
 8003306:	dbd1      	blt.n	80032ac <Custom_STM_Event_Handler+0x198>
            Custom_STM_App_Notification(&Notification);
 8003308:	f107 0308 	add.w	r3, r7, #8
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fdb9 	bl	8002e84 <Custom_STM_App_Notification>
          break;
 8003312:	e052      	b.n	80033ba <Custom_STM_Event_Handler+0x2a6>
          else if(read_req->Attribute_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	885b      	ldrh	r3, [r3, #2]
 8003318:	b29b      	uxth	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	4b2c      	ldr	r3, [pc, #176]	; (80033d0 <Custom_STM_Event_Handler+0x2bc>)
 800331e:	889b      	ldrh	r3, [r3, #4]
 8003320:	3301      	adds	r3, #1
 8003322:	429a      	cmp	r2, r3
 8003324:	d149      	bne.n	80033ba <Custom_STM_Event_Handler+0x2a6>
            return_value = SVCCTL_EvtAckFlowEnable;
 8003326:	2301      	movs	r3, #1
 8003328:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            aci_gatt_allow_read(read_req->Connection_Handle);
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	b29b      	uxth	r3, r3
 8003332:	4618      	mov	r0, r3
 8003334:	f005 fea8 	bl	8009088 <aci_gatt_allow_read>
          break;
 8003338:	e03f      	b.n	80033ba <Custom_STM_Event_Handler+0x2a6>
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	3302      	adds	r3, #2
 800333e:	61bb      	str	r3, [r7, #24]
          if(write_perm_req->Attribute_Handle == (CustomContext.CustomHrs_CtrlpHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	885b      	ldrh	r3, [r3, #2]
 8003344:	b29b      	uxth	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <Custom_STM_Event_Handler+0x2bc>)
 800334a:	899b      	ldrh	r3, [r3, #12]
 800334c:	3301      	adds	r3, #1
 800334e:	429a      	cmp	r2, r3
 8003350:	d135      	bne.n	80033be <Custom_STM_Event_Handler+0x2aa>
            return_value = SVCCTL_EvtAckFlowEnable;
 8003352:	2301      	movs	r3, #1
 8003354:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (write_perm_req->Data[0] == CUSTOM_STM_HRS_CNTL_POINT_RESET_ENERGY_EXPENDED)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	795b      	ldrb	r3, [r3, #5]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d117      	bne.n	8003390 <Custom_STM_Event_Handler+0x27c>
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	b298      	uxth	r0, r3
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	885b      	ldrh	r3, [r3, #2]
 800336a:	b299      	uxth	r1, r3
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	791b      	ldrb	r3, [r3, #4]
                                  (uint8_t *)&write_perm_req->Data[0]);
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8003374:	9201      	str	r2, [sp, #4]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	2300      	movs	r3, #0
 800337a:	2200      	movs	r2, #0
 800337c:	f005 fdd7 	bl	8008f2e <aci_gatt_write_resp>
              Notification.Custom_Evt_Opcode = CUSTOM_STM_HRS_CTRLP_WRITE_EVT;
 8003380:	2306      	movs	r3, #6
 8003382:	723b      	strb	r3, [r7, #8]
              Custom_STM_App_Notification(&Notification);
 8003384:	f107 0308 	add.w	r3, r7, #8
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fd7b 	bl	8002e84 <Custom_STM_App_Notification>
          break;
 800338e:	e016      	b.n	80033be <Custom_STM_Event_Handler+0x2aa>
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	b298      	uxth	r0, r3
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	885b      	ldrh	r3, [r3, #2]
 800339a:	b299      	uxth	r1, r3
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	791b      	ldrb	r3, [r3, #4]
                                  (uint8_t *)&write_perm_req->Data[0]);
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 80033a4:	9201      	str	r2, [sp, #4]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	2201      	movs	r2, #1
 80033ac:	f005 fdbf 	bl	8008f2e <aci_gatt_write_resp>
          break;
 80033b0:	e005      	b.n	80033be <Custom_STM_Event_Handler+0x2aa>
          break;
 80033b2:	bf00      	nop
 80033b4:	e006      	b.n	80033c4 <Custom_STM_Event_Handler+0x2b0>
          break;
 80033b6:	bf00      	nop
 80033b8:	e004      	b.n	80033c4 <Custom_STM_Event_Handler+0x2b0>
          break;
 80033ba:	bf00      	nop
 80033bc:	e002      	b.n	80033c4 <Custom_STM_Event_Handler+0x2b0>
          break;
 80033be:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80033c0:	e000      	b.n	80033c4 <Custom_STM_Event_Handler+0x2b0>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80033c2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80033c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}/* end Custom_STM_Event_Handler */
 80033c8:	4618      	mov	r0, r3
 80033ca:	3738      	adds	r7, #56	; 0x38
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	200001b8 	.word	0x200001b8
 80033d4:	0800ccac 	.word	0x0800ccac
 80033d8:	0800cf78 	.word	0x0800cf78
 80033dc:	0800cd00 	.word	0x0800cd00
 80033e0:	0800cd14 	.word	0x0800cd14
 80033e4:	0800cd28 	.word	0x0800cd28
 80033e8:	0800cd38 	.word	0x0800cd38

080033ec <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	; 0x28
 80033f0:	af06      	add	r7, sp, #24
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80033f2:	4873      	ldr	r0, [pc, #460]	; (80035c0 <SVCCTL_InitCustomSvc+0x1d4>)
 80033f4:	f007 face 	bl	800a994 <SVCCTL_RegisterSvcHandler>
   *                                2 for My_LED_Char +
   *                                2 for My_Switch_Char +
   *                              = 5
   */

  COPY_MY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 80033f8:	238f      	movs	r3, #143	; 0x8f
 80033fa:	703b      	strb	r3, [r7, #0]
 80033fc:	23e5      	movs	r3, #229	; 0xe5
 80033fe:	707b      	strb	r3, [r7, #1]
 8003400:	23b3      	movs	r3, #179	; 0xb3
 8003402:	70bb      	strb	r3, [r7, #2]
 8003404:	23d5      	movs	r3, #213	; 0xd5
 8003406:	70fb      	strb	r3, [r7, #3]
 8003408:	232e      	movs	r3, #46	; 0x2e
 800340a:	713b      	strb	r3, [r7, #4]
 800340c:	237f      	movs	r3, #127	; 0x7f
 800340e:	717b      	strb	r3, [r7, #5]
 8003410:	234a      	movs	r3, #74	; 0x4a
 8003412:	71bb      	strb	r3, [r7, #6]
 8003414:	2398      	movs	r3, #152	; 0x98
 8003416:	71fb      	strb	r3, [r7, #7]
 8003418:	232a      	movs	r3, #42	; 0x2a
 800341a:	723b      	strb	r3, [r7, #8]
 800341c:	2348      	movs	r3, #72	; 0x48
 800341e:	727b      	strb	r3, [r7, #9]
 8003420:	237a      	movs	r3, #122	; 0x7a
 8003422:	72bb      	strb	r3, [r7, #10]
 8003424:	23cc      	movs	r3, #204	; 0xcc
 8003426:	72fb      	strb	r3, [r7, #11]
 8003428:	2340      	movs	r3, #64	; 0x40
 800342a:	733b      	strb	r3, [r7, #12]
 800342c:	23fe      	movs	r3, #254	; 0xfe
 800342e:	737b      	strb	r3, [r7, #13]
 8003430:	2300      	movs	r3, #0
 8003432:	73bb      	strb	r3, [r7, #14]
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_service(UUID_TYPE_128,
 8003438:	4639      	mov	r1, r7
 800343a:	4b62      	ldr	r3, [pc, #392]	; (80035c4 <SVCCTL_InitCustomSvc+0x1d8>)
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	2305      	movs	r3, #5
 8003440:	2201      	movs	r2, #1
 8003442:	2002      	movs	r0, #2
 8003444:	f005 faec 	bl	8008a20 <aci_gatt_add_service>
                       &(CustomContext.CustomMy_P2PsHdle));

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 8003448:	2319      	movs	r3, #25
 800344a:	703b      	strb	r3, [r7, #0]
 800344c:	23ed      	movs	r3, #237	; 0xed
 800344e:	707b      	strb	r3, [r7, #1]
 8003450:	2382      	movs	r3, #130	; 0x82
 8003452:	70bb      	strb	r3, [r7, #2]
 8003454:	23ae      	movs	r3, #174	; 0xae
 8003456:	70fb      	strb	r3, [r7, #3]
 8003458:	23ed      	movs	r3, #237	; 0xed
 800345a:	713b      	strb	r3, [r7, #4]
 800345c:	2321      	movs	r3, #33	; 0x21
 800345e:	717b      	strb	r3, [r7, #5]
 8003460:	234c      	movs	r3, #76	; 0x4c
 8003462:	71bb      	strb	r3, [r7, #6]
 8003464:	239d      	movs	r3, #157	; 0x9d
 8003466:	71fb      	strb	r3, [r7, #7]
 8003468:	2341      	movs	r3, #65	; 0x41
 800346a:	723b      	strb	r3, [r7, #8]
 800346c:	2345      	movs	r3, #69	; 0x45
 800346e:	727b      	strb	r3, [r7, #9]
 8003470:	2322      	movs	r3, #34	; 0x22
 8003472:	72bb      	strb	r3, [r7, #10]
 8003474:	238e      	movs	r3, #142	; 0x8e
 8003476:	72fb      	strb	r3, [r7, #11]
 8003478:	2341      	movs	r3, #65	; 0x41
 800347a:	733b      	strb	r3, [r7, #12]
 800347c:	23fe      	movs	r3, #254	; 0xfe
 800347e:	737b      	strb	r3, [r7, #13]
 8003480:	2300      	movs	r3, #0
 8003482:	73bb      	strb	r3, [r7, #14]
 8003484:	2300      	movs	r3, #0
 8003486:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 8003488:	4b4e      	ldr	r3, [pc, #312]	; (80035c4 <SVCCTL_InitCustomSvc+0x1d8>)
 800348a:	8818      	ldrh	r0, [r3, #0]
 800348c:	2314      	movs	r3, #20
 800348e:	b29b      	uxth	r3, r3
 8003490:	463a      	mov	r2, r7
 8003492:	494d      	ldr	r1, [pc, #308]	; (80035c8 <SVCCTL_InitCustomSvc+0x1dc>)
 8003494:	9105      	str	r1, [sp, #20]
 8003496:	2101      	movs	r1, #1
 8003498:	9104      	str	r1, [sp, #16]
 800349a:	2110      	movs	r1, #16
 800349c:	9103      	str	r1, [sp, #12]
 800349e:	2105      	movs	r1, #5
 80034a0:	9102      	str	r1, [sp, #8]
 80034a2:	2100      	movs	r1, #0
 80034a4:	9101      	str	r1, [sp, #4]
 80034a6:	2106      	movs	r1, #6
 80034a8:	9100      	str	r1, [sp, #0]
 80034aa:	2102      	movs	r1, #2
 80034ac:	f005 fb8e 	bl	8008bcc <aci_gatt_add_char>
                    CHAR_VALUE_LEN_VARIABLE,
                    &(CustomContext.CustomLed_CHdle));
  /**
   *  My_Switch_Char
   */
  COPY_MY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 80034b0:	2319      	movs	r3, #25
 80034b2:	703b      	strb	r3, [r7, #0]
 80034b4:	23ed      	movs	r3, #237	; 0xed
 80034b6:	707b      	strb	r3, [r7, #1]
 80034b8:	2382      	movs	r3, #130	; 0x82
 80034ba:	70bb      	strb	r3, [r7, #2]
 80034bc:	23ae      	movs	r3, #174	; 0xae
 80034be:	70fb      	strb	r3, [r7, #3]
 80034c0:	23ed      	movs	r3, #237	; 0xed
 80034c2:	713b      	strb	r3, [r7, #4]
 80034c4:	2321      	movs	r3, #33	; 0x21
 80034c6:	717b      	strb	r3, [r7, #5]
 80034c8:	234c      	movs	r3, #76	; 0x4c
 80034ca:	71bb      	strb	r3, [r7, #6]
 80034cc:	239d      	movs	r3, #157	; 0x9d
 80034ce:	71fb      	strb	r3, [r7, #7]
 80034d0:	2341      	movs	r3, #65	; 0x41
 80034d2:	723b      	strb	r3, [r7, #8]
 80034d4:	2345      	movs	r3, #69	; 0x45
 80034d6:	727b      	strb	r3, [r7, #9]
 80034d8:	2322      	movs	r3, #34	; 0x22
 80034da:	72bb      	strb	r3, [r7, #10]
 80034dc:	238e      	movs	r3, #142	; 0x8e
 80034de:	72fb      	strb	r3, [r7, #11]
 80034e0:	2342      	movs	r3, #66	; 0x42
 80034e2:	733b      	strb	r3, [r7, #12]
 80034e4:	23fe      	movs	r3, #254	; 0xfe
 80034e6:	737b      	strb	r3, [r7, #13]
 80034e8:	2300      	movs	r3, #0
 80034ea:	73bb      	strb	r3, [r7, #14]
 80034ec:	2300      	movs	r3, #0
 80034ee:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 80034f0:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <SVCCTL_InitCustomSvc+0x1d8>)
 80034f2:	8818      	ldrh	r0, [r3, #0]
 80034f4:	2302      	movs	r3, #2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	463a      	mov	r2, r7
 80034fa:	4934      	ldr	r1, [pc, #208]	; (80035cc <SVCCTL_InitCustomSvc+0x1e0>)
 80034fc:	9105      	str	r1, [sp, #20]
 80034fe:	2101      	movs	r1, #1
 8003500:	9104      	str	r1, [sp, #16]
 8003502:	2110      	movs	r1, #16
 8003504:	9103      	str	r1, [sp, #12]
 8003506:	2105      	movs	r1, #5
 8003508:	9102      	str	r1, [sp, #8]
 800350a:	2100      	movs	r1, #0
 800350c:	9101      	str	r1, [sp, #4]
 800350e:	2102      	movs	r1, #2
 8003510:	9100      	str	r1, [sp, #0]
 8003512:	2102      	movs	r1, #2
 8003514:	f005 fb5a 	bl	8008bcc <aci_gatt_add_char>
   *                                2 for My_HRS_CTRL_Point +
   *                                1 for My_HRS_Meas configuration descriptor +
   *                              = 8
   */

  uuid.Char_UUID_16 = 0x180d;
 8003518:	f641 030d 	movw	r3, #6157	; 0x180d
 800351c:	803b      	strh	r3, [r7, #0]
  aci_gatt_add_service(UUID_TYPE_16,
 800351e:	4639      	mov	r1, r7
 8003520:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <SVCCTL_InitCustomSvc+0x1e4>)
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2308      	movs	r3, #8
 8003526:	2201      	movs	r2, #1
 8003528:	2001      	movs	r0, #1
 800352a:	f005 fa79 	bl	8008a20 <aci_gatt_add_service>
                       &(CustomContext.CustomMy_HrsHdle));

  /**
   *  My_HRS_Meas
   */
  uuid.Char_UUID_16 = 0x2a37;
 800352e:	f642 2337 	movw	r3, #10807	; 0x2a37
 8003532:	803b      	strh	r3, [r7, #0]
  aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 8003534:	4b23      	ldr	r3, [pc, #140]	; (80035c4 <SVCCTL_InitCustomSvc+0x1d8>)
 8003536:	88d8      	ldrh	r0, [r3, #6]
 8003538:	2305      	movs	r3, #5
 800353a:	b29b      	uxth	r3, r3
 800353c:	463a      	mov	r2, r7
 800353e:	4925      	ldr	r1, [pc, #148]	; (80035d4 <SVCCTL_InitCustomSvc+0x1e8>)
 8003540:	9105      	str	r1, [sp, #20]
 8003542:	2101      	movs	r1, #1
 8003544:	9104      	str	r1, [sp, #16]
 8003546:	2110      	movs	r1, #16
 8003548:	9103      	str	r1, [sp, #12]
 800354a:	2100      	movs	r1, #0
 800354c:	9102      	str	r1, [sp, #8]
 800354e:	2100      	movs	r1, #0
 8003550:	9101      	str	r1, [sp, #4]
 8003552:	2110      	movs	r1, #16
 8003554:	9100      	str	r1, [sp, #0]
 8003556:	2101      	movs	r1, #1
 8003558:	f005 fb38 	bl	8008bcc <aci_gatt_add_char>
                    CHAR_VALUE_LEN_VARIABLE,
                    &(CustomContext.CustomHrs_MHdle));
  /**
   *  My_Sensor_Loc
   */
  uuid.Char_UUID_16 = 0x2a38;
 800355c:	f642 2338 	movw	r3, #10808	; 0x2a38
 8003560:	803b      	strh	r3, [r7, #0]
  aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 8003562:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <SVCCTL_InitCustomSvc+0x1d8>)
 8003564:	88d8      	ldrh	r0, [r3, #6]
 8003566:	2301      	movs	r3, #1
 8003568:	b29b      	uxth	r3, r3
 800356a:	463a      	mov	r2, r7
 800356c:	491a      	ldr	r1, [pc, #104]	; (80035d8 <SVCCTL_InitCustomSvc+0x1ec>)
 800356e:	9105      	str	r1, [sp, #20]
 8003570:	2100      	movs	r1, #0
 8003572:	9104      	str	r1, [sp, #16]
 8003574:	2110      	movs	r1, #16
 8003576:	9103      	str	r1, [sp, #12]
 8003578:	2100      	movs	r1, #0
 800357a:	9102      	str	r1, [sp, #8]
 800357c:	2100      	movs	r1, #0
 800357e:	9101      	str	r1, [sp, #4]
 8003580:	2102      	movs	r1, #2
 8003582:	9100      	str	r1, [sp, #0]
 8003584:	2101      	movs	r1, #1
 8003586:	f005 fb21 	bl	8008bcc <aci_gatt_add_char>
                    CHAR_VALUE_LEN_CONSTANT,
                    &(CustomContext.CustomHrs_SlHdle));
  /**
   *  My_HRS_CTRL_Point
   */
  uuid.Char_UUID_16 = 0x2a39;
 800358a:	f642 2339 	movw	r3, #10809	; 0x2a39
 800358e:	803b      	strh	r3, [r7, #0]
  aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <SVCCTL_InitCustomSvc+0x1d8>)
 8003592:	88d8      	ldrh	r0, [r3, #6]
 8003594:	2301      	movs	r3, #1
 8003596:	b29b      	uxth	r3, r3
 8003598:	463a      	mov	r2, r7
 800359a:	4910      	ldr	r1, [pc, #64]	; (80035dc <SVCCTL_InitCustomSvc+0x1f0>)
 800359c:	9105      	str	r1, [sp, #20]
 800359e:	2100      	movs	r1, #0
 80035a0:	9104      	str	r1, [sp, #16]
 80035a2:	2110      	movs	r1, #16
 80035a4:	9103      	str	r1, [sp, #12]
 80035a6:	2102      	movs	r1, #2
 80035a8:	9102      	str	r1, [sp, #8]
 80035aa:	2100      	movs	r1, #0
 80035ac:	9101      	str	r1, [sp, #4]
 80035ae:	2108      	movs	r1, #8
 80035b0:	9100      	str	r1, [sp, #0]
 80035b2:	2101      	movs	r1, #1
 80035b4:	f005 fb0a 	bl	8008bcc <aci_gatt_add_char>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80035b8:	bf00      	nop
}
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	08003115 	.word	0x08003115
 80035c4:	200001b8 	.word	0x200001b8
 80035c8:	200001ba 	.word	0x200001ba
 80035cc:	200001bc 	.word	0x200001bc
 80035d0:	200001be 	.word	0x200001be
 80035d4:	200001c0 	.word	0x200001c0
 80035d8:	200001c2 	.word	0x200001c2
 80035dc:	200001c4 	.word	0x200001c4

080035e0 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	4603      	mov	r3, r0
 80035e8:	6039      	str	r1, [r7, #0]
 80035ea:	71fb      	strb	r3, [r7, #7]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 80035ec:	2392      	movs	r3, #146	; 0x92
 80035ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch(CharOpcode)
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d851      	bhi.n	800369a <Custom_STM_App_Update_Char+0xba>
 80035f6:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <Custom_STM_App_Update_Char+0x1c>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	08003611 	.word	0x08003611
 8003600:	0800362b 	.word	0x0800362b
 8003604:	08003647 	.word	0x08003647
 8003608:	08003663 	.word	0x08003663
 800360c:	0800367f 	.word	0x0800367f
  {

    case CUSTOM_STM_LED_C:
      result = aci_gatt_update_char_value(CustomContext.CustomMy_P2PsHdle,
 8003610:	4b25      	ldr	r3, [pc, #148]	; (80036a8 <Custom_STM_App_Update_Char+0xc8>)
 8003612:	8818      	ldrh	r0, [r3, #0]
 8003614:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <Custom_STM_App_Update_Char+0xc8>)
 8003616:	8859      	ldrh	r1, [r3, #2]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	2306      	movs	r3, #6
 800361e:	2200      	movs	r2, #0
 8003620:	f005 fbdc 	bl	8008ddc <aci_gatt_update_char_value>
 8003624:	4603      	mov	r3, r0
 8003626:	73fb      	strb	r3, [r7, #15]
                                          0, /* charValOffset */
                                          6, /* charValueLen */
                                          (uint8_t *)  pPayload);
      /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1*/
      /* USER CODE END CUSTOM_STM_Service_1_Char_1*/
      break;
 8003628:	e038      	b.n	800369c <Custom_STM_App_Update_Char+0xbc>

    case CUSTOM_STM_SWITCH_C:
      result = aci_gatt_update_char_value(CustomContext.CustomMy_P2PsHdle,
 800362a:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <Custom_STM_App_Update_Char+0xc8>)
 800362c:	8818      	ldrh	r0, [r3, #0]
 800362e:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <Custom_STM_App_Update_Char+0xc8>)
 8003630:	8899      	ldrh	r1, [r3, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	4613      	mov	r3, r2
 800363a:	2200      	movs	r2, #0
 800363c:	f005 fbce 	bl	8008ddc <aci_gatt_update_char_value>
 8003640:	4603      	mov	r3, r0
 8003642:	73fb      	strb	r3, [r7, #15]
      /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2*/
            /**
            *  Manage My_Switch_Char Characteristic, Notify descriptor
            */
      /* USER CODE END CUSTOM_STM_Service_1_Char_2*/
      break;
 8003644:	e02a      	b.n	800369c <Custom_STM_App_Update_Char+0xbc>

    case CUSTOM_STM_HRS_M:
      result = aci_gatt_update_char_value(CustomContext.CustomMy_HrsHdle,
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <Custom_STM_App_Update_Char+0xc8>)
 8003648:	88d8      	ldrh	r0, [r3, #6]
 800364a:	4b17      	ldr	r3, [pc, #92]	; (80036a8 <Custom_STM_App_Update_Char+0xc8>)
 800364c:	8919      	ldrh	r1, [r3, #8]
 800364e:	2205      	movs	r2, #5
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	4613      	mov	r3, r2
 8003656:	2200      	movs	r2, #0
 8003658:	f005 fbc0 	bl	8008ddc <aci_gatt_update_char_value>
 800365c:	4603      	mov	r3, r0
 800365e:	73fb      	strb	r3, [r7, #15]
      /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1*/
            /**
             *  Manage My_HRS_Meas Characteristic, Notify descriptor
            */
      /* USER CODE END CUSTOM_STM_Service_2_Char_1*/
      break;
 8003660:	e01c      	b.n	800369c <Custom_STM_App_Update_Char+0xbc>

    case CUSTOM_STM_HRS_SL:
      result = aci_gatt_update_char_value(CustomContext.CustomMy_HrsHdle,
 8003662:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <Custom_STM_App_Update_Char+0xc8>)
 8003664:	88d8      	ldrh	r0, [r3, #6]
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <Custom_STM_App_Update_Char+0xc8>)
 8003668:	8959      	ldrh	r1, [r3, #10]
 800366a:	2201      	movs	r2, #1
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	2200      	movs	r2, #0
 8003674:	f005 fbb2 	bl	8008ddc <aci_gatt_update_char_value>
 8003678:	4603      	mov	r3, r0
 800367a:	73fb      	strb	r3, [r7, #15]
                                          SizeHrs_Sl, /* charValueLen */
                                          (uint8_t *)  pPayload);
      /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_2*/

      /* USER CODE END CUSTOM_STM_Service_2_Char_2*/
      break;
 800367c:	e00e      	b.n	800369c <Custom_STM_App_Update_Char+0xbc>

    case CUSTOM_STM_HRS_CTRLP:
      result = aci_gatt_update_char_value(CustomContext.CustomMy_HrsHdle,
 800367e:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <Custom_STM_App_Update_Char+0xc8>)
 8003680:	88d8      	ldrh	r0, [r3, #6]
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <Custom_STM_App_Update_Char+0xc8>)
 8003684:	8999      	ldrh	r1, [r3, #12]
 8003686:	2201      	movs	r2, #1
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	2200      	movs	r2, #0
 8003690:	f005 fba4 	bl	8008ddc <aci_gatt_update_char_value>
 8003694:	4603      	mov	r3, r0
 8003696:	73fb      	strb	r3, [r7, #15]
                                          SizeHrs_Ctrlp, /* charValueLen */
                                          (uint8_t *)  pPayload);
      /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_3*/

      /* USER CODE END CUSTOM_STM_Service_2_Char_3*/
      break;
 8003698:	e000      	b.n	800369c <Custom_STM_App_Update_Char+0xbc>

    default:
      break;
 800369a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return result;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	200001b8 	.word	0x200001b8

080036ac <LL_PWR_EnableBootC2>:
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <LL_PWR_EnableBootC2+0x1c>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <LL_PWR_EnableBootC2+0x1c>)
 80036b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ba:	60d3      	str	r3, [r2, #12]
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	58000400 	.word	0x58000400

080036cc <LL_C2_EXTI_EnableEvent_32_63>:
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80036d6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80036da:	4905      	ldr	r1, [pc, #20]	; (80036f0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	58000800 	.word	0x58000800

080036f4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80036fe:	6a1a      	ldr	r2, [r3, #32]
 8003700:	4904      	ldr	r1, [pc, #16]	; (8003714 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4313      	orrs	r3, r2
 8003706:	620b      	str	r3, [r1, #32]
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	58000800 	.word	0x58000800

08003718 <LL_AHB3_GRP1_EnableClock>:
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003724:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003726:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4313      	orrs	r3, r2
 800372e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003734:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4013      	ands	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800373c:	68fb      	ldr	r3, [r7, #12]
}
 800373e:	bf00      	nop
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8003752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003756:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800375a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8003766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4013      	ands	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003774:	68fb      	ldr	r3, [r7, #12]
}
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <LL_C1_IPCC_EnableIT_TXF>:
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	601a      	str	r2, [r3, #0]
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <LL_C1_IPCC_EnableIT_RXO>:
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f043 0201 	orr.w	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	601a      	str	r2, [r3, #0]
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <LL_C1_IPCC_EnableTransmitChannel>:
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	041b      	lsls	r3, r3, #16
 80037d4:	43db      	mvns	r3, r3
 80037d6:	401a      	ands	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	605a      	str	r2, [r3, #4]
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	041b      	lsls	r3, r3, #16
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	605a      	str	r2, [r3, #4]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_C1_IPCC_EnableReceiveChannel>:
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	43db      	mvns	r3, r3
 800381e:	401a      	ands	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	605a      	str	r2, [r3, #4]
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	609a      	str	r2, [r3, #8]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <LL_C1_IPCC_SetFlag_CHx>:
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	041a      	lsls	r2, r3, #16
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	609a      	str	r2, [r3, #8]
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	4013      	ands	r3, r2
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d101      	bne.n	8003886 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	4013      	ands	r3, r2
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d101      	bne.n	80038b0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80038c4:	2102      	movs	r1, #2
 80038c6:	4819      	ldr	r0, [pc, #100]	; (800392c <HW_IPCC_Rx_Handler+0x6c>)
 80038c8:	f7ff ffe4 	bl	8003894 <LL_C2_IPCC_IsActiveFlag_CHx>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <HW_IPCC_Rx_Handler+0x26>
 80038d2:	4b16      	ldr	r3, [pc, #88]	; (800392c <HW_IPCC_Rx_Handler+0x6c>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80038e0:	f000 f8da 	bl	8003a98 <HW_IPCC_SYS_EvtHandler>
 80038e4:	e01f      	b.n	8003926 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80038e6:	2101      	movs	r1, #1
 80038e8:	4810      	ldr	r0, [pc, #64]	; (800392c <HW_IPCC_Rx_Handler+0x6c>)
 80038ea:	f7ff ffd3 	bl	8003894 <LL_C2_IPCC_IsActiveFlag_CHx>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HW_IPCC_Rx_Handler+0x46>
 80038f4:	4b0d      	ldr	r3, [pc, #52]	; (800392c <HW_IPCC_Rx_Handler+0x6c>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d102      	bne.n	8003906 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8003900:	f000 f88e 	bl	8003a20 <HW_IPCC_BLE_EvtHandler>
 8003904:	e00f      	b.n	8003926 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8003906:	2108      	movs	r1, #8
 8003908:	4808      	ldr	r0, [pc, #32]	; (800392c <HW_IPCC_Rx_Handler+0x6c>)
 800390a:	f7ff ffc3 	bl	8003894 <LL_C2_IPCC_IsActiveFlag_CHx>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d009      	beq.n	8003928 <HW_IPCC_Rx_Handler+0x68>
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <HW_IPCC_Rx_Handler+0x6c>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	43db      	mvns	r3, r3
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8003922:	f000 f905 	bl	8003b30 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8003926:	bf00      	nop
 8003928:	bf00      	nop
}
 800392a:	bd80      	pop	{r7, pc}
 800392c:	58000c00 	.word	0x58000c00

08003930 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8003934:	2102      	movs	r1, #2
 8003936:	481a      	ldr	r0, [pc, #104]	; (80039a0 <HW_IPCC_Tx_Handler+0x70>)
 8003938:	f7ff ff97 	bl	800386a <LL_C1_IPCC_IsActiveFlag_CHx>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HW_IPCC_Tx_Handler+0x26>
 8003942:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <HW_IPCC_Tx_Handler+0x70>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	43db      	mvns	r3, r3
 8003948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8003950:	f000 f896 	bl	8003a80 <HW_IPCC_SYS_CmdEvtHandler>
 8003954:	e020      	b.n	8003998 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8003956:	2108      	movs	r1, #8
 8003958:	4811      	ldr	r0, [pc, #68]	; (80039a0 <HW_IPCC_Tx_Handler+0x70>)
 800395a:	f7ff ff86 	bl	800386a <LL_C1_IPCC_IsActiveFlag_CHx>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d109      	bne.n	8003978 <HW_IPCC_Tx_Handler+0x48>
 8003964:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <HW_IPCC_Tx_Handler+0x70>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	43db      	mvns	r3, r3
 800396a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8003972:	f000 f8bf 	bl	8003af4 <HW_IPCC_MM_FreeBufHandler>
 8003976:	e00f      	b.n	8003998 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8003978:	2120      	movs	r1, #32
 800397a:	4809      	ldr	r0, [pc, #36]	; (80039a0 <HW_IPCC_Tx_Handler+0x70>)
 800397c:	f7ff ff75 	bl	800386a <LL_C1_IPCC_IsActiveFlag_CHx>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <HW_IPCC_Tx_Handler+0x6a>
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HW_IPCC_Tx_Handler+0x70>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	43db      	mvns	r3, r3
 800398c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8003994:	f000 f850 	bl	8003a38 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8003998:	bf00      	nop
 800399a:	bf00      	nop
}
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	58000c00 	.word	0x58000c00

080039a4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80039a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80039ac:	f7ff fecd 	bl	800374a <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80039b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80039b4:	f7ff fe8a 	bl	80036cc <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80039b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80039bc:	f7ff fe9a 	bl	80036f4 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80039c0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80039c2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80039c4:	f7ff fe72 	bl	80036ac <LL_PWR_EnableBootC2>

  return;
 80039c8:	bf00      	nop
}
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80039d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80039d4:	f7ff fea0 	bl	8003718 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80039d8:	4806      	ldr	r0, [pc, #24]	; (80039f4 <HW_IPCC_Init+0x28>)
 80039da:	f7ff fee2 	bl	80037a2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80039de:	4805      	ldr	r0, [pc, #20]	; (80039f4 <HW_IPCC_Init+0x28>)
 80039e0:	f7ff fecf 	bl	8003782 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80039e4:	202c      	movs	r0, #44	; 0x2c
 80039e6:	f000 fb44 	bl	8004072 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80039ea:	202d      	movs	r0, #45	; 0x2d
 80039ec:	f000 fb41 	bl	8004072 <HAL_NVIC_EnableIRQ>

  return;
 80039f0:	bf00      	nop
}
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	58000c00 	.word	0x58000c00

080039f8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80039fc:	2101      	movs	r1, #1
 80039fe:	4802      	ldr	r0, [pc, #8]	; (8003a08 <HW_IPCC_BLE_Init+0x10>)
 8003a00:	f7ff ff04 	bl	800380c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003a04:	bf00      	nop
}
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	58000c00 	.word	0x58000c00

08003a0c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8003a10:	2101      	movs	r1, #1
 8003a12:	4802      	ldr	r0, [pc, #8]	; (8003a1c <HW_IPCC_BLE_SendCmd+0x10>)
 8003a14:	f7ff ff1a 	bl	800384c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003a18:	bf00      	nop
}
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	58000c00 	.word	0x58000c00

08003a20 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8003a24:	f007 f8b4 	bl	800ab90 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8003a28:	2101      	movs	r1, #1
 8003a2a:	4802      	ldr	r0, [pc, #8]	; (8003a34 <HW_IPCC_BLE_EvtHandler+0x14>)
 8003a2c:	f7ff ff00 	bl	8003830 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003a30:	bf00      	nop
}
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	58000c00 	.word	0x58000c00

08003a38 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8003a3c:	2120      	movs	r1, #32
 8003a3e:	4803      	ldr	r0, [pc, #12]	; (8003a4c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8003a40:	f7ff fed2 	bl	80037e8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8003a44:	f007 f8d4 	bl	800abf0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8003a48:	bf00      	nop
}
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	58000c00 	.word	0x58000c00

08003a50 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003a54:	2102      	movs	r1, #2
 8003a56:	4802      	ldr	r0, [pc, #8]	; (8003a60 <HW_IPCC_SYS_Init+0x10>)
 8003a58:	f7ff fed8 	bl	800380c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003a5c:	bf00      	nop
}
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	58000c00 	.word	0x58000c00

08003a64 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003a68:	2102      	movs	r1, #2
 8003a6a:	4804      	ldr	r0, [pc, #16]	; (8003a7c <HW_IPCC_SYS_SendCmd+0x18>)
 8003a6c:	f7ff feee 	bl	800384c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003a70:	2102      	movs	r1, #2
 8003a72:	4802      	ldr	r0, [pc, #8]	; (8003a7c <HW_IPCC_SYS_SendCmd+0x18>)
 8003a74:	f7ff fea5 	bl	80037c2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8003a78:	bf00      	nop
}
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	58000c00 	.word	0x58000c00

08003a80 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003a84:	2102      	movs	r1, #2
 8003a86:	4803      	ldr	r0, [pc, #12]	; (8003a94 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8003a88:	f7ff feae 	bl	80037e8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8003a8c:	f007 f900 	bl	800ac90 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8003a90:	bf00      	nop
}
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	58000c00 	.word	0x58000c00

08003a98 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8003a9c:	f007 f90e 	bl	800acbc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003aa0:	2102      	movs	r1, #2
 8003aa2:	4802      	ldr	r0, [pc, #8]	; (8003aac <HW_IPCC_SYS_EvtHandler+0x14>)
 8003aa4:	f7ff fec4 	bl	8003830 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003aa8:	bf00      	nop
}
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	58000c00 	.word	0x58000c00

08003ab0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8003ab8:	2108      	movs	r1, #8
 8003aba:	480c      	ldr	r0, [pc, #48]	; (8003aec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003abc:	f7ff fed5 	bl	800386a <LL_C1_IPCC_IsActiveFlag_CHx>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d007      	beq.n	8003ad6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003acc:	2108      	movs	r1, #8
 8003ace:	4807      	ldr	r0, [pc, #28]	; (8003aec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003ad0:	f7ff fe77 	bl	80037c2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003ad4:	e006      	b.n	8003ae4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003ada:	2108      	movs	r1, #8
 8003adc:	4803      	ldr	r0, [pc, #12]	; (8003aec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003ade:	f7ff feb5 	bl	800384c <LL_C1_IPCC_SetFlag_CHx>
  return;
 8003ae2:	bf00      	nop
}
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	58000c00 	.word	0x58000c00
 8003af0:	2000069c 	.word	0x2000069c

08003af4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003af8:	2108      	movs	r1, #8
 8003afa:	4806      	ldr	r0, [pc, #24]	; (8003b14 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003afc:	f7ff fe74 	bl	80037e8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003b06:	2108      	movs	r1, #8
 8003b08:	4802      	ldr	r0, [pc, #8]	; (8003b14 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003b0a:	f7ff fe9f 	bl	800384c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003b0e:	bf00      	nop
}
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	58000c00 	.word	0x58000c00
 8003b18:	2000069c 	.word	0x2000069c

08003b1c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003b20:	2108      	movs	r1, #8
 8003b22:	4802      	ldr	r0, [pc, #8]	; (8003b2c <HW_IPCC_TRACES_Init+0x10>)
 8003b24:	f7ff fe72 	bl	800380c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003b28:	bf00      	nop
}
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	58000c00 	.word	0x58000c00

08003b30 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8003b34:	f007 f96a 	bl	800ae0c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003b38:	2108      	movs	r1, #8
 8003b3a:	4802      	ldr	r0, [pc, #8]	; (8003b44 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8003b3c:	f7ff fe78 	bl	8003830 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003b40:	bf00      	nop
}
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	58000c00 	.word	0x58000c00

08003b48 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003b48:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b4a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b4c:	3304      	adds	r3, #4

08003b4e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b4e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b50:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003b52:	d3f9      	bcc.n	8003b48 <CopyDataInit>
  bx lr
 8003b54:	4770      	bx	lr

08003b56 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003b56:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003b58:	3004      	adds	r0, #4

08003b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003b5a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003b5c:	d3fb      	bcc.n	8003b56 <FillZerobss>
  bx lr
 8003b5e:	4770      	bx	lr

08003b60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b60:	480c      	ldr	r0, [pc, #48]	; (8003b94 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003b62:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b64:	f000 f828 	bl	8003bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003b68:	480b      	ldr	r0, [pc, #44]	; (8003b98 <LoopForever+0x8>)
 8003b6a:	490c      	ldr	r1, [pc, #48]	; (8003b9c <LoopForever+0xc>)
 8003b6c:	4a0c      	ldr	r2, [pc, #48]	; (8003ba0 <LoopForever+0x10>)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f7ff ffed 	bl	8003b4e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003b74:	480b      	ldr	r0, [pc, #44]	; (8003ba4 <LoopForever+0x14>)
 8003b76:	490c      	ldr	r1, [pc, #48]	; (8003ba8 <LoopForever+0x18>)
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f7ff ffee 	bl	8003b5a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003b7e:	480b      	ldr	r0, [pc, #44]	; (8003bac <LoopForever+0x1c>)
 8003b80:	490b      	ldr	r1, [pc, #44]	; (8003bb0 <LoopForever+0x20>)
 8003b82:	2300      	movs	r3, #0
 8003b84:	f7ff ffe9 	bl	8003b5a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003b88:	f007 fc30 	bl	800b3ec <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003b8c:	f7fe f94c 	bl	8001e28 <main>

08003b90 <LoopForever>:

LoopForever:
  b LoopForever
 8003b90:	e7fe      	b.n	8003b90 <LoopForever>
 8003b92:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003b94:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003b98:	20000008 	.word	0x20000008
 8003b9c:	20000094 	.word	0x20000094
 8003ba0:	0800d114 	.word	0x0800d114
  INIT_BSS _sbss, _ebss
 8003ba4:	20000214 	.word	0x20000214
 8003ba8:	200017e8 	.word	0x200017e8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003bac:	200301e0 	.word	0x200301e0
 8003bb0:	20030a57 	.word	0x20030a57

08003bb4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003bb4:	e7fe      	b.n	8003bb4 <ADC1_IRQHandler>
	...

08003bb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003bbc:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <SystemInit+0xa0>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003bc2:	4b25      	ldr	r3, [pc, #148]	; (8003c58 <SystemInit+0xa0>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc8:	4a23      	ldr	r2, [pc, #140]	; (8003c58 <SystemInit+0xa0>)
 8003bca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003bea:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bf6:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <SystemInit+0xa4>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c08:	f023 0305 	bic.w	r3, r3, #5
 8003c0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c28:	4a0d      	ldr	r2, [pc, #52]	; (8003c60 <SystemInit+0xa8>)
 8003c2a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c30:	4a0b      	ldr	r2, [pc, #44]	; (8003c60 <SystemInit+0xa8>)
 8003c32:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c48:	2200      	movs	r2, #0
 8003c4a:	619a      	str	r2, [r3, #24]
}
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e000ed00 	.word	0xe000ed00
 8003c5c:	faf6fefb 	.word	0xfaf6fefb
 8003c60:	22041000 	.word	0x22041000

08003c64 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003c68:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6053      	str	r3, [r2, #4]
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	e0042000 	.word	0xe0042000

08003c84 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003c8e:	f043 0302 	orr.w	r3, r3, #2
 8003c92:	6053      	str	r3, [r2, #4]
}
 8003c94:	bf00      	nop
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	e0042000 	.word	0xe0042000

08003ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cae:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <HAL_Init+0x3c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <HAL_Init+0x3c>)
 8003cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cba:	2003      	movs	r0, #3
 8003cbc:	f000 f9b4 	bl	8004028 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	f000 f80f 	bl	8003ce4 <HAL_InitTick>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	71fb      	strb	r3, [r7, #7]
 8003cd0:	e001      	b.n	8003cd6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003cd2:	f7fe fab6 	bl	8002242 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	58004000 	.word	0x58004000

08003ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003cf0:	4b17      	ldr	r3, [pc, #92]	; (8003d50 <HAL_InitTick+0x6c>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d024      	beq.n	8003d42 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003cf8:	f002 f872 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <HAL_InitTick+0x6c>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	4619      	mov	r1, r3
 8003d04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d08:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 f9ca 	bl	80040aa <HAL_SYSTICK_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10f      	bne.n	8003d3c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b0f      	cmp	r3, #15
 8003d20:	d809      	bhi.n	8003d36 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d22:	2200      	movs	r2, #0
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d2a:	f000 f988 	bl	800403e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d2e:	4a09      	ldr	r2, [pc, #36]	; (8003d54 <HAL_InitTick+0x70>)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	e007      	b.n	8003d46 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
 8003d3a:	e004      	b.n	8003d46 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	73fb      	strb	r3, [r7, #15]
 8003d40:	e001      	b.n	8003d46 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20000024 	.word	0x20000024
 8003d54:	20000020 	.word	0x20000020

08003d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_IncTick+0x20>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <HAL_IncTick+0x24>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4413      	add	r3, r2
 8003d68:	4a04      	ldr	r2, [pc, #16]	; (8003d7c <HAL_IncTick+0x24>)
 8003d6a:	6013      	str	r3, [r2, #0]
}
 8003d6c:	bf00      	nop
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000024 	.word	0x20000024
 8003d7c:	200006a0 	.word	0x200006a0

08003d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return uwTick;
 8003d84:	4b03      	ldr	r3, [pc, #12]	; (8003d94 <HAL_GetTick+0x14>)
 8003d86:	681b      	ldr	r3, [r3, #0]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	200006a0 	.word	0x200006a0

08003d98 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003d9c:	4b03      	ldr	r3, [pc, #12]	; (8003dac <HAL_GetTickPrio+0x14>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	20000020 	.word	0x20000020

08003db0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003db4:	f7ff ff56 	bl	8003c64 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003db8:	bf00      	nop
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003dc0:	f7ff ff60 	bl	8003c84 <LL_DBGMCU_EnableDBGStopMode>
}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <__NVIC_SetPriorityGrouping+0x44>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003de4:	4013      	ands	r3, r2
 8003de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dfa:	4a04      	ldr	r2, [pc, #16]	; (8003e0c <__NVIC_SetPriorityGrouping+0x44>)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	60d3      	str	r3, [r2, #12]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e14:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <__NVIC_GetPriorityGrouping+0x18>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	0a1b      	lsrs	r3, r3, #8
 8003e1a:	f003 0307 	and.w	r3, r3, #7
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	db0b      	blt.n	8003e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	f003 021f 	and.w	r2, r3, #31
 8003e44:	4907      	ldr	r1, [pc, #28]	; (8003e64 <__NVIC_EnableIRQ+0x38>)
 8003e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	e000e100 	.word	0xe000e100

08003e68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	db12      	blt.n	8003ea0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	f003 021f 	and.w	r2, r3, #31
 8003e80:	490a      	ldr	r1, [pc, #40]	; (8003eac <__NVIC_DisableIRQ+0x44>)
 8003e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	2001      	movs	r0, #1
 8003e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e8e:	3320      	adds	r3, #32
 8003e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e94:	f3bf 8f4f 	dsb	sy
}
 8003e98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e9a:	f3bf 8f6f 	isb	sy
}
 8003e9e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	e000e100 	.word	0xe000e100

08003eb0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	db0c      	blt.n	8003edc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	f003 021f 	and.w	r2, r3, #31
 8003ec8:	4907      	ldr	r1, [pc, #28]	; (8003ee8 <__NVIC_SetPendingIRQ+0x38>)
 8003eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ed6:	3340      	adds	r3, #64	; 0x40
 8003ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	e000e100 	.word	0xe000e100

08003eec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	db0c      	blt.n	8003f18 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	f003 021f 	and.w	r2, r3, #31
 8003f04:	4907      	ldr	r1, [pc, #28]	; (8003f24 <__NVIC_ClearPendingIRQ+0x38>)
 8003f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f12:	3360      	adds	r3, #96	; 0x60
 8003f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	e000e100 	.word	0xe000e100

08003f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	6039      	str	r1, [r7, #0]
 8003f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	db0a      	blt.n	8003f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	490c      	ldr	r1, [pc, #48]	; (8003f74 <__NVIC_SetPriority+0x4c>)
 8003f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f46:	0112      	lsls	r2, r2, #4
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f50:	e00a      	b.n	8003f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	4908      	ldr	r1, [pc, #32]	; (8003f78 <__NVIC_SetPriority+0x50>)
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	3b04      	subs	r3, #4
 8003f60:	0112      	lsls	r2, r2, #4
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	440b      	add	r3, r1
 8003f66:	761a      	strb	r2, [r3, #24]
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000e100 	.word	0xe000e100
 8003f78:	e000ed00 	.word	0xe000ed00

08003f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b089      	sub	sp, #36	; 0x24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f1c3 0307 	rsb	r3, r3, #7
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	bf28      	it	cs
 8003f9a:	2304      	movcs	r3, #4
 8003f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	d902      	bls.n	8003fac <NVIC_EncodePriority+0x30>
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3b03      	subs	r3, #3
 8003faa:	e000      	b.n	8003fae <NVIC_EncodePriority+0x32>
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43da      	mvns	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	fa01 f303 	lsl.w	r3, r1, r3
 8003fce:	43d9      	mvns	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd4:	4313      	orrs	r3, r2
         );
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3724      	adds	r7, #36	; 0x24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ff4:	d301      	bcc.n	8003ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e00f      	b.n	800401a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ffa:	4a0a      	ldr	r2, [pc, #40]	; (8004024 <SysTick_Config+0x40>)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004002:	210f      	movs	r1, #15
 8004004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004008:	f7ff ff8e 	bl	8003f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <SysTick_Config+0x40>)
 800400e:	2200      	movs	r2, #0
 8004010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004012:	4b04      	ldr	r3, [pc, #16]	; (8004024 <SysTick_Config+0x40>)
 8004014:	2207      	movs	r2, #7
 8004016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	e000e010 	.word	0xe000e010

08004028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff fec9 	bl	8003dc8 <__NVIC_SetPriorityGrouping>
}
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b086      	sub	sp, #24
 8004042:	af00      	add	r7, sp, #0
 8004044:	4603      	mov	r3, r0
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800404c:	f7ff fee0 	bl	8003e10 <__NVIC_GetPriorityGrouping>
 8004050:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	6978      	ldr	r0, [r7, #20]
 8004058:	f7ff ff90 	bl	8003f7c <NVIC_EncodePriority>
 800405c:	4602      	mov	r2, r0
 800405e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ff5f 	bl	8003f28 <__NVIC_SetPriority>
}
 800406a:	bf00      	nop
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	4603      	mov	r3, r0
 800407a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800407c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff fed3 	bl	8003e2c <__NVIC_EnableIRQ>
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	4603      	mov	r3, r0
 8004096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fee3 	bl	8003e68 <__NVIC_DisableIRQ>
}
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff ff96 	bl	8003fe4 <SysTick_Config>
 80040b8:	4603      	mov	r3, r0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	4603      	mov	r3, r0
 80040ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80040cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff feed 	bl	8003eb0 <__NVIC_SetPendingIRQ>
}
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b082      	sub	sp, #8
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	4603      	mov	r3, r0
 80040e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80040e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff fefd 	bl	8003eec <__NVIC_ClearPendingIRQ>
}
 80040f2:	bf00      	nop
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e08e      	b.n	800422c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	4b47      	ldr	r3, [pc, #284]	; (8004234 <HAL_DMA_Init+0x138>)
 8004116:	429a      	cmp	r2, r3
 8004118:	d80f      	bhi.n	800413a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	4b45      	ldr	r3, [pc, #276]	; (8004238 <HAL_DMA_Init+0x13c>)
 8004122:	4413      	add	r3, r2
 8004124:	4a45      	ldr	r2, [pc, #276]	; (800423c <HAL_DMA_Init+0x140>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	009a      	lsls	r2, r3, #2
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a42      	ldr	r2, [pc, #264]	; (8004240 <HAL_DMA_Init+0x144>)
 8004136:	641a      	str	r2, [r3, #64]	; 0x40
 8004138:	e00e      	b.n	8004158 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	4b40      	ldr	r3, [pc, #256]	; (8004244 <HAL_DMA_Init+0x148>)
 8004142:	4413      	add	r3, r2
 8004144:	4a3d      	ldr	r2, [pc, #244]	; (800423c <HAL_DMA_Init+0x140>)
 8004146:	fba2 2303 	umull	r2, r3, r2, r3
 800414a:	091b      	lsrs	r3, r3, #4
 800414c:	009a      	lsls	r2, r3, #2
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a3c      	ldr	r2, [pc, #240]	; (8004248 <HAL_DMA_Init+0x14c>)
 8004156:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800417c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fa74 	bl	8004698 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041b8:	d102      	bne.n	80041c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80041cc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041d6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d010      	beq.n	8004202 <HAL_DMA_Init+0x106>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d80c      	bhi.n	8004202 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fa93 	bl	8004714 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041fe:	605a      	str	r2, [r3, #4]
 8004200:	e008      	b.n	8004214 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40020407 	.word	0x40020407
 8004238:	bffdfff8 	.word	0xbffdfff8
 800423c:	cccccccd 	.word	0xcccccccd
 8004240:	40020000 	.word	0x40020000
 8004244:	bffdfbf8 	.word	0xbffdfbf8
 8004248:	40020400 	.word	0x40020400

0800424c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_DMA_Start_IT+0x20>
 8004268:	2302      	movs	r3, #2
 800426a:	e066      	b.n	800433a <HAL_DMA_Start_IT+0xee>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	d155      	bne.n	800432c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0201 	bic.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f9b9 	bl	800461c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d008      	beq.n	80042c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 020e 	orr.w	r2, r2, #14
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	e00f      	b.n	80042e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0204 	bic.w	r2, r2, #4
 80042d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 020a 	orr.w	r2, r2, #10
 80042e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004300:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004314:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004318:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0201 	orr.w	r2, r2, #1
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	e005      	b.n	8004338 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004334:	2302      	movs	r3, #2
 8004336:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004338:	7dfb      	ldrb	r3, [r7, #23]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e04f      	b.n	80043f4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d008      	beq.n	8004372 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2204      	movs	r2, #4
 8004364:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e040      	b.n	80043f4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 020e 	bic.w	r2, r2, #14
 8004380:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800438c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004390:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0201 	bic.w	r2, r2, #1
 80043a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	f003 021c 	and.w	r2, r3, #28
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	2101      	movs	r1, #1
 80043b0:	fa01 f202 	lsl.w	r2, r1, r2
 80043b4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043be:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00c      	beq.n	80043e2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043e0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d005      	beq.n	8004424 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2204      	movs	r2, #4
 800441c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	73fb      	strb	r3, [r7, #15]
 8004422:	e047      	b.n	80044b4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 020e 	bic.w	r2, r2, #14
 8004432:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0201 	bic.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004452:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004458:	f003 021c 	and.w	r2, r3, #28
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	2101      	movs	r1, #1
 8004462:	fa01 f202 	lsl.w	r2, r1, r2
 8004466:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004470:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00c      	beq.n	8004494 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004488:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004492:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	4798      	blx	r3
    }
  }
  return status;
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	f003 031c 	and.w	r3, r3, #28
 80044de:	2204      	movs	r2, #4
 80044e0:	409a      	lsls	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d026      	beq.n	8004538 <HAL_DMA_IRQHandler+0x7a>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d021      	beq.n	8004538 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d107      	bne.n	8004512 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0204 	bic.w	r2, r2, #4
 8004510:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	f003 021c 	and.w	r2, r3, #28
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	2104      	movs	r1, #4
 8004520:	fa01 f202 	lsl.w	r2, r1, r2
 8004524:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	2b00      	cmp	r3, #0
 800452c:	d071      	beq.n	8004612 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004536:	e06c      	b.n	8004612 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	f003 031c 	and.w	r3, r3, #28
 8004540:	2202      	movs	r2, #2
 8004542:	409a      	lsls	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4013      	ands	r3, r2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d02e      	beq.n	80045aa <HAL_DMA_IRQHandler+0xec>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d029      	beq.n	80045aa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0320 	and.w	r3, r3, #32
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10b      	bne.n	800457c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 020a 	bic.w	r2, r2, #10
 8004572:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004580:	f003 021c 	and.w	r2, r3, #28
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	2102      	movs	r1, #2
 800458a:	fa01 f202 	lsl.w	r2, r1, r2
 800458e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d038      	beq.n	8004612 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80045a8:	e033      	b.n	8004612 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ae:	f003 031c 	and.w	r3, r3, #28
 80045b2:	2208      	movs	r2, #8
 80045b4:	409a      	lsls	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d02a      	beq.n	8004614 <HAL_DMA_IRQHandler+0x156>
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d025      	beq.n	8004614 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 020e 	bic.w	r2, r2, #14
 80045d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045dc:	f003 021c 	and.w	r2, r3, #28
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	2101      	movs	r1, #1
 80045e6:	fa01 f202 	lsl.w	r2, r1, r2
 80045ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004606:	2b00      	cmp	r3, #0
 8004608:	d004      	beq.n	8004614 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004612:	bf00      	nop
 8004614:	bf00      	nop
}
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004632:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004638:	2b00      	cmp	r3, #0
 800463a:	d004      	beq.n	8004646 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004644:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	f003 021c 	and.w	r2, r3, #28
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	2101      	movs	r1, #1
 8004654:	fa01 f202 	lsl.w	r2, r1, r2
 8004658:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	2b10      	cmp	r3, #16
 8004668:	d108      	bne.n	800467c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800467a:	e007      	b.n	800468c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	60da      	str	r2, [r3, #12]
}
 800468c:	bf00      	nop
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	4b17      	ldr	r3, [pc, #92]	; (8004704 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d80a      	bhi.n	80046c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b0:	089b      	lsrs	r3, r3, #2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046b8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6493      	str	r3, [r2, #72]	; 0x48
 80046c0:	e007      	b.n	80046d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	089b      	lsrs	r3, r3, #2
 80046c8:	009a      	lsls	r2, r3, #2
 80046ca:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80046cc:	4413      	add	r3, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	3b08      	subs	r3, #8
 80046da:	4a0c      	ldr	r2, [pc, #48]	; (800470c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80046dc:	fba2 2303 	umull	r2, r3, r2, r3
 80046e0:	091b      	lsrs	r3, r3, #4
 80046e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a0a      	ldr	r2, [pc, #40]	; (8004710 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80046e8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	2201      	movs	r2, #1
 80046f2:	409a      	lsls	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80046f8:	bf00      	nop
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	40020407 	.word	0x40020407
 8004708:	4002081c 	.word	0x4002081c
 800470c:	cccccccd 	.word	0xcccccccd
 8004710:	40020880 	.word	0x40020880

08004714 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004724:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	461a      	mov	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a09      	ldr	r2, [pc, #36]	; (800475c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004738:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3b01      	subs	r3, #1
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	2201      	movs	r2, #1
 8004744:	409a      	lsls	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800474a:	bf00      	nop
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	1000823f 	.word	0x1000823f
 800475c:	40020940 	.word	0x40020940

08004760 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b01      	cmp	r3, #1
 8004774:	d12b      	bne.n	80047ce <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_DMAEx_ConfigMuxSync+0x24>
 8004780:	2302      	movs	r3, #2
 8004782:	e025      	b.n	80047d0 <HAL_DMAEx_ConfigMuxSync+0x70>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4b12      	ldr	r3, [pc, #72]	; (80047dc <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8004794:	4013      	ands	r3, r2
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	6811      	ldr	r1, [r2, #0]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	68d2      	ldr	r2, [r2, #12]
 800479e:	3a01      	subs	r2, #1
 80047a0:	04d2      	lsls	r2, r2, #19
 80047a2:	4311      	orrs	r1, r2
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	6852      	ldr	r2, [r2, #4]
 80047a8:	4311      	orrs	r1, r2
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	7a12      	ldrb	r2, [r2, #8]
 80047ae:	0412      	lsls	r2, r2, #16
 80047b0:	4311      	orrs	r1, r2
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	7a52      	ldrb	r2, [r2, #9]
 80047b6:	0252      	lsls	r2, r2, #9
 80047b8:	4311      	orrs	r1, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047be:	430b      	orrs	r3, r1
 80047c0:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	e000      	b.n	80047d0 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
  }
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	e000fdff 	.word	0xe000fdff

080047e0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047ee:	e14c      	b.n	8004a8a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	2101      	movs	r1, #1
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	fa01 f303 	lsl.w	r3, r1, r3
 80047fc:	4013      	ands	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 813e 	beq.w	8004a84 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	2b01      	cmp	r3, #1
 8004812:	d005      	beq.n	8004820 <HAL_GPIO_Init+0x40>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d130      	bne.n	8004882 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	2203      	movs	r2, #3
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	43db      	mvns	r3, r3
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4013      	ands	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004856:	2201      	movs	r2, #1
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43db      	mvns	r3, r3
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4013      	ands	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	091b      	lsrs	r3, r3, #4
 800486c:	f003 0201 	and.w	r2, r3, #1
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	2b03      	cmp	r3, #3
 800488c:	d017      	beq.n	80048be <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	2203      	movs	r2, #3
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	43db      	mvns	r3, r3
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4013      	ands	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d123      	bne.n	8004912 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	08da      	lsrs	r2, r3, #3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3208      	adds	r2, #8
 80048d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	220f      	movs	r2, #15
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4013      	ands	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	08da      	lsrs	r2, r3, #3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3208      	adds	r2, #8
 800490c:	6939      	ldr	r1, [r7, #16]
 800490e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	2203      	movs	r2, #3
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4013      	ands	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f003 0203 	and.w	r2, r3, #3
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 8098 	beq.w	8004a84 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004954:	4a54      	ldr	r2, [pc, #336]	; (8004aa8 <HAL_GPIO_Init+0x2c8>)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	089b      	lsrs	r3, r3, #2
 800495a:	3302      	adds	r3, #2
 800495c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004960:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	220f      	movs	r2, #15
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	43db      	mvns	r3, r3
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4013      	ands	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800497e:	d019      	beq.n	80049b4 <HAL_GPIO_Init+0x1d4>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a4a      	ldr	r2, [pc, #296]	; (8004aac <HAL_GPIO_Init+0x2cc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d013      	beq.n	80049b0 <HAL_GPIO_Init+0x1d0>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a49      	ldr	r2, [pc, #292]	; (8004ab0 <HAL_GPIO_Init+0x2d0>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00d      	beq.n	80049ac <HAL_GPIO_Init+0x1cc>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a48      	ldr	r2, [pc, #288]	; (8004ab4 <HAL_GPIO_Init+0x2d4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d007      	beq.n	80049a8 <HAL_GPIO_Init+0x1c8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a47      	ldr	r2, [pc, #284]	; (8004ab8 <HAL_GPIO_Init+0x2d8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d101      	bne.n	80049a4 <HAL_GPIO_Init+0x1c4>
 80049a0:	2304      	movs	r3, #4
 80049a2:	e008      	b.n	80049b6 <HAL_GPIO_Init+0x1d6>
 80049a4:	2307      	movs	r3, #7
 80049a6:	e006      	b.n	80049b6 <HAL_GPIO_Init+0x1d6>
 80049a8:	2303      	movs	r3, #3
 80049aa:	e004      	b.n	80049b6 <HAL_GPIO_Init+0x1d6>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e002      	b.n	80049b6 <HAL_GPIO_Init+0x1d6>
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <HAL_GPIO_Init+0x1d6>
 80049b4:	2300      	movs	r3, #0
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	f002 0203 	and.w	r2, r2, #3
 80049bc:	0092      	lsls	r2, r2, #2
 80049be:	4093      	lsls	r3, r2
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049c6:	4938      	ldr	r1, [pc, #224]	; (8004aa8 <HAL_GPIO_Init+0x2c8>)
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	089b      	lsrs	r3, r3, #2
 80049cc:	3302      	adds	r3, #2
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049d4:	4b39      	ldr	r3, [pc, #228]	; (8004abc <HAL_GPIO_Init+0x2dc>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	43db      	mvns	r3, r3
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	4013      	ands	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049f8:	4a30      	ldr	r2, [pc, #192]	; (8004abc <HAL_GPIO_Init+0x2dc>)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80049fe:	4b2f      	ldr	r3, [pc, #188]	; (8004abc <HAL_GPIO_Init+0x2dc>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	43db      	mvns	r3, r3
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a22:	4a26      	ldr	r2, [pc, #152]	; (8004abc <HAL_GPIO_Init+0x2dc>)
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a28:	4b24      	ldr	r3, [pc, #144]	; (8004abc <HAL_GPIO_Init+0x2dc>)
 8004a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4013      	ands	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a4e:	4a1b      	ldr	r2, [pc, #108]	; (8004abc <HAL_GPIO_Init+0x2dc>)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004a56:	4b19      	ldr	r3, [pc, #100]	; (8004abc <HAL_GPIO_Init+0x2dc>)
 8004a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	43db      	mvns	r3, r3
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4013      	ands	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a7c:	4a0f      	ldr	r2, [pc, #60]	; (8004abc <HAL_GPIO_Init+0x2dc>)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	3301      	adds	r3, #1
 8004a88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f47f aeab 	bne.w	80047f0 <HAL_GPIO_Init+0x10>
  }
}
 8004a9a:	bf00      	nop
 8004a9c:	bf00      	nop
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	40010000 	.word	0x40010000
 8004aac:	48000400 	.word	0x48000400
 8004ab0:	48000800 	.word	0x48000800
 8004ab4:	48000c00 	.word	0x48000c00
 8004ab8:	48001000 	.word	0x48001000
 8004abc:	58000800 	.word	0x58000800

08004ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	807b      	strh	r3, [r7, #2]
 8004acc:	4613      	mov	r3, r2
 8004ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ad0:	787b      	ldrb	r3, [r7, #1]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ad6:	887a      	ldrh	r2, [r7, #2]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004adc:	e002      	b.n	8004ae4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ade:	887a      	ldrh	r2, [r7, #2]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004af6:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <HAL_HSEM_IRQHandler+0x30>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004afc:	4b08      	ldr	r3, [pc, #32]	; (8004b20 <HAL_HSEM_IRQHandler+0x30>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	43db      	mvns	r3, r3
 8004b04:	4906      	ldr	r1, [pc, #24]	; (8004b20 <HAL_HSEM_IRQHandler+0x30>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004b0a:	4a05      	ldr	r2, [pc, #20]	; (8004b20 <HAL_HSEM_IRQHandler+0x30>)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f807 	bl	8004b24 <HAL_HSEM_FreeCallback>
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	58001500 	.word	0x58001500

08004b24 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01e      	beq.n	8004b88 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <HAL_IPCC_Init+0x60>)
 8004b4c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d102      	bne.n	8004b60 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fd fb82 	bl	8002264 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004b60:	68b8      	ldr	r0, [r7, #8]
 8004b62:	f000 f85b 	bl	8004c1c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f82c 	bl	8004bd0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004b86:	e001      	b.n	8004b8c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	58000c00 	.word	0x58000c00

08004b9c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004baa:	bf00      	nop
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b085      	sub	sp, #20
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	e00f      	b.n	8004bfe <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	4a0b      	ldr	r2, [pc, #44]	; (8004c14 <IPCC_SetDefaultCallbacks+0x44>)
 8004be8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3306      	adds	r3, #6
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	4a08      	ldr	r2, [pc, #32]	; (8004c18 <IPCC_SetDefaultCallbacks+0x48>)
 8004bf6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b05      	cmp	r3, #5
 8004c02:	d9ec      	bls.n	8004bde <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	08004b9d 	.word	0x08004b9d
 8004c18:	08004bb7 	.word	0x08004bb7

08004c1c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004c30:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	223f      	movs	r2, #63	; 0x3f
 8004c36:	609a      	str	r2, [r3, #8]
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c48:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c52:	6013      	str	r3, [r2, #0]
}
 8004c54:	bf00      	nop
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	58000400 	.word	0x58000400

08004c64 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004c68:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <HAL_PWREx_GetVoltageRange+0x18>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	58000400 	.word	0x58000400

08004c80 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c92:	d101      	bne.n	8004c98 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <LL_RCC_HSE_Enable>:
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb6:	6013      	str	r3, [r2, #0]
}
 8004cb8:	bf00      	nop
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <LL_RCC_HSE_Disable>:
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd4:	6013      	str	r3, [r2, #0]
}
 8004cd6:	bf00      	nop
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <LL_RCC_HSE_IsReady>:
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cf2:	d101      	bne.n	8004cf8 <LL_RCC_HSE_IsReady+0x18>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <LL_RCC_HSE_IsReady+0x1a>
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <LL_RCC_HSI_Enable>:
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d16:	6013      	str	r3, [r2, #0]
}
 8004d18:	bf00      	nop
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <LL_RCC_HSI_Disable>:
{
 8004d22:	b480      	push	{r7}
 8004d24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d34:	6013      	str	r3, [r2, #0]
}
 8004d36:	bf00      	nop
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <LL_RCC_HSI_IsReady>:
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d52:	d101      	bne.n	8004d58 <LL_RCC_HSI_IsReady+0x18>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <LL_RCC_HSI_IsReady+0x1a>
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	061b      	lsls	r3, r3, #24
 8004d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	604b      	str	r3, [r1, #4]
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <LL_RCC_HSI48_Enable>:
{
 8004d8e:	b480      	push	{r7}
 8004d90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d9e:	f043 0301 	orr.w	r3, r3, #1
 8004da2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004da6:	bf00      	nop
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <LL_RCC_HSI48_Disable>:
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004dc8:	bf00      	nop
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <LL_RCC_HSI48_IsReady>:
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d101      	bne.n	8004dea <LL_RCC_HSI48_IsReady+0x18>
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <LL_RCC_HSI48_IsReady+0x1a>
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <LL_RCC_LSE_Enable>:
{
 8004df6:	b480      	push	{r7}
 8004df8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e06:	f043 0301 	orr.w	r3, r3, #1
 8004e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004e0e:	bf00      	nop
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <LL_RCC_LSE_Disable>:
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004e30:	bf00      	nop
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <LL_RCC_LSE_EnableBypass>:
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e4a:	f043 0304 	orr.w	r3, r3, #4
 8004e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004e52:	bf00      	nop
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <LL_RCC_LSE_DisableBypass>:
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e6c:	f023 0304 	bic.w	r3, r3, #4
 8004e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <LL_RCC_LSE_IsReady>:
{
 8004e7e:	b480      	push	{r7}
 8004e80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d101      	bne.n	8004e96 <LL_RCC_LSE_IsReady+0x18>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <LL_RCC_LSE_IsReady+0x1a>
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <LL_RCC_LSI1_Enable>:
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eb2:	f043 0301 	orr.w	r3, r3, #1
 8004eb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004eba:	bf00      	nop
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <LL_RCC_LSI1_Disable>:
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004edc:	bf00      	nop
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <LL_RCC_LSI1_IsReady>:
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d101      	bne.n	8004efe <LL_RCC_LSI1_IsReady+0x18>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <LL_RCC_LSI1_IsReady+0x1a>
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <LL_RCC_LSI2_Enable>:
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f1a:	f043 0304 	orr.w	r3, r3, #4
 8004f1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004f22:	bf00      	nop
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <LL_RCC_LSI2_Disable>:
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f3c:	f023 0304 	bic.w	r3, r3, #4
 8004f40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004f44:	bf00      	nop
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <LL_RCC_LSI2_IsReady>:
{
 8004f4e:	b480      	push	{r7}
 8004f50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d101      	bne.n	8004f66 <LL_RCC_LSI2_IsReady+0x18>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <LL_RCC_LSI2_IsReady+0x1a>
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <LL_RCC_LSI2_SetTrimming>:
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <LL_RCC_MSI_Enable>:
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	6013      	str	r3, [r2, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <LL_RCC_MSI_Disable>:
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fcc:	f023 0301 	bic.w	r3, r3, #1
 8004fd0:	6013      	str	r3, [r2, #0]
}
 8004fd2:	bf00      	nop
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <LL_RCC_MSI_IsReady>:
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d101      	bne.n	8004ff2 <LL_RCC_MSI_IsReady+0x16>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e000      	b.n	8004ff4 <LL_RCC_MSI_IsReady+0x18>
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <LL_RCC_MSI_SetRange>:
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005010:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4313      	orrs	r3, r2
 8005018:	600b      	str	r3, [r1, #0]
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <LL_RCC_MSI_GetRange>:
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800502c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005036:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2bb0      	cmp	r3, #176	; 0xb0
 800503c:	d901      	bls.n	8005042 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800503e:	23b0      	movs	r3, #176	; 0xb0
 8005040:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005042:	687b      	ldr	r3, [r7, #4]
}
 8005044:	4618      	mov	r0, r3
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	021b      	lsls	r3, r3, #8
 8005066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800506a:	4313      	orrs	r3, r2
 800506c:	604b      	str	r3, [r1, #4]
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <LL_RCC_SetSysClkSource>:
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f023 0203 	bic.w	r2, r3, #3
 800508c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4313      	orrs	r3, r2
 8005094:	608b      	str	r3, [r1, #8]
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <LL_RCC_GetSysClkSource>:
{
 80050a2:	b480      	push	{r7}
 80050a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80050a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 030c 	and.w	r3, r3, #12
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <LL_RCC_SetAHBPrescaler>:
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80050c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	608b      	str	r3, [r1, #8]
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80050ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80050f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <LL_RCC_SetAHB4Prescaler>:
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800511e:	f023 020f 	bic.w	r2, r3, #15
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	091b      	lsrs	r3, r3, #4
 8005126:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <LL_RCC_SetAPB1Prescaler>:
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800514e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4313      	orrs	r3, r2
 8005156:	608b      	str	r3, [r1, #8]
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <LL_RCC_SetAPB2Prescaler>:
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800516c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005176:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4313      	orrs	r3, r2
 800517e:	608b      	str	r3, [r1, #8]
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <LL_RCC_GetAHBPrescaler>:
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800519a:	4618      	mov	r0, r3
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <LL_RCC_GetAHB4Prescaler>:
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80051a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <LL_RCC_GetAPB1Prescaler>:
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80051c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <LL_RCC_GetAPB2Prescaler>:
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <LL_RCC_PLL_Enable>:
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80051f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005202:	6013      	str	r3, [r2, #0]
}
 8005204:	bf00      	nop
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <LL_RCC_PLL_Disable>:
{
 800520e:	b480      	push	{r7}
 8005210:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800521c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005220:	6013      	str	r3, [r2, #0]
}
 8005222:	bf00      	nop
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <LL_RCC_PLL_IsReady>:
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800523e:	d101      	bne.n	8005244 <LL_RCC_PLL_IsReady+0x18>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <LL_RCC_PLL_IsReady+0x1a>
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <LL_RCC_PLL_GetN>:
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	0a1b      	lsrs	r3, r3, #8
 800525c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005260:	4618      	mov	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <LL_RCC_PLL_GetR>:
{
 800526a:	b480      	push	{r7}
 800526c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800526e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005278:	4618      	mov	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <LL_RCC_PLL_GetDivider>:
{
 8005282:	b480      	push	{r7}
 8005284:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005290:	4618      	mov	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <LL_RCC_PLL_GetMainSource>:
{
 800529a:	b480      	push	{r7}
 800529c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800529e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f003 0303 	and.w	r3, r3, #3
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <LL_RCC_IsActiveFlag_HPRE>:
{
 80052b2:	b480      	push	{r7}
 80052b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80052b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c4:	d101      	bne.n	80052ca <LL_RCC_IsActiveFlag_HPRE+0x18>
 80052c6:	2301      	movs	r3, #1
 80052c8:	e000      	b.n	80052cc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80052d6:	b480      	push	{r7}
 80052d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80052da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80052e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052ea:	d101      	bne.n	80052f0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005304:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800530c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005310:	d101      	bne.n	8005316 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8005322:	b480      	push	{r7}
 8005324:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005330:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005334:	d101      	bne.n	800533a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005336:	2301      	movs	r3, #1
 8005338:	e000      	b.n	800533c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005346:	b480      	push	{r7}
 8005348:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800534a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005354:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005358:	d101      	bne.n	800535e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800536c:	b590      	push	{r4, r7, lr}
 800536e:	b08d      	sub	sp, #52	; 0x34
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e37f      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 8092 	beq.w	80054b0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800538c:	f7ff fe89 	bl	80050a2 <LL_RCC_GetSysClkSource>
 8005390:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005392:	f7ff ff82 	bl	800529a <LL_RCC_PLL_GetMainSource>
 8005396:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539a:	2b00      	cmp	r3, #0
 800539c:	d005      	beq.n	80053aa <HAL_RCC_OscConfig+0x3e>
 800539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a0:	2b0c      	cmp	r3, #12
 80053a2:	d14c      	bne.n	800543e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d149      	bne.n	800543e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053aa:	f7ff fe17 	bl	8004fdc <LL_RCC_MSI_IsReady>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_RCC_OscConfig+0x54>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e35e      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80053c4:	f7ff fe2f 	bl	8005026 <LL_RCC_MSI_GetRange>
 80053c8:	4603      	mov	r3, r0
 80053ca:	429c      	cmp	r4, r3
 80053cc:	d914      	bls.n	80053f8 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fd44 	bl	8005e60 <RCC_SetFlashLatencyFromMSIRange>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e34d      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff fe09 	bl	8004ffe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff fe2d 	bl	8005050 <LL_RCC_MSI_SetCalibTrimming>
 80053f6:	e013      	b.n	8005420 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff fdfe 	bl	8004ffe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff fe22 	bl	8005050 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fd25 	bl	8005e60 <RCC_SetFlashLatencyFromMSIRange>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e32e      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005420:	f000 fcde 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8005424:	4603      	mov	r3, r0
 8005426:	4aa5      	ldr	r2, [pc, #660]	; (80056bc <HAL_RCC_OscConfig+0x350>)
 8005428:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800542a:	4ba5      	ldr	r3, [pc, #660]	; (80056c0 <HAL_RCC_OscConfig+0x354>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe fc58 	bl	8003ce4 <HAL_InitTick>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d039      	beq.n	80054ae <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e31f      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d01e      	beq.n	8005484 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005446:	f7ff fdab 	bl	8004fa0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800544a:	f7fe fc99 	bl	8003d80 <HAL_GetTick>
 800544e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005452:	f7fe fc95 	bl	8003d80 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e30c      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005464:	f7ff fdba 	bl	8004fdc <LL_RCC_MSI_IsReady>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0f1      	beq.n	8005452 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff fdc3 	bl	8004ffe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff fde7 	bl	8005050 <LL_RCC_MSI_SetCalibTrimming>
 8005482:	e015      	b.n	80054b0 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005484:	f7ff fd9b 	bl	8004fbe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005488:	f7fe fc7a 	bl	8003d80 <HAL_GetTick>
 800548c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005490:	f7fe fc76 	bl	8003d80 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e2ed      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 80054a2:	f7ff fd9b 	bl	8004fdc <LL_RCC_MSI_IsReady>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1f1      	bne.n	8005490 <HAL_RCC_OscConfig+0x124>
 80054ac:	e000      	b.n	80054b0 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054ae:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d04e      	beq.n	800555a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054bc:	f7ff fdf1 	bl	80050a2 <LL_RCC_GetSysClkSource>
 80054c0:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054c2:	f7ff feea 	bl	800529a <LL_RCC_PLL_GetMainSource>
 80054c6:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d005      	beq.n	80054da <HAL_RCC_OscConfig+0x16e>
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	2b0c      	cmp	r3, #12
 80054d2:	d10d      	bne.n	80054f0 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d10a      	bne.n	80054f0 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054da:	f7ff fc01 	bl	8004ce0 <LL_RCC_HSE_IsReady>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d039      	beq.n	8005558 <HAL_RCC_OscConfig+0x1ec>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d135      	bne.n	8005558 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e2c6      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f8:	d102      	bne.n	8005500 <HAL_RCC_OscConfig+0x194>
 80054fa:	f7ff fbd3 	bl	8004ca4 <LL_RCC_HSE_Enable>
 80054fe:	e001      	b.n	8005504 <HAL_RCC_OscConfig+0x198>
 8005500:	f7ff fbdf 	bl	8004cc2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d012      	beq.n	8005532 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7fe fc38 	bl	8003d80 <HAL_GetTick>
 8005510:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005514:	f7fe fc34 	bl	8003d80 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b64      	cmp	r3, #100	; 0x64
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e2ab      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005526:	f7ff fbdb 	bl	8004ce0 <LL_RCC_HSE_IsReady>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0f1      	beq.n	8005514 <HAL_RCC_OscConfig+0x1a8>
 8005530:	e013      	b.n	800555a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005532:	f7fe fc25 	bl	8003d80 <HAL_GetTick>
 8005536:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005538:	e008      	b.n	800554c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800553a:	f7fe fc21 	bl	8003d80 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b64      	cmp	r3, #100	; 0x64
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e298      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 800554c:	f7ff fbc8 	bl	8004ce0 <LL_RCC_HSE_IsReady>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f1      	bne.n	800553a <HAL_RCC_OscConfig+0x1ce>
 8005556:	e000      	b.n	800555a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005558:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d051      	beq.n	800560a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005566:	f7ff fd9c 	bl	80050a2 <LL_RCC_GetSysClkSource>
 800556a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800556c:	f7ff fe95 	bl	800529a <LL_RCC_PLL_GetMainSource>
 8005570:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	2b04      	cmp	r3, #4
 8005576:	d005      	beq.n	8005584 <HAL_RCC_OscConfig+0x218>
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	2b0c      	cmp	r3, #12
 800557c:	d113      	bne.n	80055a6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b02      	cmp	r3, #2
 8005582:	d110      	bne.n	80055a6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005584:	f7ff fbdc 	bl	8004d40 <LL_RCC_HSI_IsReady>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d005      	beq.n	800559a <HAL_RCC_OscConfig+0x22e>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e271      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff fbe0 	bl	8004d64 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055a4:	e031      	b.n	800560a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d019      	beq.n	80055e2 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055ae:	f7ff fba9 	bl	8004d04 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b2:	f7fe fbe5 	bl	8003d80 <HAL_GetTick>
 80055b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ba:	f7fe fbe1 	bl	8003d80 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e258      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 80055cc:	f7ff fbb8 	bl	8004d40 <LL_RCC_HSI_IsReady>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0f1      	beq.n	80055ba <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff fbc2 	bl	8004d64 <LL_RCC_HSI_SetCalibTrimming>
 80055e0:	e013      	b.n	800560a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055e2:	f7ff fb9e 	bl	8004d22 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e6:	f7fe fbcb 	bl	8003d80 <HAL_GetTick>
 80055ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ee:	f7fe fbc7 	bl	8003d80 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e23e      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005600:	f7ff fb9e 	bl	8004d40 <LL_RCC_HSI_IsReady>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f1      	bne.n	80055ee <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0308 	and.w	r3, r3, #8
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80a4 	beq.w	800576c <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d077      	beq.n	800571c <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b00      	cmp	r3, #0
 8005636:	d04b      	beq.n	80056d0 <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005638:	f7ff fc55 	bl	8004ee6 <LL_RCC_LSI1_IsReady>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d113      	bne.n	800566a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005642:	f7ff fc2e 	bl	8004ea2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005646:	f7fe fb9b 	bl	8003d80 <HAL_GetTick>
 800564a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800564e:	f7fe fb97 	bl	8003d80 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e20e      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005660:	f7ff fc41 	bl	8004ee6 <LL_RCC_LSI1_IsReady>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0f1      	beq.n	800564e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800566a:	f7ff fc4e 	bl	8004f0a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566e:	f7fe fb87 	bl	8003d80 <HAL_GetTick>
 8005672:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005674:	e008      	b.n	8005688 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005676:	f7fe fb83 	bl	8003d80 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b03      	cmp	r3, #3
 8005682:	d901      	bls.n	8005688 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e1fa      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005688:	f7ff fc61 	bl	8004f4e <LL_RCC_LSI2_IsReady>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f1      	beq.n	8005676 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff fc6b 	bl	8004f72 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800569c:	f7ff fc12 	bl	8004ec4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a0:	f7fe fb6e 	bl	8003d80 <HAL_GetTick>
 80056a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80056a6:	e00d      	b.n	80056c4 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80056a8:	f7fe fb6a 	bl	8003d80 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d906      	bls.n	80056c4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e1e1      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
 80056ba:	bf00      	nop
 80056bc:	2000001c 	.word	0x2000001c
 80056c0:	20000020 	.word	0x20000020
        while (LL_RCC_LSI1_IsReady() != 0U)
 80056c4:	f7ff fc0f 	bl	8004ee6 <LL_RCC_LSI1_IsReady>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1ec      	bne.n	80056a8 <HAL_RCC_OscConfig+0x33c>
 80056ce:	e04d      	b.n	800576c <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80056d0:	f7ff fbe7 	bl	8004ea2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d4:	f7fe fb54 	bl	8003d80 <HAL_GetTick>
 80056d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80056dc:	f7fe fb50 	bl	8003d80 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e1c7      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80056ee:	f7ff fbfa 	bl	8004ee6 <LL_RCC_LSI1_IsReady>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0f1      	beq.n	80056dc <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80056f8:	f7ff fc18 	bl	8004f2c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80056fc:	e008      	b.n	8005710 <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80056fe:	f7fe fb3f 	bl	8003d80 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b03      	cmp	r3, #3
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e1b6      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005710:	f7ff fc1d 	bl	8004f4e <LL_RCC_LSI2_IsReady>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f1      	bne.n	80056fe <HAL_RCC_OscConfig+0x392>
 800571a:	e027      	b.n	800576c <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800571c:	f7ff fc06 	bl	8004f2c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005720:	f7fe fb2e 	bl	8003d80 <HAL_GetTick>
 8005724:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005728:	f7fe fb2a 	bl	8003d80 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b03      	cmp	r3, #3
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e1a1      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800573a:	f7ff fc08 	bl	8004f4e <LL_RCC_LSI2_IsReady>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f1      	bne.n	8005728 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005744:	f7ff fbbe 	bl	8004ec4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005748:	f7fe fb1a 	bl	8003d80 <HAL_GetTick>
 800574c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800574e:	e008      	b.n	8005762 <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005750:	f7fe fb16 	bl	8003d80 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e18d      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005762:	f7ff fbc0 	bl	8004ee6 <LL_RCC_LSI1_IsReady>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1f1      	bne.n	8005750 <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d05b      	beq.n	8005830 <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005778:	4ba7      	ldr	r3, [pc, #668]	; (8005a18 <HAL_RCC_OscConfig+0x6ac>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005780:	2b00      	cmp	r3, #0
 8005782:	d114      	bne.n	80057ae <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005784:	f7ff fa5e 	bl	8004c44 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005788:	f7fe fafa 	bl	8003d80 <HAL_GetTick>
 800578c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005790:	f7fe faf6 	bl	8003d80 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e16d      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057a2:	4b9d      	ldr	r3, [pc, #628]	; (8005a18 <HAL_RCC_OscConfig+0x6ac>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0f0      	beq.n	8005790 <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d102      	bne.n	80057bc <HAL_RCC_OscConfig+0x450>
 80057b6:	f7ff fb1e 	bl	8004df6 <LL_RCC_LSE_Enable>
 80057ba:	e00c      	b.n	80057d6 <HAL_RCC_OscConfig+0x46a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2b05      	cmp	r3, #5
 80057c2:	d104      	bne.n	80057ce <HAL_RCC_OscConfig+0x462>
 80057c4:	f7ff fb39 	bl	8004e3a <LL_RCC_LSE_EnableBypass>
 80057c8:	f7ff fb15 	bl	8004df6 <LL_RCC_LSE_Enable>
 80057cc:	e003      	b.n	80057d6 <HAL_RCC_OscConfig+0x46a>
 80057ce:	f7ff fb23 	bl	8004e18 <LL_RCC_LSE_Disable>
 80057d2:	f7ff fb43 	bl	8004e5c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d014      	beq.n	8005808 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057de:	f7fe facf 	bl	8003d80 <HAL_GetTick>
 80057e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80057e4:	e00a      	b.n	80057fc <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e6:	f7fe facb 	bl	8003d80 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e140      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 80057fc:	f7ff fb3f 	bl	8004e7e <LL_RCC_LSE_IsReady>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0ef      	beq.n	80057e6 <HAL_RCC_OscConfig+0x47a>
 8005806:	e013      	b.n	8005830 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005808:	f7fe faba 	bl	8003d80 <HAL_GetTick>
 800580c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800580e:	e00a      	b.n	8005826 <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005810:	f7fe fab6 	bl	8003d80 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f241 3288 	movw	r2, #5000	; 0x1388
 800581e:	4293      	cmp	r3, r2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e12b      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005826:	f7ff fb2a 	bl	8004e7e <LL_RCC_LSE_IsReady>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1ef      	bne.n	8005810 <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005838:	2b00      	cmp	r3, #0
 800583a:	d02c      	beq.n	8005896 <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	2b00      	cmp	r3, #0
 8005842:	d014      	beq.n	800586e <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005844:	f7ff faa3 	bl	8004d8e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005848:	f7fe fa9a 	bl	8003d80 <HAL_GetTick>
 800584c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005850:	f7fe fa96 	bl	8003d80 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e10d      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005862:	f7ff fab6 	bl	8004dd2 <LL_RCC_HSI48_IsReady>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0f1      	beq.n	8005850 <HAL_RCC_OscConfig+0x4e4>
 800586c:	e013      	b.n	8005896 <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800586e:	f7ff fa9f 	bl	8004db0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005872:	f7fe fa85 	bl	8003d80 <HAL_GetTick>
 8005876:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005878:	e008      	b.n	800588c <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800587a:	f7fe fa81 	bl	8003d80 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e0f8      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800588c:	f7ff faa1 	bl	8004dd2 <LL_RCC_HSI48_IsReady>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1f1      	bne.n	800587a <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80ee 	beq.w	8005a7c <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058a0:	f7ff fbff 	bl	80050a2 <LL_RCC_GetSysClkSource>
 80058a4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80058a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	f040 80b4 	bne.w	8005a20 <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f003 0203 	and.w	r2, r3, #3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d123      	bne.n	800590e <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d11c      	bne.n	800590e <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	0a1b      	lsrs	r3, r3, #8
 80058d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d114      	bne.n	800590e <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d10d      	bne.n	800590e <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d106      	bne.n	800590e <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800590a:	429a      	cmp	r2, r3
 800590c:	d05d      	beq.n	80059ca <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	2b0c      	cmp	r3, #12
 8005912:	d058      	beq.n	80059c6 <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e0ab      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005926:	f7ff fc72 	bl	800520e <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800592a:	f7fe fa29 	bl	8003d80 <HAL_GetTick>
 800592e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005930:	e008      	b.n	8005944 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005932:	f7fe fa25 	bl	8003d80 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d901      	bls.n	8005944 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e09c      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1ef      	bne.n	8005932 <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	4b30      	ldr	r3, [pc, #192]	; (8005a1c <HAL_RCC_OscConfig+0x6b0>)
 800595a:	4013      	ands	r3, r2
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005964:	4311      	orrs	r1, r2
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800596a:	0212      	lsls	r2, r2, #8
 800596c:	4311      	orrs	r1, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005972:	4311      	orrs	r1, r2
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005978:	4311      	orrs	r1, r2
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800597e:	430a      	orrs	r2, r1
 8005980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005984:	4313      	orrs	r3, r2
 8005986:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005988:	f7ff fc32 	bl	80051f0 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800598c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800599a:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800599c:	f7fe f9f0 	bl	8003d80 <HAL_GetTick>
 80059a0:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a4:	f7fe f9ec 	bl	8003d80 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e063      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0ef      	beq.n	80059a4 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059c4:	e05a      	b.n	8005a7c <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e059      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d151      	bne.n	8005a7c <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80059d8:	f7ff fc0a 	bl	80051f0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059ec:	f7fe f9c8 	bl	8003d80 <HAL_GetTick>
 80059f0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059f4:	f7fe f9c4 	bl	8003d80 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e03b      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0ef      	beq.n	80059f4 <HAL_RCC_OscConfig+0x688>
 8005a14:	e032      	b.n	8005a7c <HAL_RCC_OscConfig+0x710>
 8005a16:	bf00      	nop
 8005a18:	58000400 	.word	0x58000400
 8005a1c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	2b0c      	cmp	r3, #12
 8005a24:	d028      	beq.n	8005a78 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a26:	f7ff fbf2 	bl	800520e <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a34:	f023 0303 	bic.w	r3, r3, #3
 8005a38:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a44:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a4c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4e:	f7fe f997 	bl	8003d80 <HAL_GetTick>
 8005a52:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a56:	f7fe f993 	bl	8003d80 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e00a      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1ef      	bne.n	8005a56 <HAL_RCC_OscConfig+0x6ea>
 8005a76:	e001      	b.n	8005a7c <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3734      	adds	r7, #52	; 0x34
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd90      	pop	{r4, r7, pc}
 8005a86:	bf00      	nop

08005a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e12d      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b98      	ldr	r3, [pc, #608]	; (8005d00 <HAL_RCC_ClockConfig+0x278>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d91b      	bls.n	8005ae2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b95      	ldr	r3, [pc, #596]	; (8005d00 <HAL_RCC_ClockConfig+0x278>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f023 0207 	bic.w	r2, r3, #7
 8005ab2:	4993      	ldr	r1, [pc, #588]	; (8005d00 <HAL_RCC_ClockConfig+0x278>)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aba:	f7fe f961 	bl	8003d80 <HAL_GetTick>
 8005abe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ac2:	f7fe f95d 	bl	8003d80 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e111      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad4:	4b8a      	ldr	r3, [pc, #552]	; (8005d00 <HAL_RCC_ClockConfig+0x278>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d1ef      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d016      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff fae1 	bl	80050ba <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005af8:	f7fe f942 	bl	8003d80 <HAL_GetTick>
 8005afc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b00:	f7fe f93e 	bl	8003d80 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e0f2      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005b12:	f7ff fbce 	bl	80052b2 <LL_RCC_IsActiveFlag_HPRE>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0f1      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d016      	beq.n	8005b56 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fad8 	bl	80050e2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b32:	f7fe f925 	bl	8003d80 <HAL_GetTick>
 8005b36:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005b38:	e008      	b.n	8005b4c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b3a:	f7fe f921 	bl	8003d80 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d901      	bls.n	8005b4c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e0d5      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005b4c:	f7ff fbc3 	bl	80052d6 <LL_RCC_IsActiveFlag_C2HPRE>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0f1      	beq.n	8005b3a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d016      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7ff fad1 	bl	800510e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b6c:	f7fe f908 	bl	8003d80 <HAL_GetTick>
 8005b70:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005b72:	e008      	b.n	8005b86 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b74:	f7fe f904 	bl	8003d80 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e0b8      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005b86:	f7ff fbb9 	bl	80052fc <LL_RCC_IsActiveFlag_SHDHPRE>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0f1      	beq.n	8005b74 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d016      	beq.n	8005bca <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff facb 	bl	800513c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ba6:	f7fe f8eb 	bl	8003d80 <HAL_GetTick>
 8005baa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005bac:	e008      	b.n	8005bc0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bae:	f7fe f8e7 	bl	8003d80 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e09b      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005bc0:	f7ff fbaf 	bl	8005322 <LL_RCC_IsActiveFlag_PPRE1>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0f1      	beq.n	8005bae <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0308 	and.w	r3, r3, #8
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d017      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7ff fac1 	bl	8005164 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005be2:	f7fe f8cd 	bl	8003d80 <HAL_GetTick>
 8005be6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005be8:	e008      	b.n	8005bfc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bea:	f7fe f8c9 	bl	8003d80 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e07d      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005bfc:	f7ff fba3 	bl	8005346 <LL_RCC_IsActiveFlag_PPRE2>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0f1      	beq.n	8005bea <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d043      	beq.n	8005c9a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d106      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005c1a:	f7ff f861 	bl	8004ce0 <LL_RCC_HSE_IsReady>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d11e      	bne.n	8005c62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e067      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d106      	bne.n	8005c3e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005c30:	f7ff fafc 	bl	800522c <LL_RCC_PLL_IsReady>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d113      	bne.n	8005c62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e05c      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005c46:	f7ff f9c9 	bl	8004fdc <LL_RCC_MSI_IsReady>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d108      	bne.n	8005c62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e051      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005c54:	f7ff f874 	bl	8004d40 <LL_RCC_HSI_IsReady>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e04a      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff fa07 	bl	800507a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c6c:	f7fe f888 	bl	8003d80 <HAL_GetTick>
 8005c70:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c72:	e00a      	b.n	8005c8a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c74:	f7fe f884 	bl	8003d80 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e036      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8a:	f7ff fa0a 	bl	80050a2 <LL_RCC_GetSysClkSource>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d1ec      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c9a:	4b19      	ldr	r3, [pc, #100]	; (8005d00 <HAL_RCC_ClockConfig+0x278>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d21b      	bcs.n	8005ce0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca8:	4b15      	ldr	r3, [pc, #84]	; (8005d00 <HAL_RCC_ClockConfig+0x278>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f023 0207 	bic.w	r2, r3, #7
 8005cb0:	4913      	ldr	r1, [pc, #76]	; (8005d00 <HAL_RCC_ClockConfig+0x278>)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cb8:	f7fe f862 	bl	8003d80 <HAL_GetTick>
 8005cbc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005cc0:	f7fe f85e 	bl	8003d80 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e012      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <HAL_RCC_ClockConfig+0x278>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d1ef      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005ce0:	f000 f87e 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	4a07      	ldr	r2, [pc, #28]	; (8005d04 <HAL_RCC_ClockConfig+0x27c>)
 8005ce8:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005cea:	f7fe f855 	bl	8003d98 <HAL_GetTickPrio>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fd fff7 	bl	8003ce4 <HAL_InitTick>
 8005cf6:	4603      	mov	r3, r0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	58004000 	.word	0x58004000
 8005d04:	2000001c 	.word	0x2000001c

08005d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d08:	b590      	push	{r4, r7, lr}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d0e:	f7ff f9c8 	bl	80050a2 <LL_RCC_GetSysClkSource>
 8005d12:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10a      	bne.n	8005d30 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005d1a:	f7ff f984 	bl	8005026 <LL_RCC_MSI_GetRange>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	4a2b      	ldr	r2, [pc, #172]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	e04b      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	d102      	bne.n	8005d3c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d36:	4b28      	ldr	r3, [pc, #160]	; (8005dd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	e045      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d10a      	bne.n	8005d58 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005d42:	f7fe ff9d 	bl	8004c80 <LL_RCC_HSE_IsEnabledDiv2>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d102      	bne.n	8005d52 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005d4c:	4b22      	ldr	r3, [pc, #136]	; (8005dd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	e03a      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005d52:	4b22      	ldr	r3, [pc, #136]	; (8005ddc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	e037      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005d58:	f7ff fa9f 	bl	800529a <LL_RCC_PLL_GetMainSource>
 8005d5c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d003      	beq.n	8005d6c <HAL_RCC_GetSysClockFreq+0x64>
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d003      	beq.n	8005d72 <HAL_RCC_GetSysClockFreq+0x6a>
 8005d6a:	e00d      	b.n	8005d88 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005d6c:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d6e:	60bb      	str	r3, [r7, #8]
        break;
 8005d70:	e015      	b.n	8005d9e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005d72:	f7fe ff85 	bl	8004c80 <LL_RCC_HSE_IsEnabledDiv2>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d102      	bne.n	8005d82 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005d7c:	4b16      	ldr	r3, [pc, #88]	; (8005dd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d7e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005d80:	e00d      	b.n	8005d9e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005d82:	4b16      	ldr	r3, [pc, #88]	; (8005ddc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005d84:	60bb      	str	r3, [r7, #8]
        break;
 8005d86:	e00a      	b.n	8005d9e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005d88:	f7ff f94d 	bl	8005026 <LL_RCC_MSI_GetRange>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	091b      	lsrs	r3, r3, #4
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	4a0f      	ldr	r2, [pc, #60]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d9a:	60bb      	str	r3, [r7, #8]
        break;
 8005d9c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005d9e:	f7ff fa57 	bl	8005250 <LL_RCC_PLL_GetN>
 8005da2:	4602      	mov	r2, r0
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	fb03 f402 	mul.w	r4, r3, r2
 8005daa:	f7ff fa6a 	bl	8005282 <LL_RCC_PLL_GetDivider>
 8005dae:	4603      	mov	r3, r0
 8005db0:	091b      	lsrs	r3, r3, #4
 8005db2:	3301      	adds	r3, #1
 8005db4:	fbb4 f4f3 	udiv	r4, r4, r3
 8005db8:	f7ff fa57 	bl	800526a <LL_RCC_PLL_GetR>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	0f5b      	lsrs	r3, r3, #29
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	fbb4 f3f3 	udiv	r3, r4, r3
 8005dc6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd90      	pop	{r4, r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	0800cff4 	.word	0x0800cff4
 8005dd8:	00f42400 	.word	0x00f42400
 8005ddc:	01e84800 	.word	0x01e84800

08005de0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005de0:	b598      	push	{r3, r4, r7, lr}
 8005de2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005de4:	f7ff ff90 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 8005de8:	4604      	mov	r4, r0
 8005dea:	f7ff f9cf 	bl	800518c <LL_RCC_GetAHBPrescaler>
 8005dee:	4603      	mov	r3, r0
 8005df0:	091b      	lsrs	r3, r3, #4
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	4a03      	ldr	r2, [pc, #12]	; (8005e04 <HAL_RCC_GetHCLKFreq+0x24>)
 8005df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dfc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	bd98      	pop	{r3, r4, r7, pc}
 8005e04:	0800cf94 	.word	0x0800cf94

08005e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e08:	b598      	push	{r3, r4, r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005e0c:	f7ff ffe8 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8005e10:	4604      	mov	r4, r0
 8005e12:	f7ff f9d5 	bl	80051c0 <LL_RCC_GetAPB1Prescaler>
 8005e16:	4603      	mov	r3, r0
 8005e18:	0a1b      	lsrs	r3, r3, #8
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	4a04      	ldr	r2, [pc, #16]	; (8005e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e24:	f003 031f 	and.w	r3, r3, #31
 8005e28:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	bd98      	pop	{r3, r4, r7, pc}
 8005e30:	0800cfd4 	.word	0x0800cfd4

08005e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e34:	b598      	push	{r3, r4, r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005e38:	f7ff ffd2 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	f7ff f9cb 	bl	80051d8 <LL_RCC_GetAPB2Prescaler>
 8005e42:	4603      	mov	r3, r0
 8005e44:	0adb      	lsrs	r3, r3, #11
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	4a04      	ldr	r2, [pc, #16]	; (8005e5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e50:	f003 031f 	and.w	r3, r3, #31
 8005e54:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	bd98      	pop	{r3, r4, r7, pc}
 8005e5c:	0800cfd4 	.word	0x0800cfd4

08005e60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005e60:	b590      	push	{r4, r7, lr}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2bb0      	cmp	r3, #176	; 0xb0
 8005e6c:	d903      	bls.n	8005e76 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005e6e:	4b15      	ldr	r3, [pc, #84]	; (8005ec4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	e007      	b.n	8005e86 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	091b      	lsrs	r3, r3, #4
 8005e7a:	f003 030f 	and.w	r3, r3, #15
 8005e7e:	4a11      	ldr	r2, [pc, #68]	; (8005ec4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e84:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005e86:	f7ff f98d 	bl	80051a4 <LL_RCC_GetAHB4Prescaler>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	4a0d      	ldr	r2, [pc, #52]	; (8005ec8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4a0a      	ldr	r2, [pc, #40]	; (8005ecc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	0c9c      	lsrs	r4, r3, #18
 8005eaa:	f7fe fedb 	bl	8004c64 <HAL_PWREx_GetVoltageRange>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f000 f80c 	bl	8005ed0 <RCC_SetFlashLatency>
 8005eb8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd90      	pop	{r4, r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	0800cff4 	.word	0x0800cff4
 8005ec8:	0800cf94 	.word	0x0800cf94
 8005ecc:	431bde83 	.word	0x431bde83

08005ed0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005ed0:	b590      	push	{r4, r7, lr}
 8005ed2:	b093      	sub	sp, #76	; 0x4c
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005eda:	4b37      	ldr	r3, [pc, #220]	; (8005fb8 <RCC_SetFlashLatency+0xe8>)
 8005edc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005ee0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ee2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005ee6:	4a35      	ldr	r2, [pc, #212]	; (8005fbc <RCC_SetFlashLatency+0xec>)
 8005ee8:	f107 031c 	add.w	r3, r7, #28
 8005eec:	ca07      	ldmia	r2, {r0, r1, r2}
 8005eee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005ef2:	4b33      	ldr	r3, [pc, #204]	; (8005fc0 <RCC_SetFlashLatency+0xf0>)
 8005ef4:	f107 040c 	add.w	r4, r7, #12
 8005ef8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005efa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005efe:	2300      	movs	r3, #0
 8005f00:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f08:	d11a      	bne.n	8005f40 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f0e:	e013      	b.n	8005f38 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	3348      	adds	r3, #72	; 0x48
 8005f16:	443b      	add	r3, r7
 8005f18:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d807      	bhi.n	8005f32 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	3348      	adds	r3, #72	; 0x48
 8005f28:	443b      	add	r3, r7
 8005f2a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005f2e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005f30:	e020      	b.n	8005f74 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f34:	3301      	adds	r3, #1
 8005f36:	643b      	str	r3, [r7, #64]	; 0x40
 8005f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d9e8      	bls.n	8005f10 <RCC_SetFlashLatency+0x40>
 8005f3e:	e019      	b.n	8005f74 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005f40:	2300      	movs	r3, #0
 8005f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f44:	e013      	b.n	8005f6e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	3348      	adds	r3, #72	; 0x48
 8005f4c:	443b      	add	r3, r7
 8005f4e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d807      	bhi.n	8005f68 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	3348      	adds	r3, #72	; 0x48
 8005f5e:	443b      	add	r3, r7
 8005f60:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005f64:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005f66:	e005      	b.n	8005f74 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d9e8      	bls.n	8005f46 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005f74:	4b13      	ldr	r3, [pc, #76]	; (8005fc4 <RCC_SetFlashLatency+0xf4>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f023 0207 	bic.w	r2, r3, #7
 8005f7c:	4911      	ldr	r1, [pc, #68]	; (8005fc4 <RCC_SetFlashLatency+0xf4>)
 8005f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f80:	4313      	orrs	r3, r2
 8005f82:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f84:	f7fd fefc 	bl	8003d80 <HAL_GetTick>
 8005f88:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005f8a:	e008      	b.n	8005f9e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005f8c:	f7fd fef8 	bl	8003d80 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e007      	b.n	8005fae <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005f9e:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <RCC_SetFlashLatency+0xf4>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d1ef      	bne.n	8005f8c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	374c      	adds	r7, #76	; 0x4c
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd90      	pop	{r4, r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	0800cd44 	.word	0x0800cd44
 8005fbc:	0800cd54 	.word	0x0800cd54
 8005fc0:	0800cd60 	.word	0x0800cd60
 8005fc4:	58004000 	.word	0x58004000

08005fc8 <LL_RCC_LSE_IsEnabled>:
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <LL_RCC_LSE_IsEnabled+0x18>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <LL_RCC_LSE_IsEnabled+0x1a>
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <LL_RCC_LSE_IsReady>:
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d101      	bne.n	8006004 <LL_RCC_LSE_IsReady+0x18>
 8006000:	2301      	movs	r3, #1
 8006002:	e000      	b.n	8006006 <LL_RCC_LSE_IsReady+0x1a>
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <LL_RCC_SetRFWKPClockSource>:
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006020:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4313      	orrs	r3, r2
 800602c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <LL_RCC_SetSMPSClockSource>:
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	f023 0203 	bic.w	r2, r3, #3
 800604e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4313      	orrs	r3, r2
 8006056:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <LL_RCC_SetSMPSPrescaler>:
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800606c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4313      	orrs	r3, r2
 800607e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <LL_RCC_SetUSARTClockSource>:
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609c:	f023 0203 	bic.w	r2, r3, #3
 80060a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <LL_RCC_SetLPUARTClockSource>:
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80060c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <LL_RCC_SetI2CClockSource>:
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80060ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	091b      	lsrs	r3, r3, #4
 80060f8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80060fc:	43db      	mvns	r3, r3
 80060fe:	401a      	ands	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800610c:	4313      	orrs	r3, r2
 800610e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <LL_RCC_SetLPTIMClockSource>:
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800612a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	0c1b      	lsrs	r3, r3, #16
 8006132:	041b      	lsls	r3, r3, #16
 8006134:	43db      	mvns	r3, r3
 8006136:	401a      	ands	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	041b      	lsls	r3, r3, #16
 800613c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <LL_RCC_SetSAIClockSource>:
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800615a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800615e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006162:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4313      	orrs	r3, r2
 800616e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <LL_RCC_SetRNGClockSource>:
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800618a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4313      	orrs	r3, r2
 800619a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <LL_RCC_SetCLK48ClockSource>:
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80061b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <LL_RCC_SetUSBClockSource>:
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b082      	sub	sp, #8
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7ff ffe3 	bl	80061aa <LL_RCC_SetCLK48ClockSource>
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <LL_RCC_SetADCClockSource>:
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80061f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006200:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <LL_RCC_SetRTCClockSource>:
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800622c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4313      	orrs	r3, r2
 8006234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <LL_RCC_GetRTCClockSource>:
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800624c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006250:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006254:	4618      	mov	r0, r3
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <LL_RCC_ForceBackupDomainReset>:
{
 800625e:	b480      	push	{r7}
 8006260:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800626e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006276:	bf00      	nop
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006298:	bf00      	nop
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <LL_RCC_PLLSAI1_Enable>:
{
 80062a2:	b480      	push	{r7}
 80062a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80062a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062b4:	6013      	str	r3, [r2, #0]
}
 80062b6:	bf00      	nop
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <LL_RCC_PLLSAI1_Disable>:
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80062c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062d2:	6013      	str	r3, [r2, #0]
}
 80062d4:	bf00      	nop
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <LL_RCC_PLLSAI1_IsReady>:
{
 80062de:	b480      	push	{r7}
 80062e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80062e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062f0:	d101      	bne.n	80062f6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b088      	sub	sp, #32
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800630a:	2300      	movs	r3, #0
 800630c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800630e:	2300      	movs	r3, #0
 8006310:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d034      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006326:	d021      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006328:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800632c:	d81b      	bhi.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800632e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006332:	d01d      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006334:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006338:	d815      	bhi.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00b      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800633e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006342:	d110      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800634e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006352:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006354:	e00d      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3304      	adds	r3, #4
 800635a:	4618      	mov	r0, r3
 800635c:	f000 f947 	bl	80065ee <RCCEx_PLLSAI1_ConfigNP>
 8006360:	4603      	mov	r3, r0
 8006362:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006364:	e005      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	77fb      	strb	r3, [r7, #31]
        break;
 800636a:	e002      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800636c:	bf00      	nop
 800636e:	e000      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006372:	7ffb      	ldrb	r3, [r7, #31]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d105      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff fee8 	bl	8006152 <LL_RCC_SetSAIClockSource>
 8006382:	e001      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006384:	7ffb      	ldrb	r3, [r7, #31]
 8006386:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006390:	2b00      	cmp	r3, #0
 8006392:	d046      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006394:	f7ff ff56 	bl	8006244 <LL_RCC_GetRTCClockSource>
 8006398:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d03c      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80063a4:	f7fe fc4e 	bl	8004c44 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d105      	bne.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff ff30 	bl	8006218 <LL_RCC_SetRTCClockSource>
 80063b8:	e02e      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80063ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80063c4:	f7ff ff4b 	bl	800625e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80063c8:	f7ff ff5a 	bl	8006280 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80063da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80063e4:	f7ff fdf0 	bl	8005fc8 <LL_RCC_LSE_IsEnabled>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d114      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063ee:	f7fd fcc7 	bl	8003d80 <HAL_GetTick>
 80063f2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80063f4:	e00b      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f6:	f7fd fcc3 	bl	8003d80 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	f241 3288 	movw	r2, #5000	; 0x1388
 8006404:	4293      	cmp	r3, r2
 8006406:	d902      	bls.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	77fb      	strb	r3, [r7, #31]
              break;
 800640c:	e004      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800640e:	f7ff fded 	bl	8005fec <LL_RCC_LSE_IsReady>
 8006412:	4603      	mov	r3, r0
 8006414:	2b01      	cmp	r3, #1
 8006416:	d1ee      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006418:	7ffb      	ldrb	r3, [r7, #31]
 800641a:	77bb      	strb	r3, [r7, #30]
 800641c:	e001      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641e:	7ffb      	ldrb	r3, [r7, #31]
 8006420:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d004      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff fe2a 	bl	800608c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d004      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff fe35 	bl	80060b8 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b00      	cmp	r3, #0
 8006458:	d004      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff fe5d 	bl	800611e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b00      	cmp	r3, #0
 800646e:	d004      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff fe52 	bl	800611e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0304 	and.w	r3, r3, #4
 8006482:	2b00      	cmp	r3, #0
 8006484:	d004      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	4618      	mov	r0, r3
 800648c:	f7ff fe2a 	bl	80060e4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d004      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff fe1f 	bl	80060e4 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d022      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7ff fe8d 	bl	80061d6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064c4:	d107      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80064c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064d4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064de:	d10b      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 f8dd 	bl	80066a4 <RCCEx_PLLSAI1_ConfigNQ>
 80064ea:	4603      	mov	r3, r0
 80064ec:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80064ee:	7ffb      	ldrb	r3, [r7, #31]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80064f4:	7ffb      	ldrb	r3, [r7, #31]
 80064f6:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006500:	2b00      	cmp	r3, #0
 8006502:	d02b      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800650c:	d008      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006516:	d003      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	2b00      	cmp	r3, #0
 800651e:	d105      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff fe2a 	bl	800617e <LL_RCC_SetRNGClockSource>
 800652a:	e00a      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	2000      	movs	r0, #0
 8006538:	f7ff fe21 	bl	800617e <LL_RCC_SetRNGClockSource>
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f7ff fe34 	bl	80061aa <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800654a:	d107      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800654c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800655a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006564:	2b00      	cmp	r3, #0
 8006566:	d022      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fe3d 	bl	80061ec <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800657a:	d107      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800657c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800658a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006590:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006594:	d10b      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3304      	adds	r3, #4
 800659a:	4618      	mov	r0, r3
 800659c:	f000 f8dd 	bl	800675a <RCCEx_PLLSAI1_ConfigNR>
 80065a0:	4603      	mov	r3, r0
 80065a2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80065a4:	7ffb      	ldrb	r3, [r7, #31]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80065aa:	7ffb      	ldrb	r3, [r7, #31]
 80065ac:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d004      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff fd26 	bl	8006010 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d009      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7ff fd45 	bl	8006064 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff fd2c 	bl	800603c <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80065e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3720      	adds	r7, #32
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80065fa:	f7ff fe61 	bl	80062c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80065fe:	f7fd fbbf 	bl	8003d80 <HAL_GetTick>
 8006602:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006604:	e009      	b.n	800661a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006606:	f7fd fbbb 	bl	8003d80 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d902      	bls.n	800661a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	73fb      	strb	r3, [r7, #15]
      break;
 8006618:	e004      	b.n	8006624 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800661a:	f7ff fe60 	bl	80062de <LL_RCC_PLLSAI1_IsReady>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1f0      	bne.n	8006606 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d137      	bne.n	800669a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800662a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	021b      	lsls	r3, r3, #8
 800663a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800663e:	4313      	orrs	r3, r2
 8006640:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006654:	4313      	orrs	r3, r2
 8006656:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006658:	f7ff fe23 	bl	80062a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800665c:	f7fd fb90 	bl	8003d80 <HAL_GetTick>
 8006660:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006662:	e009      	b.n	8006678 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006664:	f7fd fb8c 	bl	8003d80 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b02      	cmp	r3, #2
 8006670:	d902      	bls.n	8006678 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	73fb      	strb	r3, [r7, #15]
        break;
 8006676:	e004      	b.n	8006682 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006678:	f7ff fe31 	bl	80062de <LL_RCC_PLLSAI1_IsReady>
 800667c:	4603      	mov	r3, r0
 800667e:	2b01      	cmp	r3, #1
 8006680:	d1f0      	bne.n	8006664 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d108      	bne.n	800669a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800668c:	691a      	ldr	r2, [r3, #16]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006696:	4313      	orrs	r3, r2
 8006698:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800669a:	7bfb      	ldrb	r3, [r7, #15]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80066b0:	f7ff fe06 	bl	80062c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066b4:	f7fd fb64 	bl	8003d80 <HAL_GetTick>
 80066b8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066ba:	e009      	b.n	80066d0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066bc:	f7fd fb60 	bl	8003d80 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d902      	bls.n	80066d0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	73fb      	strb	r3, [r7, #15]
      break;
 80066ce:	e004      	b.n	80066da <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066d0:	f7ff fe05 	bl	80062de <LL_RCC_PLLSAI1_IsReady>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1f0      	bne.n	80066bc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d137      	bne.n	8006750 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80066e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	021b      	lsls	r3, r3, #8
 80066f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066f4:	4313      	orrs	r3, r2
 80066f6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80066f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800670a:	4313      	orrs	r3, r2
 800670c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800670e:	f7ff fdc8 	bl	80062a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006712:	f7fd fb35 	bl	8003d80 <HAL_GetTick>
 8006716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006718:	e009      	b.n	800672e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800671a:	f7fd fb31 	bl	8003d80 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d902      	bls.n	800672e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	73fb      	strb	r3, [r7, #15]
        break;
 800672c:	e004      	b.n	8006738 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800672e:	f7ff fdd6 	bl	80062de <LL_RCC_PLLSAI1_IsReady>
 8006732:	4603      	mov	r3, r0
 8006734:	2b01      	cmp	r3, #1
 8006736:	d1f0      	bne.n	800671a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d108      	bne.n	8006750 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800673e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006742:	691a      	ldr	r2, [r3, #16]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800674c:	4313      	orrs	r3, r2
 800674e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006766:	f7ff fdab 	bl	80062c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800676a:	f7fd fb09 	bl	8003d80 <HAL_GetTick>
 800676e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006770:	e009      	b.n	8006786 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006772:	f7fd fb05 	bl	8003d80 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d902      	bls.n	8006786 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	73fb      	strb	r3, [r7, #15]
      break;
 8006784:	e004      	b.n	8006790 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006786:	f7ff fdaa 	bl	80062de <LL_RCC_PLLSAI1_IsReady>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1f0      	bne.n	8006772 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d137      	bne.n	8006806 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067aa:	4313      	orrs	r3, r2
 80067ac:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80067ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067c0:	4313      	orrs	r3, r2
 80067c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80067c4:	f7ff fd6d 	bl	80062a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067c8:	f7fd fada 	bl	8003d80 <HAL_GetTick>
 80067cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067ce:	e009      	b.n	80067e4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067d0:	f7fd fad6 	bl	8003d80 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d902      	bls.n	80067e4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	73fb      	strb	r3, [r7, #15]
        break;
 80067e2:	e004      	b.n	80067ee <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067e4:	f7ff fd7b 	bl	80062de <LL_RCC_PLLSAI1_IsReady>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d1f0      	bne.n	80067d0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d108      	bne.n	8006806 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80067f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067f8:	691a      	ldr	r2, [r3, #16]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006802:	4313      	orrs	r3, r2
 8006804:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006806:	7bfb      	ldrb	r3, [r7, #15]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e027      	b.n	8006872 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	7a5b      	ldrb	r3, [r3, #9]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d105      	bne.n	8006838 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7fb fe2e 	bl	8002494 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f023 0120 	bic.w	r1, r3, #32
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0204 	orr.w	r2, r2, #4
 8006862:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b082      	sub	sp, #8
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e090      	b.n	80069ae <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	d106      	bne.n	80068a6 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7fb fe21 	bl	80024e8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2202      	movs	r2, #2
 80068aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	22ca      	movs	r2, #202	; 0xca
 80068b4:	625a      	str	r2, [r3, #36]	; 0x24
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2253      	movs	r2, #83	; 0x53
 80068bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f89f 	bl	8006a02 <RTC_EnterInitMode>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	22ff      	movs	r2, #255	; 0xff
 80068d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2204      	movs	r2, #4
 80068d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e067      	b.n	80069ae <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	6812      	ldr	r2, [r2, #0]
 80068e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80068ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6899      	ldr	r1, [r3, #8]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	68d2      	ldr	r2, [r2, #12]
 8006918:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6919      	ldr	r1, [r3, #16]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	041a      	lsls	r2, r3, #16
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68da      	ldr	r2, [r3, #12]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800693c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 0203 	bic.w	r2, r2, #3
 800694c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	69da      	ldr	r2, [r3, #28]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	431a      	orrs	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 0320 	and.w	r3, r3, #32
 8006970:	2b00      	cmp	r3, #0
 8006972:	d113      	bne.n	800699c <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f81e 	bl	80069b6 <HAL_RTC_WaitForSynchro>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00d      	beq.n	800699c <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	22ff      	movs	r2, #255	; 0xff
 8006986:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2204      	movs	r2, #4
 800698c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e008      	b.n	80069ae <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	22ff      	movs	r2, #255	; 0xff
 80069a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80069ac:	2300      	movs	r3, #0
  }
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b084      	sub	sp, #16
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069cc:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80069ce:	f7fd f9d7 	bl	8003d80 <HAL_GetTick>
 80069d2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069d4:	e009      	b.n	80069ea <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069d6:	f7fd f9d3 	bl	8003d80 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069e4:	d901      	bls.n	80069ea <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e007      	b.n	80069fa <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f003 0320 	and.w	r3, r3, #32
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0ee      	beq.n	80069d6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d119      	bne.n	8006a4c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a20:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006a22:	f7fd f9ad 	bl	8003d80 <HAL_GetTick>
 8006a26:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a28:	e009      	b.n	8006a3e <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a2a:	f7fd f9a9 	bl	8003d80 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a38:	d901      	bls.n	8006a3e <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e007      	b.n	8006a4e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0ee      	beq.n	8006a2a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
	...

08006a58 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	e0a8      	b.n	8006bc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	22ca      	movs	r2, #202	; 0xca
 8006a88:	625a      	str	r2, [r3, #36]	; 0x24
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2253      	movs	r2, #83	; 0x53
 8006a90:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d020      	beq.n	8006ae2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006aa0:	f7fd f96e 	bl	8003d80 <HAL_GetTick>
 8006aa4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006aa6:	e015      	b.n	8006ad4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006aa8:	f7fd f96a 	bl	8003d80 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ab6:	d90d      	bls.n	8006ad4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	22ff      	movs	r2, #255	; 0xff
 8006abe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2203      	movs	r2, #3
 8006ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e077      	b.n	8006bc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1e2      	bne.n	8006aa8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006af0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006b02:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006b04:	f7fd f93c 	bl	8003d80 <HAL_GetTick>
 8006b08:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006b0a:	e015      	b.n	8006b38 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b0c:	f7fd f938 	bl	8003d80 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b1a:	d90d      	bls.n	8006b38 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	22ff      	movs	r2, #255	; 0xff
 8006b22:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2203      	movs	r2, #3
 8006b28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e045      	b.n	8006bc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f003 0304 	and.w	r3, r3, #4
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0e2      	beq.n	8006b0c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0207 	bic.w	r2, r2, #7
 8006b5c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6899      	ldr	r1, [r3, #8]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006b6e:	4b17      	ldr	r3, [pc, #92]	; (8006bcc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b74:	4a15      	ldr	r2, [pc, #84]	; (8006bcc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006b76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b7a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006b7e:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a12      	ldr	r2, [pc, #72]	; (8006bcc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006b84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b88:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b98:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ba8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	22ff      	movs	r2, #255	; 0xff
 8006bb0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3718      	adds	r7, #24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	58000800 	.word	0x58000800

08006bd0 <LL_RCC_GetUSARTClockSource>:
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4013      	ands	r3, r2
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <LL_RCC_GetLPUARTClockSource>:
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bfc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4013      	ands	r3, r2
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e042      	b.n	8006ca8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d106      	bne.n	8006c3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7fb fb39 	bl	80022ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2224      	movs	r2, #36	; 0x24
 8006c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0201 	bic.w	r2, r2, #1
 8006c50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fbf6 	bl	8007444 <UART_SetConfig>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e022      	b.n	8006ca8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fe12 	bl	8007894 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0201 	orr.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fe99 	bl	80079d8 <UART_CheckIdleState>
 8006ca6:	4603      	mov	r3, r0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08a      	sub	sp, #40	; 0x28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cc4:	2b20      	cmp	r3, #32
 8006cc6:	d17a      	bne.n	8006dbe <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <HAL_UART_Transmit_DMA+0x24>
 8006cce:	88fb      	ldrh	r3, [r7, #6]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e073      	b.n	8006dc0 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_UART_Transmit_DMA+0x36>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e06c      	b.n	8006dc0 <HAL_UART_Transmit_DMA+0x110>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	88fa      	ldrh	r2, [r7, #6]
 8006cf8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	88fa      	ldrh	r2, [r7, #6]
 8006d00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2221      	movs	r2, #33	; 0x21
 8006d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d02c      	beq.n	8006d76 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d20:	4a29      	ldr	r2, [pc, #164]	; (8006dc8 <HAL_UART_Transmit_DMA+0x118>)
 8006d22:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d28:	4a28      	ldr	r2, [pc, #160]	; (8006dcc <HAL_UART_Transmit_DMA+0x11c>)
 8006d2a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d30:	4a27      	ldr	r2, [pc, #156]	; (8006dd0 <HAL_UART_Transmit_DMA+0x120>)
 8006d32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d38:	2200      	movs	r2, #0
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d44:	4619      	mov	r1, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3328      	adds	r3, #40	; 0x28
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	88fb      	ldrh	r3, [r7, #6]
 8006d50:	f7fd fa7c 	bl	800424c <HAL_DMA_Start_IT>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00d      	beq.n	8006d76 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2210      	movs	r2, #16
 8006d5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e024      	b.n	8006dc0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2240      	movs	r2, #64	; 0x40
 8006d7c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3308      	adds	r3, #8
 8006d8c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	613b      	str	r3, [r7, #16]
   return(result);
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3308      	adds	r3, #8
 8006da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da6:	623a      	str	r2, [r7, #32]
 8006da8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	69f9      	ldr	r1, [r7, #28]
 8006dac:	6a3a      	ldr	r2, [r7, #32]
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e5      	bne.n	8006d86 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e000      	b.n	8006dc0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8006dbe:	2302      	movs	r3, #2
  }
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3728      	adds	r7, #40	; 0x28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	08007d4d 	.word	0x08007d4d
 8006dcc:	08007de7 	.word	0x08007de7
 8006dd0:	08007e03 	.word	0x08007e03

08006dd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b0ba      	sub	sp, #232	; 0xe8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006dfa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006dfe:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e02:	4013      	ands	r3, r2
 8006e04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006e08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d11b      	bne.n	8006e48 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d015      	beq.n	8006e48 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e20:	f003 0320 	and.w	r3, r3, #32
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d105      	bne.n	8006e34 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d009      	beq.n	8006e48 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 82d6 	beq.w	80073ea <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	4798      	blx	r3
      }
      return;
 8006e46:	e2d0      	b.n	80073ea <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 811f 	beq.w	8007090 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006e52:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006e56:	4b8b      	ldr	r3, [pc, #556]	; (8007084 <HAL_UART_IRQHandler+0x2b0>)
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006e5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006e62:	4b89      	ldr	r3, [pc, #548]	; (8007088 <HAL_UART_IRQHandler+0x2b4>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 8112 	beq.w	8007090 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d011      	beq.n	8006e9c <HAL_UART_IRQHandler+0xc8>
 8006e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00b      	beq.n	8006e9c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e92:	f043 0201 	orr.w	r2, r3, #1
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d011      	beq.n	8006ecc <HAL_UART_IRQHandler+0xf8>
 8006ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2202      	movs	r2, #2
 8006eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ec2:	f043 0204 	orr.w	r2, r3, #4
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d011      	beq.n	8006efc <HAL_UART_IRQHandler+0x128>
 8006ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00b      	beq.n	8006efc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2204      	movs	r2, #4
 8006eea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ef2:	f043 0202 	orr.w	r2, r3, #2
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f00:	f003 0308 	and.w	r3, r3, #8
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d017      	beq.n	8006f38 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f0c:	f003 0320 	and.w	r3, r3, #32
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d105      	bne.n	8006f20 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f14:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006f18:	4b5a      	ldr	r3, [pc, #360]	; (8007084 <HAL_UART_IRQHandler+0x2b0>)
 8006f1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2208      	movs	r2, #8
 8006f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f2e:	f043 0208 	orr.w	r2, r3, #8
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d012      	beq.n	8006f6a <HAL_UART_IRQHandler+0x196>
 8006f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00c      	beq.n	8006f6a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f60:	f043 0220 	orr.w	r2, r3, #32
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f000 823c 	beq.w	80073ee <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d013      	beq.n	8006faa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d105      	bne.n	8006f9a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d007      	beq.n	8006faa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fbe:	2b40      	cmp	r3, #64	; 0x40
 8006fc0:	d005      	beq.n	8006fce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d04f      	beq.n	800706e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fe56 	bl	8007c80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fde:	2b40      	cmp	r3, #64	; 0x40
 8006fe0:	d141      	bne.n	8007066 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3308      	adds	r3, #8
 800700a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800700e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007016:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800701a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1d9      	bne.n	8006fe2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d013      	beq.n	800705e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800703a:	4a14      	ldr	r2, [pc, #80]	; (800708c <HAL_UART_IRQHandler+0x2b8>)
 800703c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007042:	4618      	mov	r0, r3
 8007044:	f7fd f9dc 	bl	8004400 <HAL_DMA_Abort_IT>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d017      	beq.n	800707e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007058:	4610      	mov	r0, r2
 800705a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800705c:	e00f      	b.n	800707e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f9da 	bl	8007418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007064:	e00b      	b.n	800707e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f9d6 	bl	8007418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800706c:	e007      	b.n	800707e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f9d2 	bl	8007418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800707c:	e1b7      	b.n	80073ee <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800707e:	bf00      	nop
    return;
 8007080:	e1b5      	b.n	80073ee <HAL_UART_IRQHandler+0x61a>
 8007082:	bf00      	nop
 8007084:	10000001 	.word	0x10000001
 8007088:	04000120 	.word	0x04000120
 800708c:	08007e83 	.word	0x08007e83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007094:	2b01      	cmp	r3, #1
 8007096:	f040 814a 	bne.w	800732e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800709a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709e:	f003 0310 	and.w	r3, r3, #16
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 8143 	beq.w	800732e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80070a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ac:	f003 0310 	and.w	r3, r3, #16
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 813c 	beq.w	800732e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2210      	movs	r2, #16
 80070bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c8:	2b40      	cmp	r3, #64	; 0x40
 80070ca:	f040 80b5 	bne.w	8007238 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80070da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 8187 	beq.w	80073f2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070ee:	429a      	cmp	r2, r3
 80070f0:	f080 817f 	bcs.w	80073f2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0320 	and.w	r3, r3, #32
 800710a:	2b00      	cmp	r3, #0
 800710c:	f040 8086 	bne.w	800721c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800711c:	e853 3f00 	ldrex	r3, [r3]
 8007120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007124:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800712c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	461a      	mov	r2, r3
 8007136:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800713a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800713e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007142:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007146:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1da      	bne.n	8007110 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3308      	adds	r3, #8
 8007160:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800716a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800716c:	f023 0301 	bic.w	r3, r3, #1
 8007170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3308      	adds	r3, #8
 800717a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800717e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007182:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007184:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007186:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800718a:	e841 2300 	strex	r3, r2, [r1]
 800718e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e1      	bne.n	800715a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3308      	adds	r3, #8
 800719c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3308      	adds	r3, #8
 80071b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80071c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e3      	bne.n	8007196 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2220      	movs	r2, #32
 80071d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ec:	f023 0310 	bic.w	r3, r3, #16
 80071f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007200:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007202:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007204:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007206:	e841 2300 	strex	r3, r2, [r1]
 800720a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800720c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1e4      	bne.n	80071dc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007216:	4618      	mov	r0, r3
 8007218:	f7fd f893 	bl	8004342 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007228:	b29b      	uxth	r3, r3
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	b29b      	uxth	r3, r3
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f8fb 	bl	800742c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007236:	e0dc      	b.n	80073f2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007244:	b29b      	uxth	r3, r3
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 80ce 	beq.w	80073f6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800725a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 80c9 	beq.w	80073f6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007274:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007278:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	461a      	mov	r2, r3
 8007282:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007286:	647b      	str	r3, [r7, #68]	; 0x44
 8007288:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800728c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e4      	bne.n	8007264 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3308      	adds	r3, #8
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	623b      	str	r3, [r7, #32]
   return(result);
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072b0:	f023 0301 	bic.w	r3, r3, #1
 80072b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3308      	adds	r3, #8
 80072be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072c2:	633a      	str	r2, [r7, #48]	; 0x30
 80072c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ca:	e841 2300 	strex	r3, r2, [r1]
 80072ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1e1      	bne.n	800729a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2220      	movs	r2, #32
 80072da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0310 	bic.w	r3, r3, #16
 80072fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800730c:	61fb      	str	r3, [r7, #28]
 800730e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007310:	69b9      	ldr	r1, [r7, #24]
 8007312:	69fa      	ldr	r2, [r7, #28]
 8007314:	e841 2300 	strex	r3, r2, [r1]
 8007318:	617b      	str	r3, [r7, #20]
   return(result);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1e4      	bne.n	80072ea <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f880 	bl	800742c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800732c:	e063      	b.n	80073f6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800732e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00e      	beq.n	8007358 <HAL_UART_IRQHandler+0x584>
 800733a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800733e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d008      	beq.n	8007358 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800734e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fdd7 	bl	8007f04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007356:	e051      	b.n	80073fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800735c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007360:	2b00      	cmp	r3, #0
 8007362:	d014      	beq.n	800738e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736c:	2b00      	cmp	r3, #0
 800736e:	d105      	bne.n	800737c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d008      	beq.n	800738e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007380:	2b00      	cmp	r3, #0
 8007382:	d03a      	beq.n	80073fa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	4798      	blx	r3
    }
    return;
 800738c:	e035      	b.n	80073fa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800738e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007396:	2b00      	cmp	r3, #0
 8007398:	d009      	beq.n	80073ae <HAL_UART_IRQHandler+0x5da>
 800739a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800739e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fd81 	bl	8007eae <UART_EndTransmit_IT>
    return;
 80073ac:	e026      	b.n	80073fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80073ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d009      	beq.n	80073ce <HAL_UART_IRQHandler+0x5fa>
 80073ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fdb0 	bl	8007f2c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073cc:	e016      	b.n	80073fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80073ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d010      	beq.n	80073fc <HAL_UART_IRQHandler+0x628>
 80073da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	da0c      	bge.n	80073fc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fd98 	bl	8007f18 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073e8:	e008      	b.n	80073fc <HAL_UART_IRQHandler+0x628>
      return;
 80073ea:	bf00      	nop
 80073ec:	e006      	b.n	80073fc <HAL_UART_IRQHandler+0x628>
    return;
 80073ee:	bf00      	nop
 80073f0:	e004      	b.n	80073fc <HAL_UART_IRQHandler+0x628>
      return;
 80073f2:	bf00      	nop
 80073f4:	e002      	b.n	80073fc <HAL_UART_IRQHandler+0x628>
      return;
 80073f6:	bf00      	nop
 80073f8:	e000      	b.n	80073fc <HAL_UART_IRQHandler+0x628>
    return;
 80073fa:	bf00      	nop
  }
}
 80073fc:	37e8      	adds	r7, #232	; 0xe8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop

08007404 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007448:	b08c      	sub	sp, #48	; 0x30
 800744a:	af00      	add	r7, sp, #0
 800744c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	431a      	orrs	r2, r3
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	431a      	orrs	r2, r3
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	4313      	orrs	r3, r2
 800746a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	4baf      	ldr	r3, [pc, #700]	; (8007730 <UART_SetConfig+0x2ec>)
 8007474:	4013      	ands	r3, r2
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	6812      	ldr	r2, [r2, #0]
 800747a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800747c:	430b      	orrs	r3, r1
 800747e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	68da      	ldr	r2, [r3, #12]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4aa4      	ldr	r2, [pc, #656]	; (8007734 <UART_SetConfig+0x2f0>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d004      	beq.n	80074b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074ac:	4313      	orrs	r3, r2
 80074ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80074ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	6812      	ldr	r2, [r2, #0]
 80074c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074c4:	430b      	orrs	r3, r1
 80074c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ce:	f023 010f 	bic.w	r1, r3, #15
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a95      	ldr	r2, [pc, #596]	; (8007738 <UART_SetConfig+0x2f4>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d125      	bne.n	8007534 <UART_SetConfig+0xf0>
 80074e8:	2003      	movs	r0, #3
 80074ea:	f7ff fb71 	bl	8006bd0 <LL_RCC_GetUSARTClockSource>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d81b      	bhi.n	800752c <UART_SetConfig+0xe8>
 80074f4:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <UART_SetConfig+0xb8>)
 80074f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fa:	bf00      	nop
 80074fc:	0800750d 	.word	0x0800750d
 8007500:	0800751d 	.word	0x0800751d
 8007504:	08007515 	.word	0x08007515
 8007508:	08007525 	.word	0x08007525
 800750c:	2301      	movs	r3, #1
 800750e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007512:	e042      	b.n	800759a <UART_SetConfig+0x156>
 8007514:	2302      	movs	r3, #2
 8007516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800751a:	e03e      	b.n	800759a <UART_SetConfig+0x156>
 800751c:	2304      	movs	r3, #4
 800751e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007522:	e03a      	b.n	800759a <UART_SetConfig+0x156>
 8007524:	2308      	movs	r3, #8
 8007526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800752a:	e036      	b.n	800759a <UART_SetConfig+0x156>
 800752c:	2310      	movs	r3, #16
 800752e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007532:	e032      	b.n	800759a <UART_SetConfig+0x156>
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a7e      	ldr	r2, [pc, #504]	; (8007734 <UART_SetConfig+0x2f0>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d12a      	bne.n	8007594 <UART_SetConfig+0x150>
 800753e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007542:	f7ff fb55 	bl	8006bf0 <LL_RCC_GetLPUARTClockSource>
 8007546:	4603      	mov	r3, r0
 8007548:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800754c:	d01a      	beq.n	8007584 <UART_SetConfig+0x140>
 800754e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007552:	d81b      	bhi.n	800758c <UART_SetConfig+0x148>
 8007554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007558:	d00c      	beq.n	8007574 <UART_SetConfig+0x130>
 800755a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800755e:	d815      	bhi.n	800758c <UART_SetConfig+0x148>
 8007560:	2b00      	cmp	r3, #0
 8007562:	d003      	beq.n	800756c <UART_SetConfig+0x128>
 8007564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007568:	d008      	beq.n	800757c <UART_SetConfig+0x138>
 800756a:	e00f      	b.n	800758c <UART_SetConfig+0x148>
 800756c:	2300      	movs	r3, #0
 800756e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007572:	e012      	b.n	800759a <UART_SetConfig+0x156>
 8007574:	2302      	movs	r3, #2
 8007576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800757a:	e00e      	b.n	800759a <UART_SetConfig+0x156>
 800757c:	2304      	movs	r3, #4
 800757e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007582:	e00a      	b.n	800759a <UART_SetConfig+0x156>
 8007584:	2308      	movs	r3, #8
 8007586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800758a:	e006      	b.n	800759a <UART_SetConfig+0x156>
 800758c:	2310      	movs	r3, #16
 800758e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007592:	e002      	b.n	800759a <UART_SetConfig+0x156>
 8007594:	2310      	movs	r3, #16
 8007596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a65      	ldr	r2, [pc, #404]	; (8007734 <UART_SetConfig+0x2f0>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	f040 8097 	bne.w	80076d4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075aa:	2b08      	cmp	r3, #8
 80075ac:	d823      	bhi.n	80075f6 <UART_SetConfig+0x1b2>
 80075ae:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <UART_SetConfig+0x170>)
 80075b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b4:	080075d9 	.word	0x080075d9
 80075b8:	080075f7 	.word	0x080075f7
 80075bc:	080075e1 	.word	0x080075e1
 80075c0:	080075f7 	.word	0x080075f7
 80075c4:	080075e7 	.word	0x080075e7
 80075c8:	080075f7 	.word	0x080075f7
 80075cc:	080075f7 	.word	0x080075f7
 80075d0:	080075f7 	.word	0x080075f7
 80075d4:	080075ef 	.word	0x080075ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075d8:	f7fe fc16 	bl	8005e08 <HAL_RCC_GetPCLK1Freq>
 80075dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075de:	e010      	b.n	8007602 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075e0:	4b56      	ldr	r3, [pc, #344]	; (800773c <UART_SetConfig+0x2f8>)
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075e4:	e00d      	b.n	8007602 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075e6:	f7fe fb8f 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 80075ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075ec:	e009      	b.n	8007602 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075f4:	e005      	b.n	8007602 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007600:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 812b 	beq.w	8007860 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	4a4c      	ldr	r2, [pc, #304]	; (8007740 <UART_SetConfig+0x2fc>)
 8007610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007614:	461a      	mov	r2, r3
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	fbb3 f3f2 	udiv	r3, r3, r2
 800761c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	4613      	mov	r3, r2
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	4413      	add	r3, r2
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	429a      	cmp	r2, r3
 800762c:	d305      	bcc.n	800763a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	429a      	cmp	r2, r3
 8007638:	d903      	bls.n	8007642 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007640:	e10e      	b.n	8007860 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	2200      	movs	r2, #0
 8007646:	60bb      	str	r3, [r7, #8]
 8007648:	60fa      	str	r2, [r7, #12]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764e:	4a3c      	ldr	r2, [pc, #240]	; (8007740 <UART_SetConfig+0x2fc>)
 8007650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007654:	b29b      	uxth	r3, r3
 8007656:	2200      	movs	r2, #0
 8007658:	603b      	str	r3, [r7, #0]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007660:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007664:	f7f8 fde4 	bl	8000230 <__aeabi_uldivmod>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	4610      	mov	r0, r2
 800766e:	4619      	mov	r1, r3
 8007670:	f04f 0200 	mov.w	r2, #0
 8007674:	f04f 0300 	mov.w	r3, #0
 8007678:	020b      	lsls	r3, r1, #8
 800767a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800767e:	0202      	lsls	r2, r0, #8
 8007680:	6979      	ldr	r1, [r7, #20]
 8007682:	6849      	ldr	r1, [r1, #4]
 8007684:	0849      	lsrs	r1, r1, #1
 8007686:	2000      	movs	r0, #0
 8007688:	460c      	mov	r4, r1
 800768a:	4605      	mov	r5, r0
 800768c:	eb12 0804 	adds.w	r8, r2, r4
 8007690:	eb43 0905 	adc.w	r9, r3, r5
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	469a      	mov	sl, r3
 800769c:	4693      	mov	fp, r2
 800769e:	4652      	mov	r2, sl
 80076a0:	465b      	mov	r3, fp
 80076a2:	4640      	mov	r0, r8
 80076a4:	4649      	mov	r1, r9
 80076a6:	f7f8 fdc3 	bl	8000230 <__aeabi_uldivmod>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4613      	mov	r3, r2
 80076b0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076b8:	d308      	bcc.n	80076cc <UART_SetConfig+0x288>
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076c0:	d204      	bcs.n	80076cc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6a3a      	ldr	r2, [r7, #32]
 80076c8:	60da      	str	r2, [r3, #12]
 80076ca:	e0c9      	b.n	8007860 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076d2:	e0c5      	b.n	8007860 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076dc:	d16e      	bne.n	80077bc <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80076de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076e2:	3b01      	subs	r3, #1
 80076e4:	2b07      	cmp	r3, #7
 80076e6:	d82d      	bhi.n	8007744 <UART_SetConfig+0x300>
 80076e8:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <UART_SetConfig+0x2ac>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007711 	.word	0x08007711
 80076f4:	08007719 	.word	0x08007719
 80076f8:	08007745 	.word	0x08007745
 80076fc:	0800771f 	.word	0x0800771f
 8007700:	08007745 	.word	0x08007745
 8007704:	08007745 	.word	0x08007745
 8007708:	08007745 	.word	0x08007745
 800770c:	08007727 	.word	0x08007727
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007710:	f7fe fb90 	bl	8005e34 <HAL_RCC_GetPCLK2Freq>
 8007714:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007716:	e01b      	b.n	8007750 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007718:	4b08      	ldr	r3, [pc, #32]	; (800773c <UART_SetConfig+0x2f8>)
 800771a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800771c:	e018      	b.n	8007750 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800771e:	f7fe faf3 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 8007722:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007724:	e014      	b.n	8007750 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800772a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800772c:	e010      	b.n	8007750 <UART_SetConfig+0x30c>
 800772e:	bf00      	nop
 8007730:	cfff69f3 	.word	0xcfff69f3
 8007734:	40008000 	.word	0x40008000
 8007738:	40013800 	.word	0x40013800
 800773c:	00f42400 	.word	0x00f42400
 8007740:	0800d034 	.word	0x0800d034
      default:
        pclk = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800774e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 8084 	beq.w	8007860 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775c:	4a4b      	ldr	r2, [pc, #300]	; (800788c <UART_SetConfig+0x448>)
 800775e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007762:	461a      	mov	r2, r3
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	fbb3 f3f2 	udiv	r3, r3, r2
 800776a:	005a      	lsls	r2, r3, #1
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	085b      	lsrs	r3, r3, #1
 8007772:	441a      	add	r2, r3
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	fbb2 f3f3 	udiv	r3, r2, r3
 800777c:	b29b      	uxth	r3, r3
 800777e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	2b0f      	cmp	r3, #15
 8007784:	d916      	bls.n	80077b4 <UART_SetConfig+0x370>
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800778c:	d212      	bcs.n	80077b4 <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	b29b      	uxth	r3, r3
 8007792:	f023 030f 	bic.w	r3, r3, #15
 8007796:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	085b      	lsrs	r3, r3, #1
 800779c:	b29b      	uxth	r3, r3
 800779e:	f003 0307 	and.w	r3, r3, #7
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	8bfb      	ldrh	r3, [r7, #30]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	8bfa      	ldrh	r2, [r7, #30]
 80077b0:	60da      	str	r2, [r3, #12]
 80077b2:	e055      	b.n	8007860 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80077ba:	e051      	b.n	8007860 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077c0:	3b01      	subs	r3, #1
 80077c2:	2b07      	cmp	r3, #7
 80077c4:	d821      	bhi.n	800780a <UART_SetConfig+0x3c6>
 80077c6:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <UART_SetConfig+0x388>)
 80077c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077cc:	080077ed 	.word	0x080077ed
 80077d0:	080077f5 	.word	0x080077f5
 80077d4:	0800780b 	.word	0x0800780b
 80077d8:	080077fb 	.word	0x080077fb
 80077dc:	0800780b 	.word	0x0800780b
 80077e0:	0800780b 	.word	0x0800780b
 80077e4:	0800780b 	.word	0x0800780b
 80077e8:	08007803 	.word	0x08007803
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077ec:	f7fe fb22 	bl	8005e34 <HAL_RCC_GetPCLK2Freq>
 80077f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077f2:	e010      	b.n	8007816 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077f4:	4b26      	ldr	r3, [pc, #152]	; (8007890 <UART_SetConfig+0x44c>)
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077f8:	e00d      	b.n	8007816 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077fa:	f7fe fa85 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 80077fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007800:	e009      	b.n	8007816 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007806:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007808:	e005      	b.n	8007816 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007814:	bf00      	nop
    }

    if (pclk != 0U)
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	2b00      	cmp	r3, #0
 800781a:	d021      	beq.n	8007860 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007820:	4a1a      	ldr	r2, [pc, #104]	; (800788c <UART_SetConfig+0x448>)
 8007822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007826:	461a      	mov	r2, r3
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	fbb3 f2f2 	udiv	r2, r3, r2
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	085b      	lsrs	r3, r3, #1
 8007834:	441a      	add	r2, r3
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	fbb2 f3f3 	udiv	r3, r2, r3
 800783e:	b29b      	uxth	r3, r3
 8007840:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	2b0f      	cmp	r3, #15
 8007846:	d908      	bls.n	800785a <UART_SetConfig+0x416>
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800784e:	d204      	bcs.n	800785a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6a3a      	ldr	r2, [r7, #32]
 8007856:	60da      	str	r2, [r3, #12]
 8007858:	e002      	b.n	8007860 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2201      	movs	r2, #1
 8007864:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	2201      	movs	r2, #1
 800786c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	2200      	movs	r2, #0
 8007874:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2200      	movs	r2, #0
 800787a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800787c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007880:	4618      	mov	r0, r3
 8007882:	3730      	adds	r7, #48	; 0x30
 8007884:	46bd      	mov	sp, r7
 8007886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800788a:	bf00      	nop
 800788c:	0800d034 	.word	0x0800d034
 8007890:	00f42400 	.word	0x00f42400

08007894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00a      	beq.n	80078be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00a      	beq.n	8007902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007906:	f003 0308 	and.w	r3, r3, #8
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00a      	beq.n	8007924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	430a      	orrs	r2, r1
 8007922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007928:	f003 0310 	and.w	r3, r3, #16
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00a      	beq.n	8007946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	430a      	orrs	r2, r1
 8007944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00a      	beq.n	8007968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	430a      	orrs	r2, r1
 8007966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007970:	2b00      	cmp	r3, #0
 8007972:	d01a      	beq.n	80079aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	430a      	orrs	r2, r1
 8007988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007992:	d10a      	bne.n	80079aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	605a      	str	r2, [r3, #4]
  }
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af02      	add	r7, sp, #8
 80079de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079e8:	f7fc f9ca 	bl	8003d80 <HAL_GetTick>
 80079ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0308 	and.w	r3, r3, #8
 80079f8:	2b08      	cmp	r3, #8
 80079fa:	d10e      	bne.n	8007a1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f82f 	bl	8007a6e <UART_WaitOnFlagUntilTimeout>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e025      	b.n	8007a66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0304 	and.w	r3, r3, #4
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	d10e      	bne.n	8007a46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f819 	bl	8007a6e <UART_WaitOnFlagUntilTimeout>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e00f      	b.n	8007a66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b09c      	sub	sp, #112	; 0x70
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	603b      	str	r3, [r7, #0]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a7e:	e0a9      	b.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a86:	f000 80a5 	beq.w	8007bd4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a8a:	f7fc f979 	bl	8003d80 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d302      	bcc.n	8007aa0 <UART_WaitOnFlagUntilTimeout+0x32>
 8007a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d140      	bne.n	8007b22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aa8:	e853 3f00 	ldrex	r3, [r3]
 8007aac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ab4:	667b      	str	r3, [r7, #100]	; 0x64
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007abe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ac0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ac4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ac6:	e841 2300 	strex	r3, r2, [r1]
 8007aca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1e6      	bne.n	8007aa0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007adc:	e853 3f00 	ldrex	r3, [r3]
 8007ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae4:	f023 0301 	bic.w	r3, r3, #1
 8007ae8:	663b      	str	r3, [r7, #96]	; 0x60
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3308      	adds	r3, #8
 8007af0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007af2:	64ba      	str	r2, [r7, #72]	; 0x48
 8007af4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1e5      	bne.n	8007ad2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2220      	movs	r2, #32
 8007b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e069      	b.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0304 	and.w	r3, r3, #4
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d051      	beq.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b3e:	d149      	bne.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b52:	e853 3f00 	ldrex	r3, [r3]
 8007b56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	461a      	mov	r2, r3
 8007b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b68:	637b      	str	r3, [r7, #52]	; 0x34
 8007b6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b70:	e841 2300 	strex	r3, r2, [r1]
 8007b74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e6      	bne.n	8007b4a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3308      	adds	r3, #8
 8007b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	e853 3f00 	ldrex	r3, [r3]
 8007b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f023 0301 	bic.w	r3, r3, #1
 8007b92:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3308      	adds	r3, #8
 8007b9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b9c:	623a      	str	r2, [r7, #32]
 8007b9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba0:	69f9      	ldr	r1, [r7, #28]
 8007ba2:	6a3a      	ldr	r2, [r7, #32]
 8007ba4:	e841 2300 	strex	r3, r2, [r1]
 8007ba8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e5      	bne.n	8007b7c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e010      	b.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	69da      	ldr	r2, [r3, #28]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	4013      	ands	r3, r2
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	bf0c      	ite	eq
 8007be4:	2301      	moveq	r3, #1
 8007be6:	2300      	movne	r3, #0
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	461a      	mov	r2, r3
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	f43f af46 	beq.w	8007a80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3770      	adds	r7, #112	; 0x70
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b08f      	sub	sp, #60	; 0x3c
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	e853 3f00 	ldrex	r3, [r3]
 8007c12:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	461a      	mov	r2, r3
 8007c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c26:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c2c:	e841 2300 	strex	r3, r2, [r1]
 8007c30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e6      	bne.n	8007c06 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	e853 3f00 	ldrex	r3, [r3]
 8007c46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c4e:	633b      	str	r3, [r7, #48]	; 0x30
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3308      	adds	r3, #8
 8007c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c58:	61ba      	str	r2, [r7, #24]
 8007c5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5c:	6979      	ldr	r1, [r7, #20]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	e841 2300 	strex	r3, r2, [r1]
 8007c64:	613b      	str	r3, [r7, #16]
   return(result);
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1e5      	bne.n	8007c38 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007c74:	bf00      	nop
 8007c76:	373c      	adds	r7, #60	; 0x3c
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b095      	sub	sp, #84	; 0x54
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ca8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e6      	bne.n	8007c88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	6a3b      	ldr	r3, [r7, #32]
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cd0:	f023 0301 	bic.w	r3, r3, #1
 8007cd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3308      	adds	r3, #8
 8007cdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ce0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1e3      	bne.n	8007cba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d118      	bne.n	8007d2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	e853 3f00 	ldrex	r3, [r3]
 8007d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f023 0310 	bic.w	r3, r3, #16
 8007d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	461a      	mov	r2, r3
 8007d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d18:	61bb      	str	r3, [r7, #24]
 8007d1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1c:	6979      	ldr	r1, [r7, #20]
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	e841 2300 	strex	r3, r2, [r1]
 8007d24:	613b      	str	r3, [r7, #16]
   return(result);
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e6      	bne.n	8007cfa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007d40:	bf00      	nop
 8007d42:	3754      	adds	r7, #84	; 0x54
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b090      	sub	sp, #64	; 0x40
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d58:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0320 	and.w	r3, r3, #32
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d137      	bne.n	8007dd8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3308      	adds	r3, #8
 8007d76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	623b      	str	r3, [r7, #32]
   return(result);
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d86:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d90:	633a      	str	r2, [r7, #48]	; 0x30
 8007d92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e5      	bne.n	8007d70 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	e853 3f00 	ldrex	r3, [r3]
 8007db0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007db8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc2:	61fb      	str	r3, [r7, #28]
 8007dc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc6:	69b9      	ldr	r1, [r7, #24]
 8007dc8:	69fa      	ldr	r2, [r7, #28]
 8007dca:	e841 2300 	strex	r3, r2, [r1]
 8007dce:	617b      	str	r3, [r7, #20]
   return(result);
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1e6      	bne.n	8007da4 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007dd6:	e002      	b.n	8007dde <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007dd8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007dda:	f7f9 ffaf 	bl	8001d3c <HAL_UART_TxCpltCallback>
}
 8007dde:	bf00      	nop
 8007de0:	3740      	adds	r7, #64	; 0x40
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b084      	sub	sp, #16
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f7ff fb05 	bl	8007404 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dfa:	bf00      	nop
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b086      	sub	sp, #24
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e16:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2a:	2b80      	cmp	r3, #128	; 0x80
 8007e2c:	d109      	bne.n	8007e42 <UART_DMAError+0x40>
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	2b21      	cmp	r3, #33	; 0x21
 8007e32:	d106      	bne.n	8007e42 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007e3c:	6978      	ldr	r0, [r7, #20]
 8007e3e:	f7ff fede 	bl	8007bfe <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4c:	2b40      	cmp	r3, #64	; 0x40
 8007e4e:	d109      	bne.n	8007e64 <UART_DMAError+0x62>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2b22      	cmp	r3, #34	; 0x22
 8007e54:	d106      	bne.n	8007e64 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007e5e:	6978      	ldr	r0, [r7, #20]
 8007e60:	f7ff ff0e 	bl	8007c80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e6a:	f043 0210 	orr.w	r2, r3, #16
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e74:	6978      	ldr	r0, [r7, #20]
 8007e76:	f7ff facf 	bl	8007418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e7a:	bf00      	nop
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f7ff fab9 	bl	8007418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ea6:	bf00      	nop
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b088      	sub	sp, #32
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	e853 3f00 	ldrex	r3, [r3]
 8007ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eca:	61fb      	str	r3, [r7, #28]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	61bb      	str	r3, [r7, #24]
 8007ed6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed8:	6979      	ldr	r1, [r7, #20]
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	e841 2300 	strex	r3, r2, [r1]
 8007ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1e6      	bne.n	8007eb6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2220      	movs	r2, #32
 8007eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7f9 ff20 	bl	8001d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007efc:	bf00      	nop
 8007efe:	3720      	adds	r7, #32
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d101      	bne.n	8007f56 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f52:	2302      	movs	r3, #2
 8007f54:	e027      	b.n	8007fa6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2224      	movs	r2, #36	; 0x24
 8007f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 0201 	bic.w	r2, r2, #1
 8007f7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2220      	movs	r2, #32
 8007f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d101      	bne.n	8007fca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	e02d      	b.n	8008026 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2224      	movs	r2, #36	; 0x24
 8007fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 0201 	bic.w	r2, r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f850 	bl	80080ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2220      	movs	r2, #32
 8008018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800803e:	2b01      	cmp	r3, #1
 8008040:	d101      	bne.n	8008046 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008042:	2302      	movs	r3, #2
 8008044:	e02d      	b.n	80080a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2224      	movs	r2, #36	; 0x24
 8008052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f022 0201 	bic.w	r2, r2, #1
 800806c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	430a      	orrs	r2, r1
 8008080:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f812 	bl	80080ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2220      	movs	r2, #32
 8008094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
	...

080080ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d108      	bne.n	80080ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080cc:	e031      	b.n	8008132 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080ce:	2308      	movs	r3, #8
 80080d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080d2:	2308      	movs	r3, #8
 80080d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	0e5b      	lsrs	r3, r3, #25
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	f003 0307 	and.w	r3, r3, #7
 80080e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	0f5b      	lsrs	r3, r3, #29
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	7b3a      	ldrb	r2, [r7, #12]
 80080fa:	4911      	ldr	r1, [pc, #68]	; (8008140 <UARTEx_SetNbDataToProcess+0x94>)
 80080fc:	5c8a      	ldrb	r2, [r1, r2]
 80080fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008102:	7b3a      	ldrb	r2, [r7, #12]
 8008104:	490f      	ldr	r1, [pc, #60]	; (8008144 <UARTEx_SetNbDataToProcess+0x98>)
 8008106:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008108:	fb93 f3f2 	sdiv	r3, r3, r2
 800810c:	b29a      	uxth	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	7b7a      	ldrb	r2, [r7, #13]
 8008118:	4909      	ldr	r1, [pc, #36]	; (8008140 <UARTEx_SetNbDataToProcess+0x94>)
 800811a:	5c8a      	ldrb	r2, [r1, r2]
 800811c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008120:	7b7a      	ldrb	r2, [r7, #13]
 8008122:	4908      	ldr	r1, [pc, #32]	; (8008144 <UARTEx_SetNbDataToProcess+0x98>)
 8008124:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008126:	fb93 f3f2 	sdiv	r3, r3, r2
 800812a:	b29a      	uxth	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008132:	bf00      	nop
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	0800d04c 	.word	0x0800d04c
 8008144:	0800d054 	.word	0x0800d054

08008148 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b088      	sub	sp, #32
 800814c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800814e:	2300      	movs	r3, #0
 8008150:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008152:	f107 0308 	add.w	r3, r7, #8
 8008156:	2218      	movs	r2, #24
 8008158:	2100      	movs	r1, #0
 800815a:	4618      	mov	r0, r3
 800815c:	f001 fc4e 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008160:	233f      	movs	r3, #63	; 0x3f
 8008162:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008164:	2381      	movs	r3, #129	; 0x81
 8008166:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008168:	1dfb      	adds	r3, r7, #7
 800816a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800816c:	2301      	movs	r3, #1
 800816e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008170:	f107 0308 	add.w	r3, r7, #8
 8008174:	2100      	movs	r1, #0
 8008176:	4618      	mov	r0, r3
 8008178:	f001 fb04 	bl	8009784 <hci_send_req>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	da01      	bge.n	8008186 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008182:	23ff      	movs	r3, #255	; 0xff
 8008184:	e000      	b.n	8008188 <aci_gap_set_non_discoverable+0x40>
  return status;
 8008186:	79fb      	ldrb	r3, [r7, #7]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3720      	adds	r7, #32
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8008190:	b5b0      	push	{r4, r5, r7, lr}
 8008192:	b0ce      	sub	sp, #312	; 0x138
 8008194:	af00      	add	r7, sp, #0
 8008196:	4605      	mov	r5, r0
 8008198:	460c      	mov	r4, r1
 800819a:	4610      	mov	r0, r2
 800819c:	4619      	mov	r1, r3
 800819e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80081a2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80081a6:	462a      	mov	r2, r5
 80081a8:	701a      	strb	r2, [r3, #0]
 80081aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80081ae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80081b2:	4622      	mov	r2, r4
 80081b4:	801a      	strh	r2, [r3, #0]
 80081b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80081ba:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80081be:	4602      	mov	r2, r0
 80081c0:	801a      	strh	r2, [r3, #0]
 80081c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80081c6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80081ca:	460a      	mov	r2, r1
 80081cc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80081ce:	f107 0310 	add.w	r3, r7, #16
 80081d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80081d6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80081da:	3308      	adds	r3, #8
 80081dc:	f107 0210 	add.w	r2, r7, #16
 80081e0:	4413      	add	r3, r2
 80081e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80081e6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80081ea:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80081ee:	4413      	add	r3, r2
 80081f0:	3309      	adds	r3, #9
 80081f2:	f107 0210 	add.w	r2, r7, #16
 80081f6:	4413      	add	r3, r2
 80081f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80081fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008200:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008204:	2200      	movs	r2, #0
 8008206:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008208:	2300      	movs	r3, #0
 800820a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800820e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008212:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008216:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800821a:	7812      	ldrb	r2, [r2, #0]
 800821c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800821e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008222:	3301      	adds	r3, #1
 8008224:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008228:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800822c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008230:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008234:	8812      	ldrh	r2, [r2, #0]
 8008236:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800823a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800823e:	3302      	adds	r3, #2
 8008240:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008244:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008248:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800824c:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8008250:	8812      	ldrh	r2, [r2, #0]
 8008252:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008256:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800825a:	3302      	adds	r3, #2
 800825c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008260:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008264:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008268:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800826c:	7812      	ldrb	r2, [r2, #0]
 800826e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008270:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008274:	3301      	adds	r3, #1
 8008276:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800827a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800827e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008282:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008284:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008288:	3301      	adds	r3, #1
 800828a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800828e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008292:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008296:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008298:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800829c:	3301      	adds	r3, #1
 800829e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80082a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80082a6:	3308      	adds	r3, #8
 80082a8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80082ac:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80082b0:	4618      	mov	r0, r3
 80082b2:	f001 fb93 	bl	80099dc <Osal_MemCpy>
    index_input += Local_Name_Length;
 80082b6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80082ba:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80082be:	4413      	add	r3, r2
 80082c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80082c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082c8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80082cc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80082ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082d2:	3301      	adds	r3, #1
 80082d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80082d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082dc:	3301      	adds	r3, #1
 80082de:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80082e2:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80082e6:	4618      	mov	r0, r3
 80082e8:	f001 fb78 	bl	80099dc <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80082ec:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80082f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80082f4:	4413      	add	r3, r2
 80082f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80082fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082fe:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008302:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008304:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008308:	3302      	adds	r3, #2
 800830a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800830e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008312:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008316:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008318:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800831c:	3302      	adds	r3, #2
 800831e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008322:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008326:	2218      	movs	r2, #24
 8008328:	2100      	movs	r1, #0
 800832a:	4618      	mov	r0, r3
 800832c:	f001 fb66 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008330:	233f      	movs	r3, #63	; 0x3f
 8008332:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008336:	2383      	movs	r3, #131	; 0x83
 8008338:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800833c:	f107 0310 	add.w	r3, r7, #16
 8008340:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008344:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008348:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800834c:	f107 030f 	add.w	r3, r7, #15
 8008350:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008354:	2301      	movs	r3, #1
 8008356:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800835a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800835e:	2100      	movs	r1, #0
 8008360:	4618      	mov	r0, r3
 8008362:	f001 fa0f 	bl	8009784 <hci_send_req>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	da01      	bge.n	8008370 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800836c:	23ff      	movs	r3, #255	; 0xff
 800836e:	e004      	b.n	800837a <aci_gap_set_discoverable+0x1ea>
  return status;
 8008370:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008374:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008378:	781b      	ldrb	r3, [r3, #0]
}
 800837a:	4618      	mov	r0, r3
 800837c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008380:	46bd      	mov	sp, r7
 8008382:	bdb0      	pop	{r4, r5, r7, pc}

08008384 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b0cc      	sub	sp, #304	; 0x130
 8008388:	af00      	add	r7, sp, #0
 800838a:	4602      	mov	r2, r0
 800838c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008390:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008394:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008396:	f107 0310 	add.w	r3, r7, #16
 800839a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800839e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80083a6:	2200      	movs	r2, #0
 80083a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80083b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80083b8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80083bc:	7812      	ldrb	r2, [r2, #0]
 80083be:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80083c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083c4:	3301      	adds	r3, #1
 80083c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80083ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80083ce:	2218      	movs	r2, #24
 80083d0:	2100      	movs	r1, #0
 80083d2:	4618      	mov	r0, r3
 80083d4:	f001 fb12 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 80083d8:	233f      	movs	r3, #63	; 0x3f
 80083da:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80083de:	2385      	movs	r3, #133	; 0x85
 80083e0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80083e4:	f107 0310 	add.w	r3, r7, #16
 80083e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80083ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80083f4:	f107 030f 	add.w	r3, r7, #15
 80083f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80083fc:	2301      	movs	r3, #1
 80083fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008402:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008406:	2100      	movs	r1, #0
 8008408:	4618      	mov	r0, r3
 800840a:	f001 f9bb 	bl	8009784 <hci_send_req>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	da01      	bge.n	8008418 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008414:	23ff      	movs	r3, #255	; 0xff
 8008416:	e004      	b.n	8008422 <aci_gap_set_io_capability+0x9e>
  return status;
 8008418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800841c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008420:	781b      	ldrb	r3, [r3, #0]
}
 8008422:	4618      	mov	r0, r3
 8008424:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800842c:	b5b0      	push	{r4, r5, r7, lr}
 800842e:	b0cc      	sub	sp, #304	; 0x130
 8008430:	af00      	add	r7, sp, #0
 8008432:	4605      	mov	r5, r0
 8008434:	460c      	mov	r4, r1
 8008436:	4610      	mov	r0, r2
 8008438:	4619      	mov	r1, r3
 800843a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008442:	462a      	mov	r2, r5
 8008444:	701a      	strb	r2, [r3, #0]
 8008446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800844a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800844e:	4622      	mov	r2, r4
 8008450:	701a      	strb	r2, [r3, #0]
 8008452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008456:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800845a:	4602      	mov	r2, r0
 800845c:	701a      	strb	r2, [r3, #0]
 800845e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008462:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008466:	460a      	mov	r2, r1
 8008468:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800846a:	f107 0310 	add.w	r3, r7, #16
 800846e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008476:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800847a:	2200      	movs	r2, #0
 800847c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008488:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800848c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008490:	7812      	ldrb	r2, [r2, #0]
 8008492:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008494:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008498:	3301      	adds	r3, #1
 800849a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800849e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084a6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80084aa:	7812      	ldrb	r2, [r2, #0]
 80084ac:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80084ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084b2:	3301      	adds	r3, #1
 80084b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80084b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084c0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80084c4:	7812      	ldrb	r2, [r2, #0]
 80084c6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80084c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084cc:	3301      	adds	r3, #1
 80084ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80084d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084da:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80084de:	7812      	ldrb	r2, [r2, #0]
 80084e0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80084e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084e6:	3301      	adds	r3, #1
 80084e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80084ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80084f4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80084f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084fa:	3301      	adds	r3, #1
 80084fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008504:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008508:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800850a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800850e:	3301      	adds	r3, #1
 8008510:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008518:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800851c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800851e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008522:	3301      	adds	r3, #1
 8008524:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008528:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800852c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008530:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008534:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008538:	3304      	adds	r3, #4
 800853a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800853e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008542:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008546:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008548:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800854c:	3301      	adds	r3, #1
 800854e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008552:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008556:	2218      	movs	r2, #24
 8008558:	2100      	movs	r1, #0
 800855a:	4618      	mov	r0, r3
 800855c:	f001 fa4e 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008560:	233f      	movs	r3, #63	; 0x3f
 8008562:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008566:	2386      	movs	r3, #134	; 0x86
 8008568:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800856c:	f107 0310 	add.w	r3, r7, #16
 8008570:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008574:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008578:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800857c:	f107 030f 	add.w	r3, r7, #15
 8008580:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008584:	2301      	movs	r3, #1
 8008586:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800858a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800858e:	2100      	movs	r1, #0
 8008590:	4618      	mov	r0, r3
 8008592:	f001 f8f7 	bl	8009784 <hci_send_req>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	da01      	bge.n	80085a0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800859c:	23ff      	movs	r3, #255	; 0xff
 800859e:	e004      	b.n	80085aa <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80085a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80085a8:	781b      	ldrb	r3, [r3, #0]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bdb0      	pop	{r4, r5, r7, pc}

080085b4 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b0cc      	sub	sp, #304	; 0x130
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	4602      	mov	r2, r0
 80085bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085c4:	6019      	str	r1, [r3, #0]
 80085c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80085ce:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80085d0:	f107 0310 	add.w	r3, r7, #16
 80085d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80085d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085dc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80085e0:	2200      	movs	r2, #0
 80085e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80085e4:	2300      	movs	r3, #0
 80085e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80085ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80085f2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80085f6:	8812      	ldrh	r2, [r2, #0]
 80085f8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80085fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085fe:	3302      	adds	r3, #2
 8008600:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8008604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008608:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800860c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008610:	6812      	ldr	r2, [r2, #0]
 8008612:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8008616:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800861a:	3304      	adds	r3, #4
 800861c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008620:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008624:	2218      	movs	r2, #24
 8008626:	2100      	movs	r1, #0
 8008628:	4618      	mov	r0, r3
 800862a:	f001 f9e7 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 800862e:	233f      	movs	r3, #63	; 0x3f
 8008630:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8008634:	2388      	movs	r3, #136	; 0x88
 8008636:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800863a:	f107 0310 	add.w	r3, r7, #16
 800863e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008642:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008646:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800864a:	f107 030f 	add.w	r3, r7, #15
 800864e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008652:	2301      	movs	r3, #1
 8008654:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008658:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800865c:	2100      	movs	r1, #0
 800865e:	4618      	mov	r0, r3
 8008660:	f001 f890 	bl	8009784 <hci_send_req>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	da01      	bge.n	800866e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800866a:	23ff      	movs	r3, #255	; 0xff
 800866c:	e004      	b.n	8008678 <aci_gap_pass_key_resp+0xc4>
  return status;
 800866e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008672:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008676:	781b      	ldrb	r3, [r3, #0]
}
 8008678:	4618      	mov	r0, r3
 800867a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008682:	b590      	push	{r4, r7, lr}
 8008684:	b0cd      	sub	sp, #308	; 0x134
 8008686:	af00      	add	r7, sp, #0
 8008688:	4604      	mov	r4, r0
 800868a:	4608      	mov	r0, r1
 800868c:	4611      	mov	r1, r2
 800868e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008692:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800869c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80086a0:	4622      	mov	r2, r4
 80086a2:	701a      	strb	r2, [r3, #0]
 80086a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80086ac:	4602      	mov	r2, r0
 80086ae:	701a      	strb	r2, [r3, #0]
 80086b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086b4:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80086b8:	460a      	mov	r2, r1
 80086ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80086bc:	f107 0310 	add.w	r3, r7, #16
 80086c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80086c4:	f107 0308 	add.w	r3, r7, #8
 80086c8:	2207      	movs	r2, #7
 80086ca:	2100      	movs	r1, #0
 80086cc:	4618      	mov	r0, r3
 80086ce:	f001 f995 	bl	80099fc <Osal_MemSet>
  int index_input = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80086d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086e0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80086e4:	7812      	ldrb	r2, [r2, #0]
 80086e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80086e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086ec:	3301      	adds	r3, #1
 80086ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80086f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086fa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80086fe:	7812      	ldrb	r2, [r2, #0]
 8008700:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008702:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008706:	3301      	adds	r3, #1
 8008708:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800870c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008710:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008714:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008718:	7812      	ldrb	r2, [r2, #0]
 800871a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800871c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008720:	3301      	adds	r3, #1
 8008722:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008726:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800872a:	2218      	movs	r2, #24
 800872c:	2100      	movs	r1, #0
 800872e:	4618      	mov	r0, r3
 8008730:	f001 f964 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008734:	233f      	movs	r3, #63	; 0x3f
 8008736:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800873a:	238a      	movs	r3, #138	; 0x8a
 800873c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008740:	f107 0310 	add.w	r3, r7, #16
 8008744:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008748:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800874c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008750:	f107 0308 	add.w	r3, r7, #8
 8008754:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008758:	2307      	movs	r3, #7
 800875a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800875e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008762:	2100      	movs	r1, #0
 8008764:	4618      	mov	r0, r3
 8008766:	f001 f80d 	bl	8009784 <hci_send_req>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	da01      	bge.n	8008774 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008770:	23ff      	movs	r3, #255	; 0xff
 8008772:	e02e      	b.n	80087d2 <aci_gap_init+0x150>
  if ( resp.Status )
 8008774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008778:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d005      	beq.n	800878e <aci_gap_init+0x10c>
    return resp.Status;
 8008782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008786:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	e021      	b.n	80087d2 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800878e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008792:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008796:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800879a:	b29a      	uxth	r2, r3
 800879c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80087a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80087b0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80087ba:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80087bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80087c4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80087ce:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd90      	pop	{r4, r7, pc}

080087dc <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b0cc      	sub	sp, #304	; 0x130
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	4602      	mov	r2, r0
 80087e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ec:	6019      	str	r1, [r3, #0]
 80087ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80087f6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80087f8:	f107 0310 	add.w	r3, r7, #16
 80087fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008804:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008808:	2200      	movs	r2, #0
 800880a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008816:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800881a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800881e:	7812      	ldrb	r2, [r2, #0]
 8008820:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008822:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008826:	3301      	adds	r3, #1
 8008828:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800882c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008830:	1c58      	adds	r0, r3, #1
 8008832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008836:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800883a:	781a      	ldrb	r2, [r3, #0]
 800883c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008844:	6819      	ldr	r1, [r3, #0]
 8008846:	f001 f8c9 	bl	80099dc <Osal_MemCpy>
  index_input += AdvDataLen;
 800884a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800884e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008858:	4413      	add	r3, r2
 800885a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800885e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008862:	2218      	movs	r2, #24
 8008864:	2100      	movs	r1, #0
 8008866:	4618      	mov	r0, r3
 8008868:	f001 f8c8 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 800886c:	233f      	movs	r3, #63	; 0x3f
 800886e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8008872:	238e      	movs	r3, #142	; 0x8e
 8008874:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008878:	f107 0310 	add.w	r3, r7, #16
 800887c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008880:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008884:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008888:	f107 030f 	add.w	r3, r7, #15
 800888c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008890:	2301      	movs	r3, #1
 8008892:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008896:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800889a:	2100      	movs	r1, #0
 800889c:	4618      	mov	r0, r3
 800889e:	f000 ff71 	bl	8009784 <hci_send_req>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	da01      	bge.n	80088ac <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80088a8:	23ff      	movs	r3, #255	; 0xff
 80088aa:	e004      	b.n	80088b6 <aci_gap_update_adv_data+0xda>
  return status;
 80088ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80088b4:	781b      	ldrb	r3, [r3, #0]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80088c6:	2300      	movs	r3, #0
 80088c8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088ca:	f107 0308 	add.w	r3, r7, #8
 80088ce:	2218      	movs	r2, #24
 80088d0:	2100      	movs	r1, #0
 80088d2:	4618      	mov	r0, r3
 80088d4:	f001 f892 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 80088d8:	233f      	movs	r3, #63	; 0x3f
 80088da:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80088dc:	2392      	movs	r3, #146	; 0x92
 80088de:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80088e0:	1dfb      	adds	r3, r7, #7
 80088e2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80088e4:	2301      	movs	r3, #1
 80088e6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80088e8:	f107 0308 	add.w	r3, r7, #8
 80088ec:	2100      	movs	r1, #0
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 ff48 	bl	8009784 <hci_send_req>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	da01      	bge.n	80088fe <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80088fa:	23ff      	movs	r3, #255	; 0xff
 80088fc:	e000      	b.n	8008900 <aci_gap_configure_whitelist+0x40>
  return status;
 80088fe:	79fb      	ldrb	r3, [r7, #7]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3720      	adds	r7, #32
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b0cc      	sub	sp, #304	; 0x130
 800890c:	af00      	add	r7, sp, #0
 800890e:	4602      	mov	r2, r0
 8008910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008914:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008918:	801a      	strh	r2, [r3, #0]
 800891a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800891e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008922:	460a      	mov	r2, r1
 8008924:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008926:	f107 0310 	add.w	r3, r7, #16
 800892a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800892e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008932:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008936:	2200      	movs	r2, #0
 8008938:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800893a:	2300      	movs	r3, #0
 800893c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008944:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008948:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800894c:	8812      	ldrh	r2, [r2, #0]
 800894e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008950:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008954:	3302      	adds	r3, #2
 8008956:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800895a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800895e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008962:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008966:	7812      	ldrb	r2, [r2, #0]
 8008968:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800896a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800896e:	3301      	adds	r3, #1
 8008970:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008974:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008978:	2218      	movs	r2, #24
 800897a:	2100      	movs	r1, #0
 800897c:	4618      	mov	r0, r3
 800897e:	f001 f83d 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008982:	233f      	movs	r3, #63	; 0x3f
 8008984:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8008988:	23a5      	movs	r3, #165	; 0xa5
 800898a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800898e:	f107 0310 	add.w	r3, r7, #16
 8008992:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008996:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800899a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800899e:	f107 030f 	add.w	r3, r7, #15
 80089a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80089a6:	2301      	movs	r3, #1
 80089a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089b0:	2100      	movs	r1, #0
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fee6 	bl	8009784 <hci_send_req>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	da01      	bge.n	80089c2 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80089be:	23ff      	movs	r3, #255	; 0xff
 80089c0:	e004      	b.n	80089cc <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80089c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80089ca:	781b      	ldrb	r3, [r3, #0]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b088      	sub	sp, #32
 80089da:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80089dc:	2300      	movs	r3, #0
 80089de:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089e0:	f107 0308 	add.w	r3, r7, #8
 80089e4:	2218      	movs	r2, #24
 80089e6:	2100      	movs	r1, #0
 80089e8:	4618      	mov	r0, r3
 80089ea:	f001 f807 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 80089ee:	233f      	movs	r3, #63	; 0x3f
 80089f0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80089f2:	f240 1301 	movw	r3, #257	; 0x101
 80089f6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80089f8:	1dfb      	adds	r3, r7, #7
 80089fa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80089fc:	2301      	movs	r3, #1
 80089fe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a00:	f107 0308 	add.w	r3, r7, #8
 8008a04:	2100      	movs	r1, #0
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 febc 	bl	8009784 <hci_send_req>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	da01      	bge.n	8008a16 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008a12:	23ff      	movs	r3, #255	; 0xff
 8008a14:	e000      	b.n	8008a18 <aci_gatt_init+0x42>
  return status;
 8008a16:	79fb      	ldrb	r3, [r7, #7]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3720      	adds	r7, #32
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008a20:	b590      	push	{r4, r7, lr}
 8008a22:	b0cf      	sub	sp, #316	; 0x13c
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4604      	mov	r4, r0
 8008a28:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8008a2c:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8008a30:	6001      	str	r1, [r0, #0]
 8008a32:	4610      	mov	r0, r2
 8008a34:	4619      	mov	r1, r3
 8008a36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a3a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008a3e:	4622      	mov	r2, r4
 8008a40:	701a      	strb	r2, [r3, #0]
 8008a42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a46:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a52:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008a56:	460a      	mov	r2, r1
 8008a58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008a5a:	f107 0310 	add.w	r3, r7, #16
 8008a5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008a62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a66:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d00a      	beq.n	8008a86 <aci_gatt_add_service+0x66>
 8008a70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a74:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d101      	bne.n	8008a82 <aci_gatt_add_service+0x62>
 8008a7e:	2311      	movs	r3, #17
 8008a80:	e002      	b.n	8008a88 <aci_gatt_add_service+0x68>
 8008a82:	2301      	movs	r3, #1
 8008a84:	e000      	b.n	8008a88 <aci_gatt_add_service+0x68>
 8008a86:	2303      	movs	r3, #3
 8008a88:	f107 0210 	add.w	r2, r7, #16
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008a92:	f107 030c 	add.w	r3, r7, #12
 8008a96:	2203      	movs	r2, #3
 8008a98:	2100      	movs	r1, #0
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 ffae 	bl	80099fc <Osal_MemSet>
  int index_input = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008aa6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008aaa:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008aae:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008ab2:	7812      	ldrb	r2, [r2, #0]
 8008ab4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008ab6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008aba:	3301      	adds	r3, #1
 8008abc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008ac0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ac4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d002      	beq.n	8008ad4 <aci_gatt_add_service+0xb4>
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d004      	beq.n	8008adc <aci_gatt_add_service+0xbc>
 8008ad2:	e007      	b.n	8008ae4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008ada:	e005      	b.n	8008ae8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008adc:	2310      	movs	r3, #16
 8008ade:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008ae2:	e001      	b.n	8008ae8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008ae4:	2397      	movs	r3, #151	; 0x97
 8008ae6:	e06c      	b.n	8008bc2 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008ae8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008aec:	1c58      	adds	r0, r3, #1
 8008aee:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8008af2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008af6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008afa:	6819      	ldr	r1, [r3, #0]
 8008afc:	f000 ff6e 	bl	80099dc <Osal_MemCpy>
    index_input += size;
 8008b00:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008b04:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008b08:	4413      	add	r3, r2
 8008b0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8008b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b12:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008b16:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008b1a:	7812      	ldrb	r2, [r2, #0]
 8008b1c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008b1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b22:	3301      	adds	r3, #1
 8008b24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b2c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008b30:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008b34:	7812      	ldrb	r2, [r2, #0]
 8008b36:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008b38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b46:	2218      	movs	r2, #24
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 ff56 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b50:	233f      	movs	r3, #63	; 0x3f
 8008b52:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8008b56:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008b5a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b5e:	f107 0310 	add.w	r3, r7, #16
 8008b62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008b6e:	f107 030c 	add.w	r3, r7, #12
 8008b72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008b76:	2303      	movs	r3, #3
 8008b78:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b80:	2100      	movs	r1, #0
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 fdfe 	bl	8009784 <hci_send_req>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	da01      	bge.n	8008b92 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8008b8e:	23ff      	movs	r3, #255	; 0xff
 8008b90:	e017      	b.n	8008bc2 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8008b92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d005      	beq.n	8008bac <aci_gatt_add_service+0x18c>
    return resp.Status;
 8008ba0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ba4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	e00a      	b.n	8008bc2 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8008bac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008bb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bb4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008bbe:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd90      	pop	{r4, r7, pc}

08008bcc <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008bcc:	b590      	push	{r4, r7, lr}
 8008bce:	b0d1      	sub	sp, #324	; 0x144
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	4608      	mov	r0, r1
 8008bd6:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8008bda:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8008bde:	600a      	str	r2, [r1, #0]
 8008be0:	4619      	mov	r1, r3
 8008be2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008be6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008bea:	4622      	mov	r2, r4
 8008bec:	801a      	strh	r2, [r3, #0]
 8008bee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008bf2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	701a      	strb	r2, [r3, #0]
 8008bfa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008bfe:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8008c02:	460a      	mov	r2, r1
 8008c04:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8008c06:	f107 0318 	add.w	r3, r7, #24
 8008c0a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008c0e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008c12:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d00a      	beq.n	8008c32 <aci_gatt_add_char+0x66>
 8008c1c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008c20:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d101      	bne.n	8008c2e <aci_gatt_add_char+0x62>
 8008c2a:	2313      	movs	r3, #19
 8008c2c:	e002      	b.n	8008c34 <aci_gatt_add_char+0x68>
 8008c2e:	2303      	movs	r3, #3
 8008c30:	e000      	b.n	8008c34 <aci_gatt_add_char+0x68>
 8008c32:	2305      	movs	r3, #5
 8008c34:	f107 0218 	add.w	r2, r7, #24
 8008c38:	4413      	add	r3, r2
 8008c3a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008c3e:	f107 0314 	add.w	r3, r7, #20
 8008c42:	2203      	movs	r2, #3
 8008c44:	2100      	movs	r1, #0
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 fed8 	bl	80099fc <Osal_MemSet>
  int index_input = 0;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8008c52:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008c56:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008c5a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008c5e:	8812      	ldrh	r2, [r2, #0]
 8008c60:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008c62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c66:	3302      	adds	r3, #2
 8008c68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008c6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008c70:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008c74:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008c78:	7812      	ldrb	r2, [r2, #0]
 8008c7a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008c7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c80:	3301      	adds	r3, #1
 8008c82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008c86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008c8a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d002      	beq.n	8008c9a <aci_gatt_add_char+0xce>
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d004      	beq.n	8008ca2 <aci_gatt_add_char+0xd6>
 8008c98:	e007      	b.n	8008caa <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8008c9a:	2302      	movs	r3, #2
 8008c9c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008ca0:	e005      	b.n	8008cae <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8008ca2:	2310      	movs	r3, #16
 8008ca4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008ca8:	e001      	b.n	8008cae <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8008caa:	2397      	movs	r3, #151	; 0x97
 8008cac:	e091      	b.n	8008dd2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8008cae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008cb2:	1cd8      	adds	r0, r3, #3
 8008cb4:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8008cb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008cbc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008cc0:	6819      	ldr	r1, [r3, #0]
 8008cc2:	f000 fe8b 	bl	80099dc <Osal_MemCpy>
    index_input += size;
 8008cc6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8008cca:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008cce:	4413      	add	r3, r2
 8008cd0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8008cd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008cd8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008cdc:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8008ce0:	8812      	ldrh	r2, [r2, #0]
 8008ce2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008ce4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008ce8:	3302      	adds	r3, #2
 8008cea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8008cee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008cf2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008cf6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8008cf8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8008d02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d06:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008d0a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008d0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008d10:	3301      	adds	r3, #1
 8008d12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8008d16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d1a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8008d1e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008d20:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008d24:	3301      	adds	r3, #1
 8008d26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8008d2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d2e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8008d32:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008d34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008d38:	3301      	adds	r3, #1
 8008d3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008d3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d42:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8008d46:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008d48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d52:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008d56:	2218      	movs	r2, #24
 8008d58:	2100      	movs	r1, #0
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 fe4e 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d60:	233f      	movs	r3, #63	; 0x3f
 8008d62:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8008d66:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008d6a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008d6e:	f107 0318 	add.w	r3, r7, #24
 8008d72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008d76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008d7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008d7e:	f107 0314 	add.w	r3, r7, #20
 8008d82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008d86:	2303      	movs	r3, #3
 8008d88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d8c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008d90:	2100      	movs	r1, #0
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 fcf6 	bl	8009784 <hci_send_req>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	da01      	bge.n	8008da2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8008d9e:	23ff      	movs	r3, #255	; 0xff
 8008da0:	e017      	b.n	8008dd2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8008da2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008da6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d005      	beq.n	8008dbc <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8008db0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008db4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	e00a      	b.n	8008dd2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8008dbc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008dc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008dc4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008dce:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd90      	pop	{r4, r7, pc}

08008ddc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008ddc:	b5b0      	push	{r4, r5, r7, lr}
 8008dde:	b0cc      	sub	sp, #304	; 0x130
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4605      	mov	r5, r0
 8008de4:	460c      	mov	r4, r1
 8008de6:	4610      	mov	r0, r2
 8008de8:	4619      	mov	r1, r3
 8008dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dee:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008df2:	462a      	mov	r2, r5
 8008df4:	801a      	strh	r2, [r3, #0]
 8008df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008dfe:	4622      	mov	r2, r4
 8008e00:	801a      	strh	r2, [r3, #0]
 8008e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e06:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	701a      	strb	r2, [r3, #0]
 8008e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e12:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008e16:	460a      	mov	r2, r1
 8008e18:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008e1a:	f107 0310 	add.w	r3, r7, #16
 8008e1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e26:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8008e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e38:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e3c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008e40:	8812      	ldrh	r2, [r2, #0]
 8008e42:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008e44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e48:	3302      	adds	r3, #2
 8008e4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8008e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e56:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008e5a:	8812      	ldrh	r2, [r2, #0]
 8008e5c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008e5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e62:	3302      	adds	r3, #2
 8008e64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8008e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e70:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8008e74:	7812      	ldrb	r2, [r2, #0]
 8008e76:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008e78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e8a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8008e8e:	7812      	ldrb	r2, [r2, #0]
 8008e90:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008e92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e96:	3301      	adds	r3, #1
 8008e98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea0:	1d98      	adds	r0, r3, #6
 8008ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ea6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	461a      	mov	r2, r3
 8008eae:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008eb2:	f000 fd93 	bl	80099dc <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eba:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008ec4:	4413      	add	r3, r2
 8008ec6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008eca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ece:	2218      	movs	r2, #24
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 fd92 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008ed8:	233f      	movs	r3, #63	; 0x3f
 8008eda:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8008ede:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008ee2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008ee6:	f107 0310 	add.w	r3, r7, #16
 8008eea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008eee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ef2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008ef6:	f107 030f 	add.w	r3, r7, #15
 8008efa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008efe:	2301      	movs	r3, #1
 8008f00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f08:	2100      	movs	r1, #0
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fc3a 	bl	8009784 <hci_send_req>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	da01      	bge.n	8008f1a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8008f16:	23ff      	movs	r3, #255	; 0xff
 8008f18:	e004      	b.n	8008f24 <aci_gatt_update_char_value+0x148>
  return status;
 8008f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f1e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008f22:	781b      	ldrb	r3, [r3, #0]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bdb0      	pop	{r4, r5, r7, pc}

08008f2e <aci_gatt_write_resp>:
                                uint16_t Attr_Handle,
                                uint8_t Write_status,
                                uint8_t Error_Code,
                                uint8_t Attribute_Val_Length,
                                const uint8_t* Attribute_Val )
{
 8008f2e:	b5b0      	push	{r4, r5, r7, lr}
 8008f30:	b0cc      	sub	sp, #304	; 0x130
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	4605      	mov	r5, r0
 8008f36:	460c      	mov	r4, r1
 8008f38:	4610      	mov	r0, r2
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f40:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008f44:	462a      	mov	r2, r5
 8008f46:	801a      	strh	r2, [r3, #0]
 8008f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f50:	4622      	mov	r2, r4
 8008f52:	801a      	strh	r2, [r3, #0]
 8008f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f58:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	701a      	strb	r2, [r3, #0]
 8008f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f64:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008f68:	460a      	mov	r2, r1
 8008f6a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_resp_cp0 *cp0 = (aci_gatt_write_resp_cp0*)(cmd_buffer);
 8008f6c:	f107 0310 	add.w	r3, r7, #16
 8008f70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f78:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f8e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008f92:	8812      	ldrh	r2, [r2, #0]
 8008f94:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008f96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f9a:	3302      	adds	r3, #2
 8008f9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attr_Handle = Attr_Handle;
 8008fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fa8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008fac:	8812      	ldrh	r2, [r2, #0]
 8008fae:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008fb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fb4:	3302      	adds	r3, #2
 8008fb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Write_status = Write_status;
 8008fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fbe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fc2:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8008fc6:	7812      	ldrb	r2, [r2, #0]
 8008fc8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008fca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fce:	3301      	adds	r3, #1
 8008fd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Error_Code = Error_Code;
 8008fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fd8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fdc:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8008fe0:	7812      	ldrb	r2, [r2, #0]
 8008fe2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008fe4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fe8:	3301      	adds	r3, #1
 8008fea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 8008fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ff2:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008ff6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008ff8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 8009002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009006:	3307      	adds	r3, #7
 8009008:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800900c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8009010:	4618      	mov	r0, r3
 8009012:	f000 fce3 	bl	80099dc <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8009016:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 800901a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800901e:	4413      	add	r3, r2
 8009020:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009024:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009028:	2218      	movs	r2, #24
 800902a:	2100      	movs	r1, #0
 800902c:	4618      	mov	r0, r3
 800902e:	f000 fce5 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009032:	233f      	movs	r3, #63	; 0x3f
 8009034:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x126;
 8009038:	f44f 7393 	mov.w	r3, #294	; 0x126
 800903c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009040:	f107 0310 	add.w	r3, r7, #16
 8009044:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009048:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800904c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009050:	f107 030f 	add.w	r3, r7, #15
 8009054:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009058:	2301      	movs	r3, #1
 800905a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800905e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009062:	2100      	movs	r1, #0
 8009064:	4618      	mov	r0, r3
 8009066:	f000 fb8d 	bl	8009784 <hci_send_req>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	da01      	bge.n	8009074 <aci_gatt_write_resp+0x146>
    return BLE_STATUS_TIMEOUT;
 8009070:	23ff      	movs	r3, #255	; 0xff
 8009072:	e004      	b.n	800907e <aci_gatt_write_resp+0x150>
  return status;
 8009074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009078:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800907c:	781b      	ldrb	r3, [r3, #0]
}
 800907e:	4618      	mov	r0, r3
 8009080:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009084:	46bd      	mov	sp, r7
 8009086:	bdb0      	pop	{r4, r5, r7, pc}

08009088 <aci_gatt_allow_read>:

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b0cc      	sub	sp, #304	; 0x130
 800908c:	af00      	add	r7, sp, #0
 800908e:	4602      	mov	r2, r0
 8009090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009094:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009098:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 800909a:	f107 0310 	add.w	r3, r7, #16
 800909e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80090a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090a6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80090aa:	2200      	movs	r2, #0
 80090ac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80090ae:	2300      	movs	r3, #0
 80090b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80090b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80090bc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80090c0:	8812      	ldrh	r2, [r2, #0]
 80090c2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80090c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090c8:	3302      	adds	r3, #2
 80090ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80090ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090d2:	2218      	movs	r2, #24
 80090d4:	2100      	movs	r1, #0
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 fc90 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 80090dc:	233f      	movs	r3, #63	; 0x3f
 80090de:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x127;
 80090e2:	f240 1327 	movw	r3, #295	; 0x127
 80090e6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80090ea:	f107 0310 	add.w	r3, r7, #16
 80090ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80090f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80090fa:	f107 030f 	add.w	r3, r7, #15
 80090fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009102:	2301      	movs	r3, #1
 8009104:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009108:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800910c:	2100      	movs	r1, #0
 800910e:	4618      	mov	r0, r3
 8009110:	f000 fb38 	bl	8009784 <hci_send_req>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	da01      	bge.n	800911e <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 800911a:	23ff      	movs	r3, #255	; 0xff
 800911c:	e004      	b.n	8009128 <aci_gatt_allow_read+0xa0>
  return status;
 800911e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009122:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009126:	781b      	ldrb	r3, [r3, #0]
}
 8009128:	4618      	mov	r0, r3
 800912a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b0cc      	sub	sp, #304	; 0x130
 8009136:	af00      	add	r7, sp, #0
 8009138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800913c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009140:	601a      	str	r2, [r3, #0]
 8009142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009146:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800914a:	4602      	mov	r2, r0
 800914c:	701a      	strb	r2, [r3, #0]
 800914e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009152:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009156:	460a      	mov	r2, r1
 8009158:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800915a:	f107 0310 	add.w	r3, r7, #16
 800915e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009166:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800916a:	2200      	movs	r2, #0
 800916c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800916e:	2300      	movs	r3, #0
 8009170:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8009174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009178:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800917c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009180:	7812      	ldrb	r2, [r2, #0]
 8009182:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009184:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009188:	3301      	adds	r3, #1
 800918a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800918e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009192:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009196:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800919a:	7812      	ldrb	r2, [r2, #0]
 800919c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800919e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091a2:	3301      	adds	r3, #1
 80091a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80091a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091ac:	1c98      	adds	r0, r3, #2
 80091ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091b2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80091b6:	781a      	ldrb	r2, [r3, #0]
 80091b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091c0:	6819      	ldr	r1, [r3, #0]
 80091c2:	f000 fc0b 	bl	80099dc <Osal_MemCpy>
  index_input += Length;
 80091c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80091d4:	4413      	add	r3, r2
 80091d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80091da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091de:	2218      	movs	r2, #24
 80091e0:	2100      	movs	r1, #0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 fc0a 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 80091e8:	233f      	movs	r3, #63	; 0x3f
 80091ea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80091ee:	230c      	movs	r3, #12
 80091f0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80091f4:	f107 0310 	add.w	r3, r7, #16
 80091f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80091fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009200:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009204:	f107 030f 	add.w	r3, r7, #15
 8009208:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800920c:	2301      	movs	r3, #1
 800920e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009212:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009216:	2100      	movs	r1, #0
 8009218:	4618      	mov	r0, r3
 800921a:	f000 fab3 	bl	8009784 <hci_send_req>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	da01      	bge.n	8009228 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8009224:	23ff      	movs	r3, #255	; 0xff
 8009226:	e004      	b.n	8009232 <aci_hal_write_config_data+0x100>
  return status;
 8009228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800922c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009230:	781b      	ldrb	r3, [r3, #0]
}
 8009232:	4618      	mov	r0, r3
 8009234:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b0cc      	sub	sp, #304	; 0x130
 8009240:	af00      	add	r7, sp, #0
 8009242:	4602      	mov	r2, r0
 8009244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009248:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800924c:	701a      	strb	r2, [r3, #0]
 800924e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009252:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009256:	460a      	mov	r2, r1
 8009258:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800925a:	f107 0310 	add.w	r3, r7, #16
 800925e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009266:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800926a:	2200      	movs	r2, #0
 800926c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800926e:	2300      	movs	r3, #0
 8009270:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8009274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009278:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800927c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009280:	7812      	ldrb	r2, [r2, #0]
 8009282:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009284:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009288:	3301      	adds	r3, #1
 800928a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800928e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009292:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009296:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800929a:	7812      	ldrb	r2, [r2, #0]
 800929c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800929e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092a2:	3301      	adds	r3, #1
 80092a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092ac:	2218      	movs	r2, #24
 80092ae:	2100      	movs	r1, #0
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 fba3 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 80092b6:	233f      	movs	r3, #63	; 0x3f
 80092b8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80092bc:	230f      	movs	r3, #15
 80092be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80092c2:	f107 0310 	add.w	r3, r7, #16
 80092c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80092ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80092d2:	f107 030f 	add.w	r3, r7, #15
 80092d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80092da:	2301      	movs	r3, #1
 80092dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80092e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092e4:	2100      	movs	r1, #0
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 fa4c 	bl	8009784 <hci_send_req>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	da01      	bge.n	80092f6 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80092f2:	23ff      	movs	r3, #255	; 0xff
 80092f4:	e004      	b.n	8009300 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80092f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092fa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80092fe:	781b      	ldrb	r3, [r3, #0]
}
 8009300:	4618      	mov	r0, r3
 8009302:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b0cc      	sub	sp, #304	; 0x130
 800930e:	af00      	add	r7, sp, #0
 8009310:	4602      	mov	r2, r0
 8009312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009316:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800931a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800931c:	f107 0310 	add.w	r3, r7, #16
 8009320:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009328:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800932c:	2200      	movs	r2, #0
 800932e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009330:	2300      	movs	r3, #0
 8009332:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8009336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800933a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800933e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009342:	8812      	ldrh	r2, [r2, #0]
 8009344:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009346:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800934a:	3302      	adds	r3, #2
 800934c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009350:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009354:	2218      	movs	r2, #24
 8009356:	2100      	movs	r1, #0
 8009358:	4618      	mov	r0, r3
 800935a:	f000 fb4f 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x3f;
 800935e:	233f      	movs	r3, #63	; 0x3f
 8009360:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8009364:	2318      	movs	r3, #24
 8009366:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800936a:	f107 0310 	add.w	r3, r7, #16
 800936e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009372:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009376:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800937a:	f107 030f 	add.w	r3, r7, #15
 800937e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009382:	2301      	movs	r3, #1
 8009384:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009388:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800938c:	2100      	movs	r1, #0
 800938e:	4618      	mov	r0, r3
 8009390:	f000 f9f8 	bl	8009784 <hci_send_req>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	da01      	bge.n	800939e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800939a:	23ff      	movs	r3, #255	; 0xff
 800939c:	e004      	b.n	80093a8 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800939e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093a2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80093a6:	781b      	ldrb	r3, [r3, #0]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b088      	sub	sp, #32
 80093b6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80093bc:	f107 0308 	add.w	r3, r7, #8
 80093c0:	2218      	movs	r2, #24
 80093c2:	2100      	movs	r1, #0
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 fb19 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x03;
 80093ca:	2303      	movs	r3, #3
 80093cc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80093ce:	2303      	movs	r3, #3
 80093d0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80093d2:	1dfb      	adds	r3, r7, #7
 80093d4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80093d6:	2301      	movs	r3, #1
 80093d8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80093da:	f107 0308 	add.w	r3, r7, #8
 80093de:	2100      	movs	r1, #0
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 f9cf 	bl	8009784 <hci_send_req>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	da01      	bge.n	80093f0 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80093ec:	23ff      	movs	r3, #255	; 0xff
 80093ee:	e000      	b.n	80093f2 <hci_reset+0x40>
  return status;
 80093f0:	79fb      	ldrb	r3, [r7, #7]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3720      	adds	r7, #32
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80093fa:	b590      	push	{r4, r7, lr}
 80093fc:	b0cd      	sub	sp, #308	; 0x134
 80093fe:	af00      	add	r7, sp, #0
 8009400:	4604      	mov	r4, r0
 8009402:	4608      	mov	r0, r1
 8009404:	4611      	mov	r1, r2
 8009406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800940a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800940e:	4622      	mov	r2, r4
 8009410:	701a      	strb	r2, [r3, #0]
 8009412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009416:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800941a:	4602      	mov	r2, r0
 800941c:	701a      	strb	r2, [r3, #0]
 800941e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009422:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009426:	460a      	mov	r2, r1
 8009428:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800942a:	f107 0310 	add.w	r3, r7, #16
 800942e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009436:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800943a:	2200      	movs	r2, #0
 800943c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800943e:	2300      	movs	r3, #0
 8009440:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8009444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009448:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800944c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009450:	7812      	ldrb	r2, [r2, #0]
 8009452:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009454:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009458:	3301      	adds	r3, #1
 800945a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800945e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009462:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009466:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800946a:	7812      	ldrb	r2, [r2, #0]
 800946c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800946e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009472:	3301      	adds	r3, #1
 8009474:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800947c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009480:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009484:	7812      	ldrb	r2, [r2, #0]
 8009486:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009488:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800948c:	3301      	adds	r3, #1
 800948e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009492:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009496:	2218      	movs	r2, #24
 8009498:	2100      	movs	r1, #0
 800949a:	4618      	mov	r0, r3
 800949c:	f000 faae 	bl	80099fc <Osal_MemSet>
  rq.ogf = 0x08;
 80094a0:	2308      	movs	r3, #8
 80094a2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80094a6:	2331      	movs	r3, #49	; 0x31
 80094a8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80094ac:	f107 0310 	add.w	r3, r7, #16
 80094b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80094b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80094bc:	f107 030f 	add.w	r3, r7, #15
 80094c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80094c4:	2301      	movs	r3, #1
 80094c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80094ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094ce:	2100      	movs	r1, #0
 80094d0:	4618      	mov	r0, r3
 80094d2:	f000 f957 	bl	8009784 <hci_send_req>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	da01      	bge.n	80094e0 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80094dc:	23ff      	movs	r3, #255	; 0xff
 80094de:	e004      	b.n	80094ea <hci_le_set_default_phy+0xf0>
  return status;
 80094e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094e4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80094e8:	781b      	ldrb	r3, [r3, #0]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd90      	pop	{r4, r7, pc}

080094f4 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8009500:	215c      	movs	r1, #92	; 0x5c
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f002 f83a 	bl	800b57c <strrchr>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d007      	beq.n	800951e <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800950e:	215c      	movs	r1, #92	; 0x5c
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f002 f833 	bl	800b57c <strrchr>
 8009516:	4603      	mov	r3, r0
 8009518:	3301      	adds	r3, #1
 800951a:	60fb      	str	r3, [r7, #12]
 800951c:	e00d      	b.n	800953a <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800951e:	212f      	movs	r1, #47	; 0x2f
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f002 f82b 	bl	800b57c <strrchr>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d006      	beq.n	800953a <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800952c:	212f      	movs	r1, #47	; 0x2f
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f002 f824 	bl	800b57c <strrchr>
 8009534:	4603      	mov	r3, r0
 8009536:	3301      	adds	r3, #1
 8009538:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800953a:	68fb      	ldr	r3, [r7, #12]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800954a:	f3ef 8310 	mrs	r3, PRIMASK
 800954e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009550:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8009552:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009554:	b672      	cpsid	i
}
 8009556:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8009558:	1cbb      	adds	r3, r7, #2
 800955a:	4619      	mov	r1, r3
 800955c:	4812      	ldr	r0, [pc, #72]	; (80095a8 <DbgTrace_TxCpltCallback+0x64>)
 800955e:	f000 ffc2 	bl	800a4e6 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8009562:	1cbb      	adds	r3, r7, #2
 8009564:	4619      	mov	r1, r3
 8009566:	4810      	ldr	r0, [pc, #64]	; (80095a8 <DbgTrace_TxCpltCallback+0x64>)
 8009568:	f001 f8ae 	bl	800a6c8 <CircularQueue_Sense>
 800956c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00c      	beq.n	800958e <DbgTrace_TxCpltCallback+0x4a>
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	f383 8810 	msr	PRIMASK, r3
}
 800957e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8009580:	887b      	ldrh	r3, [r7, #2]
 8009582:	4a0a      	ldr	r2, [pc, #40]	; (80095ac <DbgTrace_TxCpltCallback+0x68>)
 8009584:	4619      	mov	r1, r3
 8009586:	6938      	ldr	r0, [r7, #16]
 8009588:	f7f7 f8fd 	bl	8000786 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800958c:	e008      	b.n	80095a0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800958e:	4b08      	ldr	r3, [pc, #32]	; (80095b0 <DbgTrace_TxCpltCallback+0x6c>)
 8009590:	2201      	movs	r2, #1
 8009592:	701a      	strb	r2, [r3, #0]
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f383 8810 	msr	PRIMASK, r3
}
 800959e:	bf00      	nop
}
 80095a0:	bf00      	nop
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	200006a4 	.word	0x200006a4
 80095ac:	08009545 	.word	0x08009545
 80095b0:	20000025 	.word	0x20000025

080095b4 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 80095ba:	f7f7 f8de 	bl	800077a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 80095be:	2302      	movs	r3, #2
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	2300      	movs	r3, #0
 80095c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80095c8:	4903      	ldr	r1, [pc, #12]	; (80095d8 <DbgTraceInit+0x24>)
 80095ca:	4804      	ldr	r0, [pc, #16]	; (80095dc <DbgTraceInit+0x28>)
 80095cc:	f000 fd32 	bl	800a034 <CircularQueue_Init>
#endif 
#endif
  return;
 80095d0:	bf00      	nop
}
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	200006c4 	.word	0x200006c4
 80095dc:	200006a4 	.word	0x200006a4

080095e0 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	68b9      	ldr	r1, [r7, #8]
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f000 f805 	bl	8009600 <DbgTraceWrite>
 80095f6:	4603      	mov	r3, r0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b08a      	sub	sp, #40	; 0x28
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009610:	f3ef 8310 	mrs	r3, PRIMASK
 8009614:	61bb      	str	r3, [r7, #24]
  return(result);
 8009616:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8009618:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009620:	d102      	bne.n	8009628 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8009622:	2300      	movs	r3, #0
 8009624:	627b      	str	r3, [r7, #36]	; 0x24
 8009626:	e037      	b.n	8009698 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d006      	beq.n	800963c <DbgTraceWrite+0x3c>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b02      	cmp	r3, #2
 8009632:	d003      	beq.n	800963c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8009634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009638:	627b      	str	r3, [r7, #36]	; 0x24
 800963a:	e02d      	b.n	8009698 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d02a      	beq.n	8009698 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8009646:	b672      	cpsid	i
}
 8009648:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	b29a      	uxth	r2, r3
 800964e:	2301      	movs	r3, #1
 8009650:	68b9      	ldr	r1, [r7, #8]
 8009652:	4814      	ldr	r0, [pc, #80]	; (80096a4 <DbgTraceWrite+0xa4>)
 8009654:	f000 fd20 	bl	800a098 <CircularQueue_Add>
 8009658:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d015      	beq.n	800968c <DbgTraceWrite+0x8c>
 8009660:	4b11      	ldr	r3, [pc, #68]	; (80096a8 <DbgTraceWrite+0xa8>)
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	d010      	beq.n	800968c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800966a:	4b0f      	ldr	r3, [pc, #60]	; (80096a8 <DbgTraceWrite+0xa8>)
 800966c:	2200      	movs	r2, #0
 800966e:	701a      	strb	r2, [r3, #0]
 8009670:	6a3b      	ldr	r3, [r7, #32]
 8009672:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f383 8810 	msr	PRIMASK, r3
}
 800967a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	b29b      	uxth	r3, r3
 8009680:	4a0a      	ldr	r2, [pc, #40]	; (80096ac <DbgTraceWrite+0xac>)
 8009682:	4619      	mov	r1, r3
 8009684:	69f8      	ldr	r0, [r7, #28]
 8009686:	f7f7 f87e 	bl	8000786 <DbgOutputTraces>
 800968a:	e005      	b.n	8009698 <DbgTraceWrite+0x98>
 800968c:	6a3b      	ldr	r3, [r7, #32]
 800968e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	f383 8810 	msr	PRIMASK, r3
}
 8009696:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800969a:	4618      	mov	r0, r3
 800969c:	3728      	adds	r7, #40	; 0x28
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	200006a4 	.word	0x200006a4
 80096a8:	20000025 	.word	0x20000025
 80096ac:	08009545 	.word	0x08009545

080096b0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	4a08      	ldr	r2, [pc, #32]	; (80096e0 <hci_init+0x30>)
 80096c0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80096c2:	4a08      	ldr	r2, [pc, #32]	; (80096e4 <hci_init+0x34>)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80096c8:	4806      	ldr	r0, [pc, #24]	; (80096e4 <hci_init+0x34>)
 80096ca:	f000 f973 	bl	80099b4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 f8d4 	bl	8009880 <TlInit>

  return;
 80096d8:	bf00      	nop
}
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	200016ec 	.word	0x200016ec
 80096e4:	200016c4 	.word	0x200016c4

080096e8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80096ee:	4822      	ldr	r0, [pc, #136]	; (8009778 <hci_user_evt_proc+0x90>)
 80096f0:	f000 fbf2 	bl	8009ed8 <LST_is_empty>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d12b      	bne.n	8009752 <hci_user_evt_proc+0x6a>
 80096fa:	4b20      	ldr	r3, [pc, #128]	; (800977c <hci_user_evt_proc+0x94>)
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d027      	beq.n	8009752 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009702:	f107 030c 	add.w	r3, r7, #12
 8009706:	4619      	mov	r1, r3
 8009708:	481b      	ldr	r0, [pc, #108]	; (8009778 <hci_user_evt_proc+0x90>)
 800970a:	f000 fc74 	bl	8009ff6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800970e:	4b1c      	ldr	r3, [pc, #112]	; (8009780 <hci_user_evt_proc+0x98>)
 8009710:	69db      	ldr	r3, [r3, #28]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00c      	beq.n	8009730 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800971a:	2301      	movs	r3, #1
 800971c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800971e:	4b18      	ldr	r3, [pc, #96]	; (8009780 <hci_user_evt_proc+0x98>)
 8009720:	69db      	ldr	r3, [r3, #28]
 8009722:	1d3a      	adds	r2, r7, #4
 8009724:	4610      	mov	r0, r2
 8009726:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009728:	793a      	ldrb	r2, [r7, #4]
 800972a:	4b14      	ldr	r3, [pc, #80]	; (800977c <hci_user_evt_proc+0x94>)
 800972c:	701a      	strb	r2, [r3, #0]
 800972e:	e002      	b.n	8009736 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009730:	4b12      	ldr	r3, [pc, #72]	; (800977c <hci_user_evt_proc+0x94>)
 8009732:	2201      	movs	r2, #1
 8009734:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009736:	4b11      	ldr	r3, [pc, #68]	; (800977c <hci_user_evt_proc+0x94>)
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d004      	beq.n	8009748 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	4618      	mov	r0, r3
 8009742:	f001 fb19 	bl	800ad78 <TL_MM_EvtDone>
 8009746:	e004      	b.n	8009752 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	4619      	mov	r1, r3
 800974c:	480a      	ldr	r0, [pc, #40]	; (8009778 <hci_user_evt_proc+0x90>)
 800974e:	f000 fbe5 	bl	8009f1c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009752:	4809      	ldr	r0, [pc, #36]	; (8009778 <hci_user_evt_proc+0x90>)
 8009754:	f000 fbc0 	bl	8009ed8 <LST_is_empty>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d107      	bne.n	800976e <hci_user_evt_proc+0x86>
 800975e:	4b07      	ldr	r3, [pc, #28]	; (800977c <hci_user_evt_proc+0x94>)
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d003      	beq.n	800976e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009766:	4804      	ldr	r0, [pc, #16]	; (8009778 <hci_user_evt_proc+0x90>)
 8009768:	f7f9 fb32 	bl	8002dd0 <hci_notify_asynch_evt>
  }


  return;
 800976c:	bf00      	nop
 800976e:	bf00      	nop
}
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	200001cc 	.word	0x200001cc
 800977c:	200001d8 	.word	0x200001d8
 8009780:	200016c4 	.word	0x200016c4

08009784 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b088      	sub	sp, #32
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009790:	2000      	movs	r0, #0
 8009792:	f000 f8cb 	bl	800992c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009796:	2300      	movs	r3, #0
 8009798:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	885b      	ldrh	r3, [r3, #2]
 800979e:	b21b      	sxth	r3, r3
 80097a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097a4:	b21a      	sxth	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	029b      	lsls	r3, r3, #10
 80097ac:	b21b      	sxth	r3, r3
 80097ae:	4313      	orrs	r3, r2
 80097b0:	b21b      	sxth	r3, r3
 80097b2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	b2d9      	uxtb	r1, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689a      	ldr	r2, [r3, #8]
 80097be:	8bbb      	ldrh	r3, [r7, #28]
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 f88d 	bl	80098e0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80097c6:	e04e      	b.n	8009866 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80097c8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80097cc:	f7f9 fb17 	bl	8002dfe <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80097d0:	e043      	b.n	800985a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80097d2:	f107 030c 	add.w	r3, r7, #12
 80097d6:	4619      	mov	r1, r3
 80097d8:	4828      	ldr	r0, [pc, #160]	; (800987c <hci_send_req+0xf8>)
 80097da:	f000 fc0c 	bl	8009ff6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	7a5b      	ldrb	r3, [r3, #9]
 80097e2:	2b0f      	cmp	r3, #15
 80097e4:	d114      	bne.n	8009810 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	330b      	adds	r3, #11
 80097ea:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	885b      	ldrh	r3, [r3, #2]
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	8bba      	ldrh	r2, [r7, #28]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d104      	bne.n	8009802 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	7812      	ldrb	r2, [r2, #0]
 8009800:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	785b      	ldrb	r3, [r3, #1]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d027      	beq.n	800985a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800980a:	2301      	movs	r3, #1
 800980c:	77fb      	strb	r3, [r7, #31]
 800980e:	e024      	b.n	800985a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	330b      	adds	r3, #11
 8009814:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800981c:	b29b      	uxth	r3, r3
 800981e:	8bba      	ldrh	r2, [r7, #28]
 8009820:	429a      	cmp	r2, r3
 8009822:	d114      	bne.n	800984e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	7a9b      	ldrb	r3, [r3, #10]
 8009828:	3b03      	subs	r3, #3
 800982a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	695a      	ldr	r2, [r3, #20]
 8009830:	7dfb      	ldrb	r3, [r7, #23]
 8009832:	429a      	cmp	r2, r3
 8009834:	bfa8      	it	ge
 8009836:	461a      	movge	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6918      	ldr	r0, [r3, #16]
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	1cd9      	adds	r1, r3, #3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	461a      	mov	r2, r3
 800984a:	f001 fdf3 	bl	800b434 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009856:	2301      	movs	r3, #1
 8009858:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800985a:	4808      	ldr	r0, [pc, #32]	; (800987c <hci_send_req+0xf8>)
 800985c:	f000 fb3c 	bl	8009ed8 <LST_is_empty>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d0b5      	beq.n	80097d2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009866:	7ffb      	ldrb	r3, [r7, #31]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d0ad      	beq.n	80097c8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800986c:	2001      	movs	r0, #1
 800986e:	f000 f85d 	bl	800992c <NotifyCmdStatus>

  return 0;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3720      	adds	r7, #32
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	200016e4 	.word	0x200016e4

08009880 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009888:	480f      	ldr	r0, [pc, #60]	; (80098c8 <TlInit+0x48>)
 800988a:	f000 fb15 	bl	8009eb8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800988e:	4a0f      	ldr	r2, [pc, #60]	; (80098cc <TlInit+0x4c>)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009894:	480e      	ldr	r0, [pc, #56]	; (80098d0 <TlInit+0x50>)
 8009896:	f000 fb0f 	bl	8009eb8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800989a:	4b0e      	ldr	r3, [pc, #56]	; (80098d4 <TlInit+0x54>)
 800989c:	2201      	movs	r2, #1
 800989e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80098a0:	4b0d      	ldr	r3, [pc, #52]	; (80098d8 <TlInit+0x58>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00a      	beq.n	80098be <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80098ac:	4b0b      	ldr	r3, [pc, #44]	; (80098dc <TlInit+0x5c>)
 80098ae:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80098b0:	4b09      	ldr	r3, [pc, #36]	; (80098d8 <TlInit+0x58>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f107 0208 	add.w	r2, r7, #8
 80098b8:	4610      	mov	r0, r2
 80098ba:	4798      	blx	r3
  }

  return;
 80098bc:	bf00      	nop
 80098be:	bf00      	nop
}
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	200016e4 	.word	0x200016e4
 80098cc:	200001d4 	.word	0x200001d4
 80098d0:	200001cc 	.word	0x200001cc
 80098d4:	200001d8 	.word	0x200001d8
 80098d8:	200016c4 	.word	0x200016c4
 80098dc:	0800996d 	.word	0x0800996d

080098e0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	603a      	str	r2, [r7, #0]
 80098ea:	80fb      	strh	r3, [r7, #6]
 80098ec:	460b      	mov	r3, r1
 80098ee:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80098f0:	4b0c      	ldr	r3, [pc, #48]	; (8009924 <SendCmd+0x44>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	88fa      	ldrh	r2, [r7, #6]
 80098f6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80098fa:	4b0a      	ldr	r3, [pc, #40]	; (8009924 <SendCmd+0x44>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	797a      	ldrb	r2, [r7, #5]
 8009900:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009902:	4b08      	ldr	r3, [pc, #32]	; (8009924 <SendCmd+0x44>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	330c      	adds	r3, #12
 8009908:	797a      	ldrb	r2, [r7, #5]
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	4618      	mov	r0, r3
 800990e:	f001 fd91 	bl	800b434 <memcpy>

  hciContext.io.Send(0,0);
 8009912:	4b05      	ldr	r3, [pc, #20]	; (8009928 <SendCmd+0x48>)
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	2100      	movs	r1, #0
 8009918:	2000      	movs	r0, #0
 800991a:	4798      	blx	r3

  return;
 800991c:	bf00      	nop
}
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	200001d4 	.word	0x200001d4
 8009928:	200016c4 	.word	0x200016c4

0800992c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	4603      	mov	r3, r0
 8009934:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009936:	79fb      	ldrb	r3, [r7, #7]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d108      	bne.n	800994e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800993c:	4b0a      	ldr	r3, [pc, #40]	; (8009968 <NotifyCmdStatus+0x3c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00d      	beq.n	8009960 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009944:	4b08      	ldr	r3, [pc, #32]	; (8009968 <NotifyCmdStatus+0x3c>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2000      	movs	r0, #0
 800994a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800994c:	e008      	b.n	8009960 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800994e:	4b06      	ldr	r3, [pc, #24]	; (8009968 <NotifyCmdStatus+0x3c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d004      	beq.n	8009960 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009956:	4b04      	ldr	r3, [pc, #16]	; (8009968 <NotifyCmdStatus+0x3c>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2001      	movs	r0, #1
 800995c:	4798      	blx	r3
  return;
 800995e:	bf00      	nop
 8009960:	bf00      	nop
}
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	200016ec 	.word	0x200016ec

0800996c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	7a5b      	ldrb	r3, [r3, #9]
 8009978:	2b0f      	cmp	r3, #15
 800997a:	d003      	beq.n	8009984 <TlEvtReceived+0x18>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	7a5b      	ldrb	r3, [r3, #9]
 8009980:	2b0e      	cmp	r3, #14
 8009982:	d107      	bne.n	8009994 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009984:	6879      	ldr	r1, [r7, #4]
 8009986:	4809      	ldr	r0, [pc, #36]	; (80099ac <TlEvtReceived+0x40>)
 8009988:	f000 faee 	bl	8009f68 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800998c:	2000      	movs	r0, #0
 800998e:	f7f9 fa2b 	bl	8002de8 <hci_cmd_resp_release>
 8009992:	e006      	b.n	80099a2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009994:	6879      	ldr	r1, [r7, #4]
 8009996:	4806      	ldr	r0, [pc, #24]	; (80099b0 <TlEvtReceived+0x44>)
 8009998:	f000 fae6 	bl	8009f68 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800999c:	4804      	ldr	r0, [pc, #16]	; (80099b0 <TlEvtReceived+0x44>)
 800999e:	f7f9 fa17 	bl	8002dd0 <hci_notify_asynch_evt>
  }

  return;
 80099a2:	bf00      	nop
}
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	200016e4 	.word	0x200016e4
 80099b0:	200001cc 	.word	0x200001cc

080099b4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a05      	ldr	r2, [pc, #20]	; (80099d4 <hci_register_io_bus+0x20>)
 80099c0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a04      	ldr	r2, [pc, #16]	; (80099d8 <hci_register_io_bus+0x24>)
 80099c6:	611a      	str	r2, [r3, #16]

  return;
 80099c8:	bf00      	nop
}
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	0800aaf1 	.word	0x0800aaf1
 80099d8:	0800ab59 	.word	0x0800ab59

080099dc <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	68b9      	ldr	r1, [r7, #8]
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f001 fd21 	bl	800b434 <memcpy>
 80099f2:	4603      	mov	r3, r0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	68b9      	ldr	r1, [r7, #8]
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f001 fd1f 	bl	800b450 <memset>
 8009a12:	4603      	mov	r3, r0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	4603      	mov	r3, r0
 8009a24:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009a26:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <OTP_Read+0x48>)
 8009a28:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009a2a:	e002      	b.n	8009a32 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	3b08      	subs	r3, #8
 8009a30:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	3307      	adds	r3, #7
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	79fa      	ldrb	r2, [r7, #7]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d003      	beq.n	8009a46 <OTP_Read+0x2a>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	4a09      	ldr	r2, [pc, #36]	; (8009a68 <OTP_Read+0x4c>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d1f2      	bne.n	8009a2c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	3307      	adds	r3, #7
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	79fa      	ldrb	r2, [r7, #7]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d001      	beq.n	8009a56 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009a52:	2300      	movs	r3, #0
 8009a54:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009a56:	68fb      	ldr	r3, [r7, #12]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3714      	adds	r7, #20
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	1fff73f8 	.word	0x1fff73f8
 8009a68:	1fff7000 	.word	0x1fff7000

08009a6c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b088      	sub	sp, #32
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009a74:	f107 030c 	add.w	r3, r7, #12
 8009a78:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	2125      	movs	r1, #37	; 0x25
 8009a84:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009a88:	f000 f94c 	bl	8009d24 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	330b      	adds	r3, #11
 8009a90:	78db      	ldrb	r3, [r3, #3]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3720      	adds	r7, #32
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b088      	sub	sp, #32
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009aa2:	f107 030c 	add.w	r3, r7, #12
 8009aa6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	210f      	movs	r1, #15
 8009ab2:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8009ab6:	f000 f935 	bl	8009d24 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	330b      	adds	r3, #11
 8009abe:	78db      	ldrb	r3, [r3, #3]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3720      	adds	r7, #32
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b088      	sub	sp, #32
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009ad0:	f107 030c 	add.w	r3, r7, #12
 8009ad4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	210e      	movs	r1, #14
 8009adc:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8009ae0:	f000 f920 	bl	8009d24 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	330b      	adds	r3, #11
 8009ae8:	78db      	ldrb	r3, [r3, #3]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3720      	adds	r7, #32
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
	...

08009af4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009af4:	b480      	push	{r7}
 8009af6:	b08b      	sub	sp, #44	; 0x2c
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009b00:	2300      	movs	r3, #0
 8009b02:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009b04:	2300      	movs	r3, #0
 8009b06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009b14:	2300      	movs	r3, #0
 8009b16:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009b1c:	4b4a      	ldr	r3, [pc, #296]	; (8009c48 <SHCI_GetWirelessFwInfo+0x154>)
 8009b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b20:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009b24:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009b2e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a44      	ldr	r2, [pc, #272]	; (8009c4c <SHCI_GetWirelessFwInfo+0x158>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d10f      	bne.n	8009b60 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	695b      	ldr	r3, [r3, #20]
 8009b44:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	699b      	ldr	r3, [r3, #24]
 8009b4a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	69db      	ldr	r3, [r3, #28]
 8009b50:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	617b      	str	r3, [r7, #20]
 8009b5e:	e01a      	b.n	8009b96 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009b68:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009b6c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	0e1b      	lsrs	r3, r3, #24
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	0c1b      	lsrs	r3, r3, #16
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	0a1b      	lsrs	r3, r3, #8
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	091b      	lsrs	r3, r3, #4
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	f003 030f 	and.w	r3, r3, #15
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	f003 030f 	and.w	r3, r3, #15
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	0e1b      	lsrs	r3, r3, #24
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009bdc:	6a3b      	ldr	r3, [r7, #32]
 8009bde:	0c1b      	lsrs	r3, r3, #16
 8009be0:	b2da      	uxtb	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	0a1b      	lsrs	r3, r3, #8
 8009bea:	b2da      	uxtb	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009bf0:	6a3b      	ldr	r3, [r7, #32]
 8009bf2:	b2da      	uxtb	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	b2da      	uxtb	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	0e1b      	lsrs	r3, r3, #24
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	0c1b      	lsrs	r3, r3, #16
 8009c0e:	b2da      	uxtb	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	0a1b      	lsrs	r3, r3, #8
 8009c18:	b2da      	uxtb	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	0e1b      	lsrs	r3, r3, #24
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	0c1b      	lsrs	r3, r3, #16
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	372c      	adds	r7, #44	; 0x2c
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr
 8009c48:	58004000 	.word	0x58004000
 8009c4c:	a94656b9 	.word	0xa94656b9

08009c50 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	4a08      	ldr	r2, [pc, #32]	; (8009c80 <shci_init+0x30>)
 8009c60:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009c62:	4a08      	ldr	r2, [pc, #32]	; (8009c84 <shci_init+0x34>)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009c68:	4806      	ldr	r0, [pc, #24]	; (8009c84 <shci_init+0x34>)
 8009c6a:	f000 f911 	bl	8009e90 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 f894 	bl	8009da0 <TlInit>

  return;
 8009c78:	bf00      	nop
}
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	20001710 	.word	0x20001710
 8009c84:	200016f0 	.word	0x200016f0

08009c88 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009c8e:	4822      	ldr	r0, [pc, #136]	; (8009d18 <shci_user_evt_proc+0x90>)
 8009c90:	f000 f922 	bl	8009ed8 <LST_is_empty>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d12b      	bne.n	8009cf2 <shci_user_evt_proc+0x6a>
 8009c9a:	4b20      	ldr	r3, [pc, #128]	; (8009d1c <shci_user_evt_proc+0x94>)
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d027      	beq.n	8009cf2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009ca2:	f107 030c 	add.w	r3, r7, #12
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	481b      	ldr	r0, [pc, #108]	; (8009d18 <shci_user_evt_proc+0x90>)
 8009caa:	f000 f9a4 	bl	8009ff6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009cae:	4b1c      	ldr	r3, [pc, #112]	; (8009d20 <shci_user_evt_proc+0x98>)
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00c      	beq.n	8009cd0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009cbe:	4b18      	ldr	r3, [pc, #96]	; (8009d20 <shci_user_evt_proc+0x98>)
 8009cc0:	69db      	ldr	r3, [r3, #28]
 8009cc2:	1d3a      	adds	r2, r7, #4
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009cc8:	793a      	ldrb	r2, [r7, #4]
 8009cca:	4b14      	ldr	r3, [pc, #80]	; (8009d1c <shci_user_evt_proc+0x94>)
 8009ccc:	701a      	strb	r2, [r3, #0]
 8009cce:	e002      	b.n	8009cd6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009cd0:	4b12      	ldr	r3, [pc, #72]	; (8009d1c <shci_user_evt_proc+0x94>)
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009cd6:	4b11      	ldr	r3, [pc, #68]	; (8009d1c <shci_user_evt_proc+0x94>)
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d004      	beq.n	8009ce8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f001 f849 	bl	800ad78 <TL_MM_EvtDone>
 8009ce6:	e004      	b.n	8009cf2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	4619      	mov	r1, r3
 8009cec:	480a      	ldr	r0, [pc, #40]	; (8009d18 <shci_user_evt_proc+0x90>)
 8009cee:	f000 f915 	bl	8009f1c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009cf2:	4809      	ldr	r0, [pc, #36]	; (8009d18 <shci_user_evt_proc+0x90>)
 8009cf4:	f000 f8f0 	bl	8009ed8 <LST_is_empty>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d107      	bne.n	8009d0e <shci_user_evt_proc+0x86>
 8009cfe:	4b07      	ldr	r3, [pc, #28]	; (8009d1c <shci_user_evt_proc+0x94>)
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d003      	beq.n	8009d0e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009d06:	4804      	ldr	r0, [pc, #16]	; (8009d18 <shci_user_evt_proc+0x90>)
 8009d08:	f7f7 f966 	bl	8000fd8 <shci_notify_asynch_evt>
  }


  return;
 8009d0c:	bf00      	nop
 8009d0e:	bf00      	nop
}
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	20000200 	.word	0x20000200
 8009d1c:	20000210 	.word	0x20000210
 8009d20:	200016f0 	.word	0x200016f0

08009d24 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60ba      	str	r2, [r7, #8]
 8009d2c:	607b      	str	r3, [r7, #4]
 8009d2e:	4603      	mov	r3, r0
 8009d30:	81fb      	strh	r3, [r7, #14]
 8009d32:	460b      	mov	r3, r1
 8009d34:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009d36:	2000      	movs	r0, #0
 8009d38:	f000 f864 	bl	8009e04 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009d3c:	4b16      	ldr	r3, [pc, #88]	; (8009d98 <shci_send+0x74>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	89fa      	ldrh	r2, [r7, #14]
 8009d42:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009d46:	4b14      	ldr	r3, [pc, #80]	; (8009d98 <shci_send+0x74>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	7b7a      	ldrb	r2, [r7, #13]
 8009d4c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009d4e:	4b12      	ldr	r3, [pc, #72]	; (8009d98 <shci_send+0x74>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	330c      	adds	r3, #12
 8009d54:	7b7a      	ldrb	r2, [r7, #13]
 8009d56:	68b9      	ldr	r1, [r7, #8]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f001 fb6b 	bl	800b434 <memcpy>

  shciContext.io.Send(0,0);
 8009d5e:	4b0f      	ldr	r3, [pc, #60]	; (8009d9c <shci_send+0x78>)
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	2100      	movs	r1, #0
 8009d64:	2000      	movs	r0, #0
 8009d66:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009d68:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009d6c:	f7f7 f94b 	bl	8001006 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f103 0008 	add.w	r0, r3, #8
 8009d76:	4b08      	ldr	r3, [pc, #32]	; (8009d98 <shci_send+0x74>)
 8009d78:	6819      	ldr	r1, [r3, #0]
 8009d7a:	4b07      	ldr	r3, [pc, #28]	; (8009d98 <shci_send+0x74>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	789b      	ldrb	r3, [r3, #2]
 8009d80:	3303      	adds	r3, #3
 8009d82:	461a      	mov	r2, r3
 8009d84:	f001 fb56 	bl	800b434 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009d88:	2001      	movs	r0, #1
 8009d8a:	f000 f83b 	bl	8009e04 <Cmd_SetStatus>

  return;
 8009d8e:	bf00      	nop
}
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	2000020c 	.word	0x2000020c
 8009d9c:	200016f0 	.word	0x200016f0

08009da0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009da8:	4a10      	ldr	r2, [pc, #64]	; (8009dec <TlInit+0x4c>)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009dae:	4810      	ldr	r0, [pc, #64]	; (8009df0 <TlInit+0x50>)
 8009db0:	f000 f882 	bl	8009eb8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009db4:	2001      	movs	r0, #1
 8009db6:	f000 f825 	bl	8009e04 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009dba:	4b0e      	ldr	r3, [pc, #56]	; (8009df4 <TlInit+0x54>)
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009dc0:	4b0d      	ldr	r3, [pc, #52]	; (8009df8 <TlInit+0x58>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00c      	beq.n	8009de2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009dcc:	4b0b      	ldr	r3, [pc, #44]	; (8009dfc <TlInit+0x5c>)
 8009dce:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009dd0:	4b0b      	ldr	r3, [pc, #44]	; (8009e00 <TlInit+0x60>)
 8009dd2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009dd4:	4b08      	ldr	r3, [pc, #32]	; (8009df8 <TlInit+0x58>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f107 020c 	add.w	r2, r7, #12
 8009ddc:	4610      	mov	r0, r2
 8009dde:	4798      	blx	r3
  }

  return;
 8009de0:	bf00      	nop
 8009de2:	bf00      	nop
}
 8009de4:	3718      	adds	r7, #24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	2000020c 	.word	0x2000020c
 8009df0:	20000200 	.word	0x20000200
 8009df4:	20000210 	.word	0x20000210
 8009df8:	200016f0 	.word	0x200016f0
 8009dfc:	08009e55 	.word	0x08009e55
 8009e00:	08009e6d 	.word	0x08009e6d

08009e04 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009e0e:	79fb      	ldrb	r3, [r7, #7]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10b      	bne.n	8009e2c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009e14:	4b0d      	ldr	r3, [pc, #52]	; (8009e4c <Cmd_SetStatus+0x48>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d003      	beq.n	8009e24 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009e1c:	4b0b      	ldr	r3, [pc, #44]	; (8009e4c <Cmd_SetStatus+0x48>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2000      	movs	r0, #0
 8009e22:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009e24:	4b0a      	ldr	r3, [pc, #40]	; (8009e50 <Cmd_SetStatus+0x4c>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009e2a:	e00b      	b.n	8009e44 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009e2c:	4b08      	ldr	r3, [pc, #32]	; (8009e50 <Cmd_SetStatus+0x4c>)
 8009e2e:	2201      	movs	r2, #1
 8009e30:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009e32:	4b06      	ldr	r3, [pc, #24]	; (8009e4c <Cmd_SetStatus+0x48>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d004      	beq.n	8009e44 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009e3a:	4b04      	ldr	r3, [pc, #16]	; (8009e4c <Cmd_SetStatus+0x48>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2001      	movs	r0, #1
 8009e40:	4798      	blx	r3
  return;
 8009e42:	bf00      	nop
 8009e44:	bf00      	nop
}
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	20001710 	.word	0x20001710
 8009e50:	20000208 	.word	0x20000208

08009e54 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	f7f7 f8c7 	bl	8000ff0 <shci_cmd_resp_release>

  return;
 8009e62:	bf00      	nop
}
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
	...

08009e6c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009e74:	6879      	ldr	r1, [r7, #4]
 8009e76:	4805      	ldr	r0, [pc, #20]	; (8009e8c <TlUserEvtReceived+0x20>)
 8009e78:	f000 f876 	bl	8009f68 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009e7c:	4803      	ldr	r0, [pc, #12]	; (8009e8c <TlUserEvtReceived+0x20>)
 8009e7e:	f7f7 f8ab 	bl	8000fd8 <shci_notify_asynch_evt>

  return;
 8009e82:	bf00      	nop
}
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	20000200 	.word	0x20000200

08009e90 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a05      	ldr	r2, [pc, #20]	; (8009eb0 <shci_register_io_bus+0x20>)
 8009e9c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a04      	ldr	r2, [pc, #16]	; (8009eb4 <shci_register_io_bus+0x24>)
 8009ea2:	611a      	str	r2, [r3, #16]

  return;
 8009ea4:	bf00      	nop
}
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	0800ac05 	.word	0x0800ac05
 8009eb4:	0800ac59 	.word	0x0800ac59

08009eb8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	605a      	str	r2, [r3, #4]
}
 8009ecc:	bf00      	nop
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b087      	sub	sp, #28
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ee4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009ee8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009eea:	b672      	cpsid	i
}
 8009eec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d102      	bne.n	8009efe <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	75fb      	strb	r3, [r7, #23]
 8009efc:	e001      	b.n	8009f02 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8009efe:	2300      	movs	r3, #0
 8009f00:	75fb      	strb	r3, [r7, #23]
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	f383 8810 	msr	PRIMASK, r3
}
 8009f0c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	371c      	adds	r7, #28
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b087      	sub	sp, #28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f26:	f3ef 8310 	mrs	r3, PRIMASK
 8009f2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009f2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f30:	b672      	cpsid	i
}
 8009f32:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	683a      	ldr	r2, [r7, #0]
 8009f4e:	605a      	str	r2, [r3, #4]
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	f383 8810 	msr	PRIMASK, r3
}
 8009f5a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009f5c:	bf00      	nop
 8009f5e:	371c      	adds	r7, #28
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b087      	sub	sp, #28
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f72:	f3ef 8310 	mrs	r3, PRIMASK
 8009f76:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f78:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009f7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f7c:	b672      	cpsid	i
}
 8009f7e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	685a      	ldr	r2, [r3, #4]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	683a      	ldr	r2, [r7, #0]
 8009f92:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	683a      	ldr	r2, [r7, #0]
 8009f9a:	601a      	str	r2, [r3, #0]
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	f383 8810 	msr	PRIMASK, r3
}
 8009fa6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009fa8:	bf00      	nop
 8009faa:	371c      	adds	r7, #28
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b087      	sub	sp, #28
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8009fc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009fc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fc6:	b672      	cpsid	i
}
 8009fc8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	6812      	ldr	r2, [r2, #0]
 8009fd2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	6852      	ldr	r2, [r2, #4]
 8009fdc:	605a      	str	r2, [r3, #4]
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	f383 8810 	msr	PRIMASK, r3
}
 8009fe8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009fea:	bf00      	nop
 8009fec:	371c      	adds	r7, #28
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b086      	sub	sp, #24
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a000:	f3ef 8310 	mrs	r3, PRIMASK
 800a004:	60fb      	str	r3, [r7, #12]
  return(result);
 800a006:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a008:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a00a:	b672      	cpsid	i
}
 800a00c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7ff ffca 	bl	8009fb4 <LST_remove_node>
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	f383 8810 	msr	PRIMASK, r3
}
 800a02a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a02c:	bf00      	nop
 800a02e:	3718      	adds	r7, #24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
 800a040:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2200      	movs	r2, #0
 800a052:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	887a      	ldrh	r2, [r7, #2]
 800a06a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	7e3a      	ldrb	r2, [r7, #24]
 800a070:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800a072:	7e3b      	ldrb	r3, [r7, #24]
 800a074:	f003 0302 	and.w	r3, r3, #2
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d006      	beq.n	800a08a <CircularQueue_Init+0x56>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	891b      	ldrh	r3, [r3, #8]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800a084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a088:	e000      	b.n	800a08c <CircularQueue_Init+0x58>
  }
  return 0;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b08e      	sub	sp, #56	; 0x38
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	603b      	str	r3, [r7, #0]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800a0bc:	2300      	movs	r3, #0
 800a0be:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	891b      	ldrh	r3, [r3, #8]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d101      	bne.n	800a0d0 <CircularQueue_Add+0x38>
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	e000      	b.n	800a0d2 <CircularQueue_Add+0x3a>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d02a      	beq.n	800a132 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	891b      	ldrh	r3, [r3, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d123      	bne.n	800a12c <CircularQueue_Add+0x94>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6819      	ldr	r1, [r3, #0]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	1c58      	adds	r0, r3, #1
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	4298      	cmp	r0, r3
 800a102:	d306      	bcc.n	800a112 <CircularQueue_Add+0x7a>
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6918      	ldr	r0, [r3, #16]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	1ac3      	subs	r3, r0, r3
 800a10e:	3301      	adds	r3, #1
 800a110:	e002      	b.n	800a118 <CircularQueue_Add+0x80>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	3301      	adds	r3, #1
 800a118:	440b      	add	r3, r1
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	021b      	lsls	r3, r3, #8
 800a120:	b29b      	uxth	r3, r3
 800a122:	4413      	add	r3, r2
 800a124:	b29b      	uxth	r3, r3
 800a126:	3302      	adds	r3, #2
 800a128:	b29b      	uxth	r3, r3
 800a12a:	e001      	b.n	800a130 <CircularQueue_Add+0x98>
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	891b      	ldrh	r3, [r3, #8]
 800a130:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	891b      	ldrh	r3, [r3, #8]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d002      	beq.n	800a140 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	891b      	ldrh	r3, [r3, #8]
 800a13e:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	691a      	ldr	r2, [r3, #16]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d307      	bcc.n	800a15c <CircularQueue_Add+0xc4>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6919      	ldr	r1, [r3, #16]
 800a154:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a156:	440b      	add	r3, r1
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	e000      	b.n	800a15e <CircularQueue_Add+0xc6>
 800a15c:	2300      	movs	r3, #0
 800a15e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800a160:	88fa      	ldrh	r2, [r7, #6]
 800a162:	7ffb      	ldrb	r3, [r7, #31]
 800a164:	4413      	add	r3, r2
 800a166:	461a      	mov	r2, r3
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	fb02 f303 	mul.w	r3, r2, r3
 800a16e:	69ba      	ldr	r2, [r7, #24]
 800a170:	429a      	cmp	r2, r3
 800a172:	d80b      	bhi.n	800a18c <CircularQueue_Add+0xf4>
 800a174:	88fa      	ldrh	r2, [r7, #6]
 800a176:	7ffb      	ldrb	r3, [r7, #31]
 800a178:	4413      	add	r3, r2
 800a17a:	461a      	mov	r2, r3
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a182:	fb01 f202 	mul.w	r2, r1, r2
 800a186:	1a9b      	subs	r3, r3, r2
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	e000      	b.n	800a18e <CircularQueue_Add+0xf6>
 800a18c:	2300      	movs	r3, #0
 800a18e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800a190:	7dfa      	ldrb	r2, [r7, #23]
 800a192:	7ffb      	ldrb	r3, [r7, #31]
 800a194:	429a      	cmp	r2, r3
 800a196:	bf8c      	ite	hi
 800a198:	2301      	movhi	r3, #1
 800a19a:	2300      	movls	r3, #0
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800a1a0:	7fbb      	ldrb	r3, [r7, #30]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d008      	beq.n	800a1b8 <CircularQueue_Add+0x120>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	7f1b      	ldrb	r3, [r3, #28]
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <CircularQueue_Add+0x120>
 800a1b2:	7dfb      	ldrb	r3, [r7, #23]
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	e000      	b.n	800a1ba <CircularQueue_Add+0x122>
 800a1b8:	8bbb      	ldrh	r3, [r7, #28]
 800a1ba:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800a1bc:	7fbb      	ldrb	r3, [r7, #30]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d008      	beq.n	800a1d4 <CircularQueue_Add+0x13c>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	7f1b      	ldrb	r3, [r3, #28]
 800a1c6:	f003 0302 	and.w	r3, r3, #2
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d002      	beq.n	800a1d4 <CircularQueue_Add+0x13c>
 800a1ce:	7ffb      	ldrb	r3, [r7, #31]
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	e000      	b.n	800a1d6 <CircularQueue_Add+0x13e>
 800a1d4:	8bbb      	ldrh	r3, [r7, #28]
 800a1d6:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800a1d8:	88fb      	ldrh	r3, [r7, #6]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f000 817e 	beq.w	800a4dc <CircularQueue_Add+0x444>
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	695a      	ldr	r2, [r3, #20]
 800a1e4:	88f9      	ldrh	r1, [r7, #6]
 800a1e6:	7ffb      	ldrb	r3, [r7, #31]
 800a1e8:	440b      	add	r3, r1
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	fb01 f303 	mul.w	r3, r1, r3
 800a1f2:	441a      	add	r2, r3
 800a1f4:	8bbb      	ldrh	r3, [r7, #28]
 800a1f6:	441a      	add	r2, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	f200 816d 	bhi.w	800a4dc <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800a202:	2300      	movs	r3, #0
 800a204:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a206:	e14a      	b.n	800a49e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	691a      	ldr	r2, [r3, #16]
 800a20c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a20e:	441a      	add	r2, r3
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	429a      	cmp	r2, r3
 800a216:	d307      	bcc.n	800a228 <CircularQueue_Add+0x190>
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	691a      	ldr	r2, [r3, #16]
 800a21c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a21e:	441a      	add	r2, r3
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	e003      	b.n	800a230 <CircularQueue_Add+0x198>
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	691a      	ldr	r2, [r3, #16]
 800a22c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a22e:	4413      	add	r3, r2
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	891b      	ldrh	r3, [r3, #8]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d130      	bne.n	800a2a4 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a248:	1c59      	adds	r1, r3, #1
 800a24a:	6339      	str	r1, [r7, #48]	; 0x30
 800a24c:	4413      	add	r3, r2
 800a24e:	88fa      	ldrh	r2, [r7, #6]
 800a250:	b2d2      	uxtb	r2, r2
 800a252:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d304      	bcc.n	800a268 <CircularQueue_Add+0x1d0>
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	e000      	b.n	800a26a <CircularQueue_Add+0x1d2>
 800a268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26a:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800a26c:	88fb      	ldrh	r3, [r7, #6]
 800a26e:	0a1b      	lsrs	r3, r3, #8
 800a270:	b298      	uxth	r0, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a278:	1c59      	adds	r1, r3, #1
 800a27a:	6339      	str	r1, [r7, #48]	; 0x30
 800a27c:	4413      	add	r3, r2
 800a27e:	b2c2      	uxtb	r2, r0
 800a280:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a288:	429a      	cmp	r2, r3
 800a28a:	d304      	bcc.n	800a296 <CircularQueue_Add+0x1fe>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	e000      	b.n	800a298 <CircularQueue_Add+0x200>
 800a296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a298:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	1c9a      	adds	r2, r3, #2
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800a2a4:	88fa      	ldrh	r2, [r7, #6]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6859      	ldr	r1, [r3, #4]
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ac:	1acb      	subs	r3, r1, r3
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	bf28      	it	cs
 800a2b2:	4613      	movcs	r3, r2
 800a2b4:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800a2b6:	88fb      	ldrh	r3, [r7, #6]
 800a2b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d007      	beq.n	800a2ce <CircularQueue_Add+0x236>
 800a2be:	88fb      	ldrh	r3, [r7, #6]
 800a2c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d225      	bcs.n	800a312 <CircularQueue_Add+0x27a>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	7f1b      	ldrb	r3, [r3, #28]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d121      	bne.n	800a312 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d4:	18d0      	adds	r0, r2, r3
 800a2d6:	88fb      	ldrh	r3, [r7, #6]
 800a2d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2da:	fb02 f303 	mul.w	r3, r2, r3
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	f001 f8a5 	bl	800b434 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	695a      	ldr	r2, [r3, #20]
 800a2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f0:	441a      	add	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800a2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fc:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800a2fe:	88fa      	ldrh	r2, [r7, #6]
 800a300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800a306:	7ffb      	ldrb	r3, [r7, #31]
 800a308:	b29a      	uxth	r2, r3
 800a30a:	88fb      	ldrh	r3, [r7, #6]
 800a30c:	4413      	add	r3, r2
 800a30e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a310:	e0a4      	b.n	800a45c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800a312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a314:	2b00      	cmp	r3, #0
 800a316:	f000 80a1 	beq.w	800a45c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	7f1b      	ldrb	r3, [r3, #28]
 800a31e:	f003 0301 	and.w	r3, r3, #1
 800a322:	2b00      	cmp	r3, #0
 800a324:	d03a      	beq.n	800a39c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	891b      	ldrh	r3, [r3, #8]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10d      	bne.n	800a34a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	3b02      	subs	r3, #2
 800a336:	4413      	add	r3, r2
 800a338:	22ff      	movs	r2, #255	; 0xff
 800a33a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a342:	3b01      	subs	r3, #1
 800a344:	4413      	add	r3, r2
 800a346:	22ff      	movs	r2, #255	; 0xff
 800a348:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	695a      	ldr	r2, [r3, #20]
 800a34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a350:	441a      	add	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a356:	2300      	movs	r3, #0
 800a358:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a35a:	88fb      	ldrh	r3, [r7, #6]
 800a35c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a35e:	2300      	movs	r3, #0
 800a360:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	891b      	ldrh	r3, [r3, #8]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d16f      	bne.n	800a44a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a370:	1c59      	adds	r1, r3, #1
 800a372:	6339      	str	r1, [r7, #48]	; 0x30
 800a374:	4413      	add	r3, r2
 800a376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a378:	b2d2      	uxtb	r2, r2
 800a37a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37e:	0a18      	lsrs	r0, r3, #8
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a386:	1c59      	adds	r1, r3, #1
 800a388:	6339      	str	r1, [r7, #48]	; 0x30
 800a38a:	4413      	add	r3, r2
 800a38c:	b2c2      	uxtb	r2, r0
 800a38e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	695b      	ldr	r3, [r3, #20]
 800a394:	1c9a      	adds	r2, r3, #2
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	615a      	str	r2, [r3, #20]
 800a39a:	e056      	b.n	800a44a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	7f1b      	ldrb	r3, [r3, #28]
 800a3a0:	f003 0302 	and.w	r3, r3, #2
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d050      	beq.n	800a44a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	891b      	ldrh	r3, [r3, #8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d14a      	bne.n	800a446 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b6:	3b02      	subs	r3, #2
 800a3b8:	4413      	add	r3, r2
 800a3ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3bc:	b2d2      	uxtb	r2, r2
 800a3be:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c2:	0a19      	lsrs	r1, r3, #8
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	4413      	add	r3, r2
 800a3ce:	b2ca      	uxtb	r2, r1
 800a3d0:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d8:	18d0      	adds	r0, r2, r3
 800a3da:	88fb      	ldrh	r3, [r7, #6]
 800a3dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3de:	fb02 f303 	mul.w	r3, r2, r3
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	f001 f823 	bl	800b434 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	695a      	ldr	r2, [r3, #20]
 800a3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f4:	441a      	add	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fc:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a3fe:	88fa      	ldrh	r2, [r7, #6]
 800a400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	1c5a      	adds	r2, r3, #1
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a410:	2300      	movs	r3, #0
 800a412:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41a:	1c59      	adds	r1, r3, #1
 800a41c:	6339      	str	r1, [r7, #48]	; 0x30
 800a41e:	4413      	add	r3, r2
 800a420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a422:	b2d2      	uxtb	r2, r2
 800a424:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	0a18      	lsrs	r0, r3, #8
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a430:	1c59      	adds	r1, r3, #1
 800a432:	6339      	str	r1, [r7, #48]	; 0x30
 800a434:	4413      	add	r3, r2
 800a436:	b2c2      	uxtb	r2, r0
 800a438:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	1c9a      	adds	r2, r3, #2
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	615a      	str	r2, [r3, #20]
 800a444:	e001      	b.n	800a44a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a446:	2300      	movs	r3, #0
 800a448:	e049      	b.n	800a4de <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a44a:	7ffb      	ldrb	r3, [r7, #31]
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a450:	b29b      	uxth	r3, r3
 800a452:	4413      	add	r3, r2
 800a454:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800a45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d015      	beq.n	800a48e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a468:	18d0      	adds	r0, r2, r3
 800a46a:	88fb      	ldrh	r3, [r7, #6]
 800a46c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a46e:	fb03 f202 	mul.w	r2, r3, r2
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	4413      	add	r3, r2
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	4413      	add	r3, r2
 800a47a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a47c:	4619      	mov	r1, r3
 800a47e:	f000 ffd9 	bl	800b434 <memcpy>
        q->byteCount += NbBytesToCopy;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	695a      	ldr	r2, [r3, #20]
 800a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a488:	441a      	add	r2, r3
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	1c5a      	adds	r2, r3, #1
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49a:	3301      	adds	r3, #1
 800a49c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a49e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	f4ff aeb0 	bcc.w	800a208 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6919      	ldr	r1, [r3, #16]
 800a4b0:	7ffb      	ldrb	r3, [r7, #31]
 800a4b2:	4419      	add	r1, r3
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	4299      	cmp	r1, r3
 800a4ba:	d307      	bcc.n	800a4cc <CircularQueue_Add+0x434>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6919      	ldr	r1, [r3, #16]
 800a4c0:	7ffb      	ldrb	r3, [r7, #31]
 800a4c2:	4419      	add	r1, r3
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	1acb      	subs	r3, r1, r3
 800a4ca:	e003      	b.n	800a4d4 <CircularQueue_Add+0x43c>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6919      	ldr	r1, [r3, #16]
 800a4d0:	7ffb      	ldrb	r3, [r7, #31]
 800a4d2:	440b      	add	r3, r1
 800a4d4:	4413      	add	r3, r2
 800a4d6:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	e000      	b.n	800a4de <CircularQueue_Add+0x446>
    return NULL;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3738      	adds	r7, #56	; 0x38
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b085      	sub	sp, #20
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	891b      	ldrh	r3, [r3, #8]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d101      	bne.n	800a504 <CircularQueue_Remove+0x1e>
 800a500:	2302      	movs	r3, #2
 800a502:	e000      	b.n	800a506 <CircularQueue_Remove+0x20>
 800a504:	2300      	movs	r3, #0
 800a506:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	695b      	ldr	r3, [r3, #20]
 800a510:	2b00      	cmp	r3, #0
 800a512:	f000 80cc 	beq.w	800a6ae <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	891b      	ldrh	r3, [r3, #8]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d121      	bne.n	800a562 <CircularQueue_Remove+0x7c>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	4413      	add	r3, r2
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6819      	ldr	r1, [r3, #0]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	1c58      	adds	r0, r3, #1
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	4298      	cmp	r0, r3
 800a53c:	d306      	bcc.n	800a54c <CircularQueue_Remove+0x66>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68d8      	ldr	r0, [r3, #12]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	1ac3      	subs	r3, r0, r3
 800a548:	3301      	adds	r3, #1
 800a54a:	e002      	b.n	800a552 <CircularQueue_Remove+0x6c>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	3301      	adds	r3, #1
 800a552:	440b      	add	r3, r1
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	b29b      	uxth	r3, r3
 800a558:	021b      	lsls	r3, r3, #8
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	4413      	add	r3, r2
 800a55e:	b29b      	uxth	r3, r3
 800a560:	e001      	b.n	800a566 <CircularQueue_Remove+0x80>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	891b      	ldrh	r3, [r3, #8]
 800a566:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	7f1b      	ldrb	r3, [r3, #28]
 800a56c:	f003 0301 	and.w	r3, r3, #1
 800a570:	2b00      	cmp	r3, #0
 800a572:	d057      	beq.n	800a624 <CircularQueue_Remove+0x13e>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	7f1b      	ldrb	r3, [r3, #28]
 800a578:	f003 0302 	and.w	r3, r3, #2
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d151      	bne.n	800a624 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a580:	897b      	ldrh	r3, [r7, #10]
 800a582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a586:	4293      	cmp	r3, r2
 800a588:	d103      	bne.n	800a592 <CircularQueue_Remove+0xac>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	891b      	ldrh	r3, [r3, #8]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d012      	beq.n	800a5b8 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	68da      	ldr	r2, [r3, #12]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d942      	bls.n	800a624 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	891b      	ldrh	r3, [r3, #8]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d03e      	beq.n	800a624 <CircularQueue_Remove+0x13e>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	685a      	ldr	r2, [r3, #4]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	1ad3      	subs	r3, r2, r3
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	8912      	ldrh	r2, [r2, #8]
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d235      	bcs.n	800a624 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	695a      	ldr	r2, [r3, #20]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	68d9      	ldr	r1, [r3, #12]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	1acb      	subs	r3, r1, r3
 800a5c6:	441a      	add	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	891b      	ldrh	r3, [r3, #8]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d121      	bne.n	800a61e <CircularQueue_Remove+0x138>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6819      	ldr	r1, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	1c58      	adds	r0, r3, #1
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	4298      	cmp	r0, r3
 800a5f8:	d306      	bcc.n	800a608 <CircularQueue_Remove+0x122>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68d8      	ldr	r0, [r3, #12]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	1ac3      	subs	r3, r0, r3
 800a604:	3301      	adds	r3, #1
 800a606:	e002      	b.n	800a60e <CircularQueue_Remove+0x128>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	3301      	adds	r3, #1
 800a60e:	440b      	add	r3, r1
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	b29b      	uxth	r3, r3
 800a614:	021b      	lsls	r3, r3, #8
 800a616:	b29b      	uxth	r3, r3
 800a618:	4413      	add	r3, r2
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	e001      	b.n	800a622 <CircularQueue_Remove+0x13c>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	891b      	ldrh	r3, [r3, #8]
 800a622:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	68d9      	ldr	r1, [r3, #12]
 800a62c:	7a7b      	ldrb	r3, [r7, #9]
 800a62e:	4419      	add	r1, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	4299      	cmp	r1, r3
 800a636:	d307      	bcc.n	800a648 <CircularQueue_Remove+0x162>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	68d9      	ldr	r1, [r3, #12]
 800a63c:	7a7b      	ldrb	r3, [r7, #9]
 800a63e:	4419      	add	r1, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	1acb      	subs	r3, r1, r3
 800a646:	e003      	b.n	800a650 <CircularQueue_Remove+0x16a>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	68d9      	ldr	r1, [r3, #12]
 800a64c:	7a7b      	ldrb	r3, [r7, #9]
 800a64e:	440b      	add	r3, r1
 800a650:	4413      	add	r3, r2
 800a652:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	695b      	ldr	r3, [r3, #20]
 800a658:	8979      	ldrh	r1, [r7, #10]
 800a65a:	7a7a      	ldrb	r2, [r7, #9]
 800a65c:	440a      	add	r2, r1
 800a65e:	1a9a      	subs	r2, r3, r2
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	695b      	ldr	r3, [r3, #20]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d01b      	beq.n	800a6a4 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	68da      	ldr	r2, [r3, #12]
 800a670:	897b      	ldrh	r3, [r7, #10]
 800a672:	441a      	add	r2, r3
 800a674:	7a7b      	ldrb	r3, [r7, #9]
 800a676:	441a      	add	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d309      	bcc.n	800a694 <CircularQueue_Remove+0x1ae>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	68da      	ldr	r2, [r3, #12]
 800a684:	897b      	ldrh	r3, [r7, #10]
 800a686:	441a      	add	r2, r3
 800a688:	7a7b      	ldrb	r3, [r7, #9]
 800a68a:	441a      	add	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	e005      	b.n	800a6a0 <CircularQueue_Remove+0x1ba>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	68da      	ldr	r2, [r3, #12]
 800a698:	897b      	ldrh	r3, [r7, #10]
 800a69a:	441a      	add	r2, r3
 800a69c:	7a7b      	ldrb	r3, [r7, #9]
 800a69e:	4413      	add	r3, r2
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	699b      	ldr	r3, [r3, #24]
 800a6a8:	1e5a      	subs	r2, r3, #1
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d002      	beq.n	800a6ba <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	897a      	ldrh	r2, [r7, #10]
 800a6b8:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b087      	sub	sp, #28
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	891b      	ldrh	r3, [r3, #8]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d101      	bne.n	800a6e6 <CircularQueue_Sense+0x1e>
 800a6e2:	2302      	movs	r3, #2
 800a6e4:	e000      	b.n	800a6e8 <CircularQueue_Sense+0x20>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 8090 	beq.w	800a81c <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	891b      	ldrh	r3, [r3, #8]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d121      	bne.n	800a74e <CircularQueue_Sense+0x86>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	4413      	add	r3, r2
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	b29a      	uxth	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6819      	ldr	r1, [r3, #0]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	1c58      	adds	r0, r3, #1
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	4298      	cmp	r0, r3
 800a728:	d306      	bcc.n	800a738 <CircularQueue_Sense+0x70>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	68d8      	ldr	r0, [r3, #12]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	1ac3      	subs	r3, r0, r3
 800a734:	3301      	adds	r3, #1
 800a736:	e002      	b.n	800a73e <CircularQueue_Sense+0x76>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	3301      	adds	r3, #1
 800a73e:	440b      	add	r3, r1
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	b29b      	uxth	r3, r3
 800a744:	021b      	lsls	r3, r3, #8
 800a746:	b29b      	uxth	r3, r3
 800a748:	4413      	add	r3, r2
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	e001      	b.n	800a752 <CircularQueue_Sense+0x8a>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	891b      	ldrh	r3, [r3, #8]
 800a752:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	7f1b      	ldrb	r3, [r3, #28]
 800a758:	f003 0301 	and.w	r3, r3, #1
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d048      	beq.n	800a7f2 <CircularQueue_Sense+0x12a>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	7f1b      	ldrb	r3, [r3, #28]
 800a764:	f003 0302 	and.w	r3, r3, #2
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d142      	bne.n	800a7f2 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a76c:	8a7b      	ldrh	r3, [r7, #18]
 800a76e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a772:	4293      	cmp	r3, r2
 800a774:	d103      	bne.n	800a77e <CircularQueue_Sense+0xb6>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	891b      	ldrh	r3, [r3, #8]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d012      	beq.n	800a7a4 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68da      	ldr	r2, [r3, #12]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a786:	429a      	cmp	r2, r3
 800a788:	d933      	bls.n	800a7f2 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	891b      	ldrh	r3, [r3, #8]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d02f      	beq.n	800a7f2 <CircularQueue_Sense+0x12a>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	685a      	ldr	r2, [r3, #4]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	1ad3      	subs	r3, r2, r3
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	8912      	ldrh	r2, [r2, #8]
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d226      	bcs.n	800a7f2 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	891b      	ldrh	r3, [r3, #8]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d11d      	bne.n	800a7ec <CircularQueue_Sense+0x124>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6819      	ldr	r1, [r3, #0]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	1c58      	adds	r0, r3, #1
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	4298      	cmp	r0, r3
 800a7ca:	d305      	bcc.n	800a7d8 <CircularQueue_Sense+0x110>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	1ac3      	subs	r3, r0, r3
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	e001      	b.n	800a7dc <CircularQueue_Sense+0x114>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	440b      	add	r3, r1
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	021b      	lsls	r3, r3, #8
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	4413      	add	r3, r2
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	e001      	b.n	800a7f0 <CircularQueue_Sense+0x128>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	891b      	ldrh	r3, [r3, #8]
 800a7f0:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	7af9      	ldrb	r1, [r7, #11]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	4419      	add	r1, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	4299      	cmp	r1, r3
 800a802:	d306      	bcc.n	800a812 <CircularQueue_Sense+0x14a>
 800a804:	7af9      	ldrb	r1, [r7, #11]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	4419      	add	r1, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	1acb      	subs	r3, r1, r3
 800a810:	e002      	b.n	800a818 <CircularQueue_Sense+0x150>
 800a812:	7af9      	ldrb	r1, [r7, #11]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	440b      	add	r3, r1
 800a818:	4413      	add	r3, r2
 800a81a:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d002      	beq.n	800a828 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	8a7a      	ldrh	r2, [r7, #18]
 800a826:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800a828:	697b      	ldr	r3, [r7, #20]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	371c      	adds	r7, #28
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a836:	b480      	push	{r7}
 800a838:	af00      	add	r7, sp, #0
  return;
 800a83a:	bf00      	nop
}
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a844:	b480      	push	{r7}
 800a846:	af00      	add	r7, sp, #0
  return;
 800a848:	bf00      	nop
}
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr

0800a852 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a852:	b480      	push	{r7}
 800a854:	af00      	add	r7, sp, #0
  return;
 800a856:	bf00      	nop
}
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a860:	b480      	push	{r7}
 800a862:	af00      	add	r7, sp, #0
  return;
 800a864:	bf00      	nop
}
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr

0800a86e <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a86e:	b480      	push	{r7}
 800a870:	af00      	add	r7, sp, #0
  return;
 800a872:	bf00      	nop
}
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a87c:	b480      	push	{r7}
 800a87e:	af00      	add	r7, sp, #0
  return;
 800a880:	bf00      	nop
}
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a88a:	b480      	push	{r7}
 800a88c:	af00      	add	r7, sp, #0
  return;
 800a88e:	bf00      	nop
}
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a898:	b480      	push	{r7}
 800a89a:	af00      	add	r7, sp, #0
  return;
 800a89c:	bf00      	nop
}
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	af00      	add	r7, sp, #0
  return;
 800a8aa:	bf00      	nop
}
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	af00      	add	r7, sp, #0
  return;
 800a8b8:	bf00      	nop
}
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr

0800a8c2 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a8c2:	b480      	push	{r7}
 800a8c4:	af00      	add	r7, sp, #0
  return;
 800a8c6:	bf00      	nop
}
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	af00      	add	r7, sp, #0
  return;
 800a8d4:	bf00      	nop
}
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr

0800a8de <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800a8de:	b480      	push	{r7}
 800a8e0:	af00      	add	r7, sp, #0
  return;
 800a8e2:	bf00      	nop
}
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	af00      	add	r7, sp, #0
  return;
 800a8f0:	bf00      	nop
}
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	af00      	add	r7, sp, #0
  return;
 800a8fe:	bf00      	nop
}
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a908:	b480      	push	{r7}
 800a90a:	af00      	add	r7, sp, #0
  return;
 800a90c:	bf00      	nop
}
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr

0800a916 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a916:	b480      	push	{r7}
 800a918:	af00      	add	r7, sp, #0
  return;
 800a91a:	bf00      	nop
}
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a928:	4b04      	ldr	r3, [pc, #16]	; (800a93c <SVCCTL_Init+0x18>)
 800a92a:	2200      	movs	r2, #0
 800a92c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a92e:	4b04      	ldr	r3, [pc, #16]	; (800a940 <SVCCTL_Init+0x1c>)
 800a930:	2200      	movs	r2, #0
 800a932:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a934:	f000 f806 	bl	800a944 <SVCCTL_SvcInit>

  return;
 800a938:	bf00      	nop
}
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	200001dc 	.word	0x200001dc
 800a940:	200001fc 	.word	0x200001fc

0800a944 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	af00      	add	r7, sp, #0
  BAS_Init();
 800a948:	f7ff ff75 	bl	800a836 <BAS_Init>

  BLS_Init();
 800a94c:	f7ff ff7a 	bl	800a844 <BLS_Init>

  CRS_STM_Init();
 800a950:	f7ff ff7f 	bl	800a852 <CRS_STM_Init>

  DIS_Init();
 800a954:	f7ff ff84 	bl	800a860 <DIS_Init>

  EDS_STM_Init();
 800a958:	f7ff ff89 	bl	800a86e <EDS_STM_Init>

  HIDS_Init();
 800a95c:	f7ff ff8e 	bl	800a87c <HIDS_Init>

  HRS_Init();
 800a960:	f7ff ff93 	bl	800a88a <HRS_Init>

  HTS_Init();
 800a964:	f7ff ff98 	bl	800a898 <HTS_Init>

  IAS_Init();
 800a968:	f7ff ff9d 	bl	800a8a6 <IAS_Init>

  LLS_Init();
 800a96c:	f7ff ffa2 	bl	800a8b4 <LLS_Init>

  TPS_Init();
 800a970:	f7ff ffa7 	bl	800a8c2 <TPS_Init>

  MOTENV_STM_Init();
 800a974:	f7ff ffac 	bl	800a8d0 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a978:	f7ff ffb1 	bl	800a8de <P2PS_STM_Init>

  ZDD_STM_Init();
 800a97c:	f7ff ffb6 	bl	800a8ec <ZDD_STM_Init>

  OTAS_STM_Init();
 800a980:	f7ff ffbb 	bl	800a8fa <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a984:	f7ff ffc7 	bl	800a916 <BVOPUS_STM_Init>

  MESH_Init();
 800a988:	f7ff ffbe 	bl	800a908 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a98c:	f7f8 fd2e 	bl	80033ec <SVCCTL_InitCustomSvc>
  
  return;
 800a990:	bf00      	nop
}
 800a992:	bd80      	pop	{r7, pc}

0800a994 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a99c:	4b09      	ldr	r3, [pc, #36]	; (800a9c4 <SVCCTL_RegisterSvcHandler+0x30>)
 800a99e:	7f1b      	ldrb	r3, [r3, #28]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	4a08      	ldr	r2, [pc, #32]	; (800a9c4 <SVCCTL_RegisterSvcHandler+0x30>)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a9aa:	4b06      	ldr	r3, [pc, #24]	; (800a9c4 <SVCCTL_RegisterSvcHandler+0x30>)
 800a9ac:	7f1b      	ldrb	r3, [r3, #28]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	4b04      	ldr	r3, [pc, #16]	; (800a9c4 <SVCCTL_RegisterSvcHandler+0x30>)
 800a9b4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a9b6:	bf00      	nop
}
 800a9b8:	370c      	adds	r7, #12
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	200001dc 	.word	0x200001dc

0800a9c8 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b086      	sub	sp, #24
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	2bff      	cmp	r3, #255	; 0xff
 800a9e0:	d125      	bne.n	800aa2e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	3302      	adds	r3, #2
 800a9e6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a9f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9f6:	d118      	bne.n	800aa2a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	757b      	strb	r3, [r7, #21]
 800a9fc:	e00d      	b.n	800aa1a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a9fe:	7d7b      	ldrb	r3, [r7, #21]
 800aa00:	4a1a      	ldr	r2, [pc, #104]	; (800aa6c <SVCCTL_UserEvtRx+0xa4>)
 800aa02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	4798      	blx	r3
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800aa0e:	7dfb      	ldrb	r3, [r7, #23]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d108      	bne.n	800aa26 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800aa14:	7d7b      	ldrb	r3, [r7, #21]
 800aa16:	3301      	adds	r3, #1
 800aa18:	757b      	strb	r3, [r7, #21]
 800aa1a:	4b14      	ldr	r3, [pc, #80]	; (800aa6c <SVCCTL_UserEvtRx+0xa4>)
 800aa1c:	7f1b      	ldrb	r3, [r3, #28]
 800aa1e:	7d7a      	ldrb	r2, [r7, #21]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d3ec      	bcc.n	800a9fe <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800aa24:	e002      	b.n	800aa2c <SVCCTL_UserEvtRx+0x64>
              break;
 800aa26:	bf00      	nop
          break;
 800aa28:	e000      	b.n	800aa2c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800aa2a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800aa2c:	e000      	b.n	800aa30 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800aa2e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800aa30:	7dfb      	ldrb	r3, [r7, #23]
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	d00f      	beq.n	800aa56 <SVCCTL_UserEvtRx+0x8e>
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	dc10      	bgt.n	800aa5c <SVCCTL_UserEvtRx+0x94>
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d002      	beq.n	800aa44 <SVCCTL_UserEvtRx+0x7c>
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d006      	beq.n	800aa50 <SVCCTL_UserEvtRx+0x88>
 800aa42:	e00b      	b.n	800aa5c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f7f7 feeb 	bl	8002820 <SVCCTL_App_Notification>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	75bb      	strb	r3, [r7, #22]
      break;
 800aa4e:	e008      	b.n	800aa62 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800aa50:	2301      	movs	r3, #1
 800aa52:	75bb      	strb	r3, [r7, #22]
      break;
 800aa54:	e005      	b.n	800aa62 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800aa56:	2300      	movs	r3, #0
 800aa58:	75bb      	strb	r3, [r7, #22]
      break;
 800aa5a:	e002      	b.n	800aa62 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	75bb      	strb	r3, [r7, #22]
      break;
 800aa60:	bf00      	nop
  }

  return (return_status);
 800aa62:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3718      	adds	r7, #24
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	200001dc 	.word	0x200001dc

0800aa70 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800aa74:	f7f8 ff96 	bl	80039a4 <HW_IPCC_Enable>

  return;
 800aa78:	bf00      	nop
}
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <TL_Init>:


void TL_Init( void )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800aa80:	4b10      	ldr	r3, [pc, #64]	; (800aac4 <TL_Init+0x48>)
 800aa82:	4a11      	ldr	r2, [pc, #68]	; (800aac8 <TL_Init+0x4c>)
 800aa84:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800aa86:	4b0f      	ldr	r3, [pc, #60]	; (800aac4 <TL_Init+0x48>)
 800aa88:	4a10      	ldr	r2, [pc, #64]	; (800aacc <TL_Init+0x50>)
 800aa8a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800aa8c:	4b0d      	ldr	r3, [pc, #52]	; (800aac4 <TL_Init+0x48>)
 800aa8e:	4a10      	ldr	r2, [pc, #64]	; (800aad0 <TL_Init+0x54>)
 800aa90:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800aa92:	4b0c      	ldr	r3, [pc, #48]	; (800aac4 <TL_Init+0x48>)
 800aa94:	4a0f      	ldr	r2, [pc, #60]	; (800aad4 <TL_Init+0x58>)
 800aa96:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800aa98:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <TL_Init+0x48>)
 800aa9a:	4a0f      	ldr	r2, [pc, #60]	; (800aad8 <TL_Init+0x5c>)
 800aa9c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800aa9e:	4b09      	ldr	r3, [pc, #36]	; (800aac4 <TL_Init+0x48>)
 800aaa0:	4a0e      	ldr	r2, [pc, #56]	; (800aadc <TL_Init+0x60>)
 800aaa2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800aaa4:	4b07      	ldr	r3, [pc, #28]	; (800aac4 <TL_Init+0x48>)
 800aaa6:	4a0e      	ldr	r2, [pc, #56]	; (800aae0 <TL_Init+0x64>)
 800aaa8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800aaaa:	4b06      	ldr	r3, [pc, #24]	; (800aac4 <TL_Init+0x48>)
 800aaac:	4a0d      	ldr	r2, [pc, #52]	; (800aae4 <TL_Init+0x68>)
 800aaae:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800aab0:	4b04      	ldr	r3, [pc, #16]	; (800aac4 <TL_Init+0x48>)
 800aab2:	4a0d      	ldr	r2, [pc, #52]	; (800aae8 <TL_Init+0x6c>)
 800aab4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800aab6:	4b03      	ldr	r3, [pc, #12]	; (800aac4 <TL_Init+0x48>)
 800aab8:	4a0c      	ldr	r2, [pc, #48]	; (800aaec <TL_Init+0x70>)
 800aaba:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800aabc:	f7f8 ff86 	bl	80039cc <HW_IPCC_Init>

  return;
 800aac0:	bf00      	nop
}
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	20030000 	.word	0x20030000
 800aac8:	20030134 	.word	0x20030134
 800aacc:	20030154 	.word	0x20030154
 800aad0:	20030164 	.word	0x20030164
 800aad4:	20030170 	.word	0x20030170
 800aad8:	20030178 	.word	0x20030178
 800aadc:	20030180 	.word	0x20030180
 800aae0:	20030188 	.word	0x20030188
 800aae4:	200301a4 	.word	0x200301a4
 800aae8:	200301a8 	.word	0x200301a8
 800aaec:	200301b4 	.word	0x200301b4

0800aaf0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800aafc:	4811      	ldr	r0, [pc, #68]	; (800ab44 <TL_BLE_Init+0x54>)
 800aafe:	f7ff f9db 	bl	8009eb8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800ab02:	4b11      	ldr	r3, [pc, #68]	; (800ab48 <TL_BLE_Init+0x58>)
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	689a      	ldr	r2, [r3, #8]
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	68da      	ldr	r2, [r3, #12]
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	4a0c      	ldr	r2, [pc, #48]	; (800ab4c <TL_BLE_Init+0x5c>)
 800ab1c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	4a08      	ldr	r2, [pc, #32]	; (800ab44 <TL_BLE_Init+0x54>)
 800ab22:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800ab24:	f7f8 ff68 	bl	80039f8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a08      	ldr	r2, [pc, #32]	; (800ab50 <TL_BLE_Init+0x60>)
 800ab2e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	4a07      	ldr	r2, [pc, #28]	; (800ab54 <TL_BLE_Init+0x64>)
 800ab36:	6013      	str	r3, [r2, #0]

  return 0;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	200301d0 	.word	0x200301d0
 800ab48:	20030000 	.word	0x20030000
 800ab4c:	20030a48 	.word	0x20030a48
 800ab50:	2000171c 	.word	0x2000171c
 800ab54:	20001720 	.word	0x20001720

0800ab58 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	460b      	mov	r3, r1
 800ab62:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800ab64:	4b09      	ldr	r3, [pc, #36]	; (800ab8c <TL_BLE_SendCmd+0x34>)
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800ab6e:	4b07      	ldr	r3, [pc, #28]	; (800ab8c <TL_BLE_SendCmd+0x34>)
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4619      	mov	r1, r3
 800ab76:	2001      	movs	r0, #1
 800ab78:	f000 f96c 	bl	800ae54 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800ab7c:	f7f8 ff46 	bl	8003a0c <HW_IPCC_BLE_SendCmd>

  return 0;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	20030000 	.word	0x20030000

0800ab90 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800ab96:	e01c      	b.n	800abd2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800ab98:	1d3b      	adds	r3, r7, #4
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	4812      	ldr	r0, [pc, #72]	; (800abe8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ab9e:	f7ff fa2a 	bl	8009ff6 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	7a5b      	ldrb	r3, [r3, #9]
 800aba6:	2b0f      	cmp	r3, #15
 800aba8:	d003      	beq.n	800abb2 <HW_IPCC_BLE_RxEvtNot+0x22>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	7a5b      	ldrb	r3, [r3, #9]
 800abae:	2b0e      	cmp	r3, #14
 800abb0:	d105      	bne.n	800abbe <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4619      	mov	r1, r3
 800abb6:	2002      	movs	r0, #2
 800abb8:	f000 f94c 	bl	800ae54 <OutputDbgTrace>
 800abbc:	e004      	b.n	800abc8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4619      	mov	r1, r3
 800abc2:	2003      	movs	r0, #3
 800abc4:	f000 f946 	bl	800ae54 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800abc8:	4b08      	ldr	r3, [pc, #32]	; (800abec <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	4610      	mov	r0, r2
 800abd0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800abd2:	4805      	ldr	r0, [pc, #20]	; (800abe8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800abd4:	f7ff f980 	bl	8009ed8 <LST_is_empty>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d0dc      	beq.n	800ab98 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800abde:	bf00      	nop
}
 800abe0:	3708      	adds	r7, #8
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	200301d0 	.word	0x200301d0
 800abec:	2000171c 	.word	0x2000171c

0800abf0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800abf4:	4b02      	ldr	r3, [pc, #8]	; (800ac00 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4798      	blx	r3

  return;
 800abfa:	bf00      	nop
}
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	20001720 	.word	0x20001720

0800ac04 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ac10:	480d      	ldr	r0, [pc, #52]	; (800ac48 <TL_SYS_Init+0x44>)
 800ac12:	f7ff f951 	bl	8009eb8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ac16:	4b0d      	ldr	r3, [pc, #52]	; (800ac4c <TL_SYS_Init+0x48>)
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	689a      	ldr	r2, [r3, #8]
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	4a08      	ldr	r2, [pc, #32]	; (800ac48 <TL_SYS_Init+0x44>)
 800ac28:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ac2a:	f7f8 ff11 	bl	8003a50 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a07      	ldr	r2, [pc, #28]	; (800ac50 <TL_SYS_Init+0x4c>)
 800ac34:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	4a06      	ldr	r2, [pc, #24]	; (800ac54 <TL_SYS_Init+0x50>)
 800ac3c:	6013      	str	r3, [r2, #0]

  return 0;
 800ac3e:	2300      	movs	r3, #0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	200301d8 	.word	0x200301d8
 800ac4c:	20030000 	.word	0x20030000
 800ac50:	20001724 	.word	0x20001724
 800ac54:	20001728 	.word	0x20001728

0800ac58 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	460b      	mov	r3, r1
 800ac62:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ac64:	4b09      	ldr	r3, [pc, #36]	; (800ac8c <TL_SYS_SendCmd+0x34>)
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2210      	movs	r2, #16
 800ac6c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800ac6e:	4b07      	ldr	r3, [pc, #28]	; (800ac8c <TL_SYS_SendCmd+0x34>)
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4619      	mov	r1, r3
 800ac76:	2004      	movs	r0, #4
 800ac78:	f000 f8ec 	bl	800ae54 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800ac7c:	f7f8 fef2 	bl	8003a64 <HW_IPCC_SYS_SendCmd>

  return 0;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3708      	adds	r7, #8
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	20030000 	.word	0x20030000

0800ac90 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ac94:	4b07      	ldr	r3, [pc, #28]	; (800acb4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	2005      	movs	r0, #5
 800ac9e:	f000 f8d9 	bl	800ae54 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800aca2:	4b05      	ldr	r3, [pc, #20]	; (800acb8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a03      	ldr	r2, [pc, #12]	; (800acb4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800aca8:	68d2      	ldr	r2, [r2, #12]
 800acaa:	6812      	ldr	r2, [r2, #0]
 800acac:	4610      	mov	r0, r2
 800acae:	4798      	blx	r3

  return;
 800acb0:	bf00      	nop
}
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	20030000 	.word	0x20030000
 800acb8:	20001724 	.word	0x20001724

0800acbc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800acc2:	e00e      	b.n	800ace2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800acc4:	1d3b      	adds	r3, r7, #4
 800acc6:	4619      	mov	r1, r3
 800acc8:	480b      	ldr	r0, [pc, #44]	; (800acf8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800acca:	f7ff f994 	bl	8009ff6 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4619      	mov	r1, r3
 800acd2:	2006      	movs	r0, #6
 800acd4:	f000 f8be 	bl	800ae54 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800acd8:	4b08      	ldr	r3, [pc, #32]	; (800acfc <HW_IPCC_SYS_EvtNot+0x40>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	4610      	mov	r0, r2
 800ace0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ace2:	4805      	ldr	r0, [pc, #20]	; (800acf8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ace4:	f7ff f8f8 	bl	8009ed8 <LST_is_empty>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d0ea      	beq.n	800acc4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800acee:	bf00      	nop
}
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	200301d8 	.word	0x200301d8
 800acfc:	20001728 	.word	0x20001728

0800ad00 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ad08:	4817      	ldr	r0, [pc, #92]	; (800ad68 <TL_MM_Init+0x68>)
 800ad0a:	f7ff f8d5 	bl	8009eb8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ad0e:	4817      	ldr	r0, [pc, #92]	; (800ad6c <TL_MM_Init+0x6c>)
 800ad10:	f7ff f8d2 	bl	8009eb8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ad14:	4b16      	ldr	r3, [pc, #88]	; (800ad70 <TL_MM_Init+0x70>)
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	4a16      	ldr	r2, [pc, #88]	; (800ad74 <TL_MM_Init+0x74>)
 800ad1a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ad1c:	4b15      	ldr	r3, [pc, #84]	; (800ad74 <TL_MM_Init+0x74>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	6892      	ldr	r2, [r2, #8]
 800ad24:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ad26:	4b13      	ldr	r3, [pc, #76]	; (800ad74 <TL_MM_Init+0x74>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	68d2      	ldr	r2, [r2, #12]
 800ad2e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800ad30:	4b10      	ldr	r3, [pc, #64]	; (800ad74 <TL_MM_Init+0x74>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a0c      	ldr	r2, [pc, #48]	; (800ad68 <TL_MM_Init+0x68>)
 800ad36:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800ad38:	4b0e      	ldr	r3, [pc, #56]	; (800ad74 <TL_MM_Init+0x74>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	6812      	ldr	r2, [r2, #0]
 800ad40:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ad42:	4b0c      	ldr	r3, [pc, #48]	; (800ad74 <TL_MM_Init+0x74>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	6852      	ldr	r2, [r2, #4]
 800ad4a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ad4c:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <TL_MM_Init+0x74>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	6912      	ldr	r2, [r2, #16]
 800ad54:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ad56:	4b07      	ldr	r3, [pc, #28]	; (800ad74 <TL_MM_Init+0x74>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	6952      	ldr	r2, [r2, #20]
 800ad5e:	619a      	str	r2, [r3, #24]

  return;
 800ad60:	bf00      	nop
}
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	200301c0 	.word	0x200301c0
 800ad6c:	20001714 	.word	0x20001714
 800ad70:	20030000 	.word	0x20030000
 800ad74:	2000172c 	.word	0x2000172c

0800ad78 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800ad80:	6879      	ldr	r1, [r7, #4]
 800ad82:	4807      	ldr	r0, [pc, #28]	; (800ada0 <TL_MM_EvtDone+0x28>)
 800ad84:	f7ff f8f0 	bl	8009f68 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800ad88:	6879      	ldr	r1, [r7, #4]
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	f000 f862 	bl	800ae54 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800ad90:	4804      	ldr	r0, [pc, #16]	; (800ada4 <TL_MM_EvtDone+0x2c>)
 800ad92:	f7f8 fe8d 	bl	8003ab0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800ad96:	bf00      	nop
}
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	20001714 	.word	0x20001714
 800ada4:	0800ada9 	.word	0x0800ada9

0800ada8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800adae:	e00c      	b.n	800adca <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800adb0:	1d3b      	adds	r3, r7, #4
 800adb2:	4619      	mov	r1, r3
 800adb4:	480a      	ldr	r0, [pc, #40]	; (800ade0 <SendFreeBuf+0x38>)
 800adb6:	f7ff f91e 	bl	8009ff6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800adba:	4b0a      	ldr	r3, [pc, #40]	; (800ade4 <SendFreeBuf+0x3c>)
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	4611      	mov	r1, r2
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7ff f8cf 	bl	8009f68 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800adca:	4805      	ldr	r0, [pc, #20]	; (800ade0 <SendFreeBuf+0x38>)
 800adcc:	f7ff f884 	bl	8009ed8 <LST_is_empty>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d0ec      	beq.n	800adb0 <SendFreeBuf+0x8>
  }

  return;
 800add6:	bf00      	nop
}
 800add8:	3708      	adds	r7, #8
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	20001714 	.word	0x20001714
 800ade4:	20030000 	.word	0x20030000

0800ade8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800adec:	4805      	ldr	r0, [pc, #20]	; (800ae04 <TL_TRACES_Init+0x1c>)
 800adee:	f7ff f863 	bl	8009eb8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800adf2:	4b05      	ldr	r3, [pc, #20]	; (800ae08 <TL_TRACES_Init+0x20>)
 800adf4:	695b      	ldr	r3, [r3, #20]
 800adf6:	4a03      	ldr	r2, [pc, #12]	; (800ae04 <TL_TRACES_Init+0x1c>)
 800adf8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800adfa:	f7f8 fe8f 	bl	8003b1c <HW_IPCC_TRACES_Init>

  return;
 800adfe:	bf00      	nop
}
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	200301c8 	.word	0x200301c8
 800ae08:	20030000 	.word	0x20030000

0800ae0c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ae12:	e008      	b.n	800ae26 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800ae14:	1d3b      	adds	r3, r7, #4
 800ae16:	4619      	mov	r1, r3
 800ae18:	4808      	ldr	r0, [pc, #32]	; (800ae3c <HW_IPCC_TRACES_EvtNot+0x30>)
 800ae1a:	f7ff f8ec 	bl	8009ff6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 f80d 	bl	800ae40 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ae26:	4805      	ldr	r0, [pc, #20]	; (800ae3c <HW_IPCC_TRACES_EvtNot+0x30>)
 800ae28:	f7ff f856 	bl	8009ed8 <LST_is_empty>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d0f0      	beq.n	800ae14 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800ae32:	bf00      	nop
}
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	200301c8 	.word	0x200301c8

0800ae40 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	6039      	str	r1, [r7, #0]
 800ae5e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ae60:	79fb      	ldrb	r3, [r7, #7]
 800ae62:	2b06      	cmp	r3, #6
 800ae64:	d845      	bhi.n	800aef2 <OutputDbgTrace+0x9e>
 800ae66:	a201      	add	r2, pc, #4	; (adr r2, 800ae6c <OutputDbgTrace+0x18>)
 800ae68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae6c:	0800ae89 	.word	0x0800ae89
 800ae70:	0800aead 	.word	0x0800aead
 800ae74:	0800aeb3 	.word	0x0800aeb3
 800ae78:	0800aec7 	.word	0x0800aec7
 800ae7c:	0800aed3 	.word	0x0800aed3
 800ae80:	0800aed9 	.word	0x0800aed9
 800ae84:	0800aee7 	.word	0x0800aee7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	7a5b      	ldrb	r3, [r3, #9]
 800ae90:	2bff      	cmp	r3, #255	; 0xff
 800ae92:	d005      	beq.n	800aea0 <OutputDbgTrace+0x4c>
 800ae94:	2bff      	cmp	r3, #255	; 0xff
 800ae96:	dc05      	bgt.n	800aea4 <OutputDbgTrace+0x50>
 800ae98:	2b0e      	cmp	r3, #14
 800ae9a:	d005      	beq.n	800aea8 <OutputDbgTrace+0x54>
 800ae9c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ae9e:	e001      	b.n	800aea4 <OutputDbgTrace+0x50>
          break;
 800aea0:	bf00      	nop
 800aea2:	e027      	b.n	800aef4 <OutputDbgTrace+0xa0>
          break;
 800aea4:	bf00      	nop
 800aea6:	e025      	b.n	800aef4 <OutputDbgTrace+0xa0>
          break;
 800aea8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800aeaa:	e023      	b.n	800aef4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800aeb0:	e020      	b.n	800aef4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	7a5b      	ldrb	r3, [r3, #9]
 800aeba:	2b0e      	cmp	r3, #14
 800aebc:	d001      	beq.n	800aec2 <OutputDbgTrace+0x6e>
 800aebe:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800aec0:	e000      	b.n	800aec4 <OutputDbgTrace+0x70>
          break;
 800aec2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800aec4:	e016      	b.n	800aef4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	7a5b      	ldrb	r3, [r3, #9]
 800aece:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800aed0:	e010      	b.n	800aef4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800aed6:	e00d      	b.n	800aef4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	7a5b      	ldrb	r3, [r3, #9]
 800aee0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800aee2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800aee4:	e006      	b.n	800aef4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	7a5b      	ldrb	r3, [r3, #9]
 800aeee:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800aef0:	e000      	b.n	800aef4 <OutputDbgTrace+0xa0>

    default:
      break;
 800aef2:	bf00      	nop
  }

  return;
 800aef4:	bf00      	nop
}
 800aef6:	3714      	adds	r7, #20
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800af00:	b480      	push	{r7}
 800af02:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800af04:	4b05      	ldr	r3, [pc, #20]	; (800af1c <UTIL_LPM_Init+0x1c>)
 800af06:	2200      	movs	r2, #0
 800af08:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800af0a:	4b05      	ldr	r3, [pc, #20]	; (800af20 <UTIL_LPM_Init+0x20>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800af10:	bf00      	nop
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	20001730 	.word	0x20001730
 800af20:	20001734 	.word	0x20001734

0800af24 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800af24:	b480      	push	{r7}
 800af26:	b087      	sub	sp, #28
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	460b      	mov	r3, r1
 800af2e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af30:	f3ef 8310 	mrs	r3, PRIMASK
 800af34:	613b      	str	r3, [r7, #16]
  return(result);
 800af36:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800af38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af3a:	b672      	cpsid	i
}
 800af3c:	bf00      	nop
  
  switch(state)
 800af3e:	78fb      	ldrb	r3, [r7, #3]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d008      	beq.n	800af56 <UTIL_LPM_SetOffMode+0x32>
 800af44:	2b01      	cmp	r3, #1
 800af46:	d10e      	bne.n	800af66 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800af48:	4b0d      	ldr	r3, [pc, #52]	; (800af80 <UTIL_LPM_SetOffMode+0x5c>)
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4313      	orrs	r3, r2
 800af50:	4a0b      	ldr	r2, [pc, #44]	; (800af80 <UTIL_LPM_SetOffMode+0x5c>)
 800af52:	6013      	str	r3, [r2, #0]
      break;
 800af54:	e008      	b.n	800af68 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	43da      	mvns	r2, r3
 800af5a:	4b09      	ldr	r3, [pc, #36]	; (800af80 <UTIL_LPM_SetOffMode+0x5c>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4013      	ands	r3, r2
 800af60:	4a07      	ldr	r2, [pc, #28]	; (800af80 <UTIL_LPM_SetOffMode+0x5c>)
 800af62:	6013      	str	r3, [r2, #0]
      break;
 800af64:	e000      	b.n	800af68 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800af66:	bf00      	nop
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f383 8810 	msr	PRIMASK, r3
}
 800af72:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800af74:	bf00      	nop
 800af76:	371c      	adds	r7, #28
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	20001734 	.word	0x20001734

0800af84 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b08c      	sub	sp, #48	; 0x30
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800af8c:	4b6a      	ldr	r3, [pc, #424]	; (800b138 <UTIL_SEQ_Run+0x1b4>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 800af92:	4b69      	ldr	r3, [pc, #420]	; (800b138 <UTIL_SEQ_Run+0x1b4>)
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4013      	ands	r3, r2
 800af9a:	4a67      	ldr	r2, [pc, #412]	; (800b138 <UTIL_SEQ_Run+0x1b4>)
 800af9c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800af9e:	4b67      	ldr	r3, [pc, #412]	; (800b13c <UTIL_SEQ_Run+0x1b8>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800afa4:	e086      	b.n	800b0b4 <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 800afa6:	2300      	movs	r3, #0
 800afa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800afaa:	e002      	b.n	800afb2 <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 800afac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afae:	3301      	adds	r3, #1
 800afb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800afb2:	4a63      	ldr	r2, [pc, #396]	; (800b140 <UTIL_SEQ_Run+0x1bc>)
 800afb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800afba:	4b62      	ldr	r3, [pc, #392]	; (800b144 <UTIL_SEQ_Run+0x1c0>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	401a      	ands	r2, r3
 800afc0:	4b5d      	ldr	r3, [pc, #372]	; (800b138 <UTIL_SEQ_Run+0x1b4>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4013      	ands	r3, r2
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d0f0      	beq.n	800afac <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800afca:	4a5d      	ldr	r2, [pc, #372]	; (800b140 <UTIL_SEQ_Run+0x1bc>)
 800afcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800afd2:	4b5c      	ldr	r3, [pc, #368]	; (800b144 <UTIL_SEQ_Run+0x1c0>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	401a      	ands	r2, r3
 800afd8:	4b57      	ldr	r3, [pc, #348]	; (800b138 <UTIL_SEQ_Run+0x1b4>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4013      	ands	r3, r2
 800afde:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800afe0:	4a57      	ldr	r2, [pc, #348]	; (800b140 <UTIL_SEQ_Run+0x1bc>)
 800afe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe4:	00db      	lsls	r3, r3, #3
 800afe6:	4413      	add	r3, r2
 800afe8:	685a      	ldr	r2, [r3, #4]
 800afea:	6a3b      	ldr	r3, [r7, #32]
 800afec:	4013      	ands	r3, r2
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d106      	bne.n	800b000 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800aff2:	4a53      	ldr	r2, [pc, #332]	; (800b140 <UTIL_SEQ_Run+0x1bc>)
 800aff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff6:	00db      	lsls	r3, r3, #3
 800aff8:	4413      	add	r3, r2
 800affa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800affe:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b000:	4a4f      	ldr	r2, [pc, #316]	; (800b140 <UTIL_SEQ_Run+0x1bc>)
 800b002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b004:	00db      	lsls	r3, r3, #3
 800b006:	4413      	add	r3, r2
 800b008:	685a      	ldr	r2, [r3, #4]
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	4013      	ands	r3, r2
 800b00e:	4618      	mov	r0, r3
 800b010:	f000 f9ac 	bl	800b36c <SEQ_BitPosition>
 800b014:	4603      	mov	r3, r0
 800b016:	461a      	mov	r2, r3
 800b018:	4b4b      	ldr	r3, [pc, #300]	; (800b148 <UTIL_SEQ_Run+0x1c4>)
 800b01a:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b01c:	4a48      	ldr	r2, [pc, #288]	; (800b140 <UTIL_SEQ_Run+0x1bc>)
 800b01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b020:	00db      	lsls	r3, r3, #3
 800b022:	4413      	add	r3, r2
 800b024:	685a      	ldr	r2, [r3, #4]
 800b026:	4b48      	ldr	r3, [pc, #288]	; (800b148 <UTIL_SEQ_Run+0x1c4>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2101      	movs	r1, #1
 800b02c:	fa01 f303 	lsl.w	r3, r1, r3
 800b030:	43db      	mvns	r3, r3
 800b032:	401a      	ands	r2, r3
 800b034:	4942      	ldr	r1, [pc, #264]	; (800b140 <UTIL_SEQ_Run+0x1bc>)
 800b036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b038:	00db      	lsls	r3, r3, #3
 800b03a:	440b      	add	r3, r1
 800b03c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b03e:	f3ef 8310 	mrs	r3, PRIMASK
 800b042:	617b      	str	r3, [r7, #20]
  return(result);
 800b044:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b046:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b048:	b672      	cpsid	i
}
 800b04a:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b04c:	4b3e      	ldr	r3, [pc, #248]	; (800b148 <UTIL_SEQ_Run+0x1c4>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2201      	movs	r2, #1
 800b052:	fa02 f303 	lsl.w	r3, r2, r3
 800b056:	43da      	mvns	r2, r3
 800b058:	4b38      	ldr	r3, [pc, #224]	; (800b13c <UTIL_SEQ_Run+0x1b8>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4013      	ands	r3, r2
 800b05e:	4a37      	ldr	r2, [pc, #220]	; (800b13c <UTIL_SEQ_Run+0x1b8>)
 800b060:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b062:	2302      	movs	r3, #2
 800b064:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b066:	e013      	b.n	800b090 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b06a:	3b01      	subs	r3, #1
 800b06c:	4a34      	ldr	r2, [pc, #208]	; (800b140 <UTIL_SEQ_Run+0x1bc>)
 800b06e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b072:	4b35      	ldr	r3, [pc, #212]	; (800b148 <UTIL_SEQ_Run+0x1c4>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2201      	movs	r2, #1
 800b078:	fa02 f303 	lsl.w	r3, r2, r3
 800b07c:	43da      	mvns	r2, r3
 800b07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b080:	3b01      	subs	r3, #1
 800b082:	400a      	ands	r2, r1
 800b084:	492e      	ldr	r1, [pc, #184]	; (800b140 <UTIL_SEQ_Run+0x1bc>)
 800b086:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08c:	3b01      	subs	r3, #1
 800b08e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1e8      	bne.n	800b068 <UTIL_SEQ_Run+0xe4>
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f383 8810 	msr	PRIMASK, r3
}
 800b0a0:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b0a2:	4b29      	ldr	r3, [pc, #164]	; (800b148 <UTIL_SEQ_Run+0x1c4>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a29      	ldr	r2, [pc, #164]	; (800b14c <UTIL_SEQ_Run+0x1c8>)
 800b0a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0ac:	4798      	blx	r3
    
    local_taskset = TaskSet;
 800b0ae:	4b23      	ldr	r3, [pc, #140]	; (800b13c <UTIL_SEQ_Run+0x1b8>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800b0b4:	4b23      	ldr	r3, [pc, #140]	; (800b144 <UTIL_SEQ_Run+0x1c0>)
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ba:	401a      	ands	r2, r3
 800b0bc:	4b1e      	ldr	r3, [pc, #120]	; (800b138 <UTIL_SEQ_Run+0x1b4>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d007      	beq.n	800b0d6 <UTIL_SEQ_Run+0x152>
 800b0c6:	4b22      	ldr	r3, [pc, #136]	; (800b150 <UTIL_SEQ_Run+0x1cc>)
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	4b22      	ldr	r3, [pc, #136]	; (800b154 <UTIL_SEQ_Run+0x1d0>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4013      	ands	r3, r2
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f43f af68 	beq.w	800afa6 <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b0d6:	4b1c      	ldr	r3, [pc, #112]	; (800b148 <UTIL_SEQ_Run+0x1c4>)
 800b0d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0dc:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b0de:	f000 f937 	bl	800b350 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0e2:	f3ef 8310 	mrs	r3, PRIMASK
 800b0e6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b0ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b0ec:	b672      	cpsid	i
}
 800b0ee:	bf00      	nop
  local_taskset = TaskSet;
 800b0f0:	4b12      	ldr	r3, [pc, #72]	; (800b13c <UTIL_SEQ_Run+0x1b8>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800b0f6:	4b13      	ldr	r3, [pc, #76]	; (800b144 <UTIL_SEQ_Run+0x1c0>)
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fc:	401a      	ands	r2, r3
 800b0fe:	4b0e      	ldr	r3, [pc, #56]	; (800b138 <UTIL_SEQ_Run+0x1b4>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4013      	ands	r3, r2
 800b104:	2b00      	cmp	r3, #0
 800b106:	d108      	bne.n	800b11a <UTIL_SEQ_Run+0x196>
 800b108:	4b11      	ldr	r3, [pc, #68]	; (800b150 <UTIL_SEQ_Run+0x1cc>)
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	4b11      	ldr	r3, [pc, #68]	; (800b154 <UTIL_SEQ_Run+0x1d0>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4013      	ands	r3, r2
 800b112:	2b00      	cmp	r3, #0
 800b114:	d101      	bne.n	800b11a <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 800b116:	f7f5 ff4b 	bl	8000fb0 <UTIL_SEQ_Idle>
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	f383 8810 	msr	PRIMASK, r3
}
 800b124:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800b126:	f000 f91a 	bl	800b35e <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b12a:	4a03      	ldr	r2, [pc, #12]	; (800b138 <UTIL_SEQ_Run+0x1b4>)
 800b12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12e:	6013      	str	r3, [r2, #0]

  return;
 800b130:	bf00      	nop
}
 800b132:	3730      	adds	r7, #48	; 0x30
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	2000002c 	.word	0x2000002c
 800b13c:	20001738 	.word	0x20001738
 800b140:	200017c8 	.word	0x200017c8
 800b144:	20000028 	.word	0x20000028
 800b148:	20001744 	.word	0x20001744
 800b14c:	20001748 	.word	0x20001748
 800b150:	2000173c 	.word	0x2000173c
 800b154:	20001740 	.word	0x20001740

0800b158 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b088      	sub	sp, #32
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b164:	f3ef 8310 	mrs	r3, PRIMASK
 800b168:	617b      	str	r3, [r7, #20]
  return(result);
 800b16a:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b16c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b16e:	b672      	cpsid	i
}
 800b170:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	f000 f8fa 	bl	800b36c <SEQ_BitPosition>
 800b178:	4603      	mov	r3, r0
 800b17a:	4619      	mov	r1, r3
 800b17c:	4a06      	ldr	r2, [pc, #24]	; (800b198 <UTIL_SEQ_RegTask+0x40>)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	f383 8810 	msr	PRIMASK, r3
}
 800b18e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b190:	bf00      	nop
}
 800b192:	3720      	adds	r7, #32
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	20001748 	.word	0x20001748

0800b19c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b19c:	b480      	push	{r7}
 800b19e:	b087      	sub	sp, #28
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1a6:	f3ef 8310 	mrs	r3, PRIMASK
 800b1aa:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b1ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1b0:	b672      	cpsid	i
}
 800b1b2:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b1b4:	4b0d      	ldr	r3, [pc, #52]	; (800b1ec <UTIL_SEQ_SetTask+0x50>)
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	4a0b      	ldr	r2, [pc, #44]	; (800b1ec <UTIL_SEQ_SetTask+0x50>)
 800b1be:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b1c0:	4a0b      	ldr	r2, [pc, #44]	; (800b1f0 <UTIL_SEQ_SetTask+0x54>)
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	431a      	orrs	r2, r3
 800b1cc:	4908      	ldr	r1, [pc, #32]	; (800b1f0 <UTIL_SEQ_SetTask+0x54>)
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	f383 8810 	msr	PRIMASK, r3
}
 800b1de:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b1e0:	bf00      	nop
}
 800b1e2:	371c      	adds	r7, #28
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr
 800b1ec:	20001738 	.word	0x20001738
 800b1f0:	200017c8 	.word	0x200017c8

0800b1f4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b087      	sub	sp, #28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1fc:	f3ef 8310 	mrs	r3, PRIMASK
 800b200:	60fb      	str	r3, [r7, #12]
  return(result);
 800b202:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b204:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b206:	b672      	cpsid	i
}
 800b208:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	43da      	mvns	r2, r3
 800b20e:	4b08      	ldr	r3, [pc, #32]	; (800b230 <UTIL_SEQ_PauseTask+0x3c>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4013      	ands	r3, r2
 800b214:	4a06      	ldr	r2, [pc, #24]	; (800b230 <UTIL_SEQ_PauseTask+0x3c>)
 800b216:	6013      	str	r3, [r2, #0]
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	f383 8810 	msr	PRIMASK, r3
}
 800b222:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b224:	bf00      	nop
}
 800b226:	371c      	adds	r7, #28
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	20000028 	.word	0x20000028

0800b234 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b234:	b480      	push	{r7}
 800b236:	b087      	sub	sp, #28
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b23c:	f3ef 8310 	mrs	r3, PRIMASK
 800b240:	60fb      	str	r3, [r7, #12]
  return(result);
 800b242:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b244:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b246:	b672      	cpsid	i
}
 800b248:	bf00      	nop

  TaskMask |= TaskId_bm;
 800b24a:	4b09      	ldr	r3, [pc, #36]	; (800b270 <UTIL_SEQ_ResumeTask+0x3c>)
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4313      	orrs	r3, r2
 800b252:	4a07      	ldr	r2, [pc, #28]	; (800b270 <UTIL_SEQ_ResumeTask+0x3c>)
 800b254:	6013      	str	r3, [r2, #0]
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	f383 8810 	msr	PRIMASK, r3
}
 800b260:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b262:	bf00      	nop
}
 800b264:	371c      	adds	r7, #28
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	20000028 	.word	0x20000028

0800b274 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800b274:	b480      	push	{r7}
 800b276:	b087      	sub	sp, #28
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b27c:	f3ef 8310 	mrs	r3, PRIMASK
 800b280:	60fb      	str	r3, [r7, #12]
  return(result);
 800b282:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b284:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b286:	b672      	cpsid	i
}
 800b288:	bf00      	nop

  EvtSet |= EvtId_bm;
 800b28a:	4b09      	ldr	r3, [pc, #36]	; (800b2b0 <UTIL_SEQ_SetEvt+0x3c>)
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4313      	orrs	r3, r2
 800b292:	4a07      	ldr	r2, [pc, #28]	; (800b2b0 <UTIL_SEQ_SetEvt+0x3c>)
 800b294:	6013      	str	r3, [r2, #0]
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	f383 8810 	msr	PRIMASK, r3
}
 800b2a0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b2a2:	bf00      	nop
}
 800b2a4:	371c      	adds	r7, #28
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	2000173c 	.word	0x2000173c

0800b2b4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b088      	sub	sp, #32
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800b2bc:	4b21      	ldr	r3, [pc, #132]	; (800b344 <UTIL_SEQ_WaitEvt+0x90>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800b2c2:	4b20      	ldr	r3, [pc, #128]	; (800b344 <UTIL_SEQ_WaitEvt+0x90>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2ca:	d102      	bne.n	800b2d2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	61fb      	str	r3, [r7, #28]
 800b2d0:	e005      	b.n	800b2de <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800b2d2:	4b1c      	ldr	r3, [pc, #112]	; (800b344 <UTIL_SEQ_WaitEvt+0x90>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2dc:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800b2de:	4b1a      	ldr	r3, [pc, #104]	; (800b348 <UTIL_SEQ_WaitEvt+0x94>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800b2e4:	4a18      	ldr	r2, [pc, #96]	; (800b348 <UTIL_SEQ_WaitEvt+0x94>)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800b2ea:	e005      	b.n	800b2f8 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800b2ec:	4b16      	ldr	r3, [pc, #88]	; (800b348 <UTIL_SEQ_WaitEvt+0x94>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	69f8      	ldr	r0, [r7, #28]
 800b2f4:	f7f5 fe63 	bl	8000fbe <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800b2f8:	4b14      	ldr	r3, [pc, #80]	; (800b34c <UTIL_SEQ_WaitEvt+0x98>)
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	4b12      	ldr	r3, [pc, #72]	; (800b348 <UTIL_SEQ_WaitEvt+0x94>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4013      	ands	r3, r2
 800b302:	2b00      	cmp	r3, #0
 800b304:	d0f2      	beq.n	800b2ec <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800b306:	4a0f      	ldr	r2, [pc, #60]	; (800b344 <UTIL_SEQ_WaitEvt+0x90>)
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b30c:	f3ef 8310 	mrs	r3, PRIMASK
 800b310:	60bb      	str	r3, [r7, #8]
  return(result);
 800b312:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b314:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b316:	b672      	cpsid	i
}
 800b318:	bf00      	nop

  EvtSet &= (~EvtWaited);
 800b31a:	4b0b      	ldr	r3, [pc, #44]	; (800b348 <UTIL_SEQ_WaitEvt+0x94>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	43da      	mvns	r2, r3
 800b320:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <UTIL_SEQ_WaitEvt+0x98>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4013      	ands	r3, r2
 800b326:	4a09      	ldr	r2, [pc, #36]	; (800b34c <UTIL_SEQ_WaitEvt+0x98>)
 800b328:	6013      	str	r3, [r2, #0]
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f383 8810 	msr	PRIMASK, r3
}
 800b334:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800b336:	4a04      	ldr	r2, [pc, #16]	; (800b348 <UTIL_SEQ_WaitEvt+0x94>)
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	6013      	str	r3, [r2, #0]

  return;
 800b33c:	bf00      	nop
}
 800b33e:	3720      	adds	r7, #32
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	20001744 	.word	0x20001744
 800b348:	20001740 	.word	0x20001740
 800b34c:	2000173c 	.word	0x2000173c

0800b350 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b350:	b480      	push	{r7}
 800b352:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b354:	bf00      	nop
}
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b35e:	b480      	push	{r7}
 800b360:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b362:	bf00      	nop
}
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800b374:	2300      	movs	r3, #0
 800b376:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	0c1b      	lsrs	r3, r3, #16
 800b37c:	041b      	lsls	r3, r3, #16
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d104      	bne.n	800b38c <SEQ_BitPosition+0x20>
 800b382:	2310      	movs	r3, #16
 800b384:	73fb      	strb	r3, [r7, #15]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	041b      	lsls	r3, r3, #16
 800b38a:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d105      	bne.n	800b3a2 <SEQ_BitPosition+0x36>
 800b396:	7bfb      	ldrb	r3, [r7, #15]
 800b398:	3308      	adds	r3, #8
 800b39a:	73fb      	strb	r3, [r7, #15]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	021b      	lsls	r3, r3, #8
 800b3a0:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d105      	bne.n	800b3b8 <SEQ_BitPosition+0x4c>
 800b3ac:	7bfb      	ldrb	r3, [r7, #15]
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	73fb      	strb	r3, [r7, #15]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	011b      	lsls	r3, r3, #4
 800b3b6:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	0f1b      	lsrs	r3, r3, #28
 800b3bc:	4a07      	ldr	r2, [pc, #28]	; (800b3dc <SEQ_BitPosition+0x70>)
 800b3be:	5cd2      	ldrb	r2, [r2, r3]
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b3c6:	7bfb      	ldrb	r3, [r7, #15]
 800b3c8:	f1c3 031f 	rsb	r3, r3, #31
 800b3cc:	b2db      	uxtb	r3, r3
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3714      	adds	r7, #20
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	0800d05c 	.word	0x0800d05c

0800b3e0 <__errno>:
 800b3e0:	4b01      	ldr	r3, [pc, #4]	; (800b3e8 <__errno+0x8>)
 800b3e2:	6818      	ldr	r0, [r3, #0]
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	20000030 	.word	0x20000030

0800b3ec <__libc_init_array>:
 800b3ec:	b570      	push	{r4, r5, r6, lr}
 800b3ee:	4d0d      	ldr	r5, [pc, #52]	; (800b424 <__libc_init_array+0x38>)
 800b3f0:	4c0d      	ldr	r4, [pc, #52]	; (800b428 <__libc_init_array+0x3c>)
 800b3f2:	1b64      	subs	r4, r4, r5
 800b3f4:	10a4      	asrs	r4, r4, #2
 800b3f6:	2600      	movs	r6, #0
 800b3f8:	42a6      	cmp	r6, r4
 800b3fa:	d109      	bne.n	800b410 <__libc_init_array+0x24>
 800b3fc:	4d0b      	ldr	r5, [pc, #44]	; (800b42c <__libc_init_array+0x40>)
 800b3fe:	4c0c      	ldr	r4, [pc, #48]	; (800b430 <__libc_init_array+0x44>)
 800b400:	f001 f852 	bl	800c4a8 <_init>
 800b404:	1b64      	subs	r4, r4, r5
 800b406:	10a4      	asrs	r4, r4, #2
 800b408:	2600      	movs	r6, #0
 800b40a:	42a6      	cmp	r6, r4
 800b40c:	d105      	bne.n	800b41a <__libc_init_array+0x2e>
 800b40e:	bd70      	pop	{r4, r5, r6, pc}
 800b410:	f855 3b04 	ldr.w	r3, [r5], #4
 800b414:	4798      	blx	r3
 800b416:	3601      	adds	r6, #1
 800b418:	e7ee      	b.n	800b3f8 <__libc_init_array+0xc>
 800b41a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b41e:	4798      	blx	r3
 800b420:	3601      	adds	r6, #1
 800b422:	e7f2      	b.n	800b40a <__libc_init_array+0x1e>
 800b424:	0800d10c 	.word	0x0800d10c
 800b428:	0800d10c 	.word	0x0800d10c
 800b42c:	0800d10c 	.word	0x0800d10c
 800b430:	0800d110 	.word	0x0800d110

0800b434 <memcpy>:
 800b434:	440a      	add	r2, r1
 800b436:	4291      	cmp	r1, r2
 800b438:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b43c:	d100      	bne.n	800b440 <memcpy+0xc>
 800b43e:	4770      	bx	lr
 800b440:	b510      	push	{r4, lr}
 800b442:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b44a:	4291      	cmp	r1, r2
 800b44c:	d1f9      	bne.n	800b442 <memcpy+0xe>
 800b44e:	bd10      	pop	{r4, pc}

0800b450 <memset>:
 800b450:	4402      	add	r2, r0
 800b452:	4603      	mov	r3, r0
 800b454:	4293      	cmp	r3, r2
 800b456:	d100      	bne.n	800b45a <memset+0xa>
 800b458:	4770      	bx	lr
 800b45a:	f803 1b01 	strb.w	r1, [r3], #1
 800b45e:	e7f9      	b.n	800b454 <memset+0x4>

0800b460 <iprintf>:
 800b460:	b40f      	push	{r0, r1, r2, r3}
 800b462:	4b0a      	ldr	r3, [pc, #40]	; (800b48c <iprintf+0x2c>)
 800b464:	b513      	push	{r0, r1, r4, lr}
 800b466:	681c      	ldr	r4, [r3, #0]
 800b468:	b124      	cbz	r4, 800b474 <iprintf+0x14>
 800b46a:	69a3      	ldr	r3, [r4, #24]
 800b46c:	b913      	cbnz	r3, 800b474 <iprintf+0x14>
 800b46e:	4620      	mov	r0, r4
 800b470:	f000 fa72 	bl	800b958 <__sinit>
 800b474:	ab05      	add	r3, sp, #20
 800b476:	9a04      	ldr	r2, [sp, #16]
 800b478:	68a1      	ldr	r1, [r4, #8]
 800b47a:	9301      	str	r3, [sp, #4]
 800b47c:	4620      	mov	r0, r4
 800b47e:	f000 fc7b 	bl	800bd78 <_vfiprintf_r>
 800b482:	b002      	add	sp, #8
 800b484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b488:	b004      	add	sp, #16
 800b48a:	4770      	bx	lr
 800b48c:	20000030 	.word	0x20000030

0800b490 <_puts_r>:
 800b490:	b570      	push	{r4, r5, r6, lr}
 800b492:	460e      	mov	r6, r1
 800b494:	4605      	mov	r5, r0
 800b496:	b118      	cbz	r0, 800b4a0 <_puts_r+0x10>
 800b498:	6983      	ldr	r3, [r0, #24]
 800b49a:	b90b      	cbnz	r3, 800b4a0 <_puts_r+0x10>
 800b49c:	f000 fa5c 	bl	800b958 <__sinit>
 800b4a0:	69ab      	ldr	r3, [r5, #24]
 800b4a2:	68ac      	ldr	r4, [r5, #8]
 800b4a4:	b913      	cbnz	r3, 800b4ac <_puts_r+0x1c>
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	f000 fa56 	bl	800b958 <__sinit>
 800b4ac:	4b2c      	ldr	r3, [pc, #176]	; (800b560 <_puts_r+0xd0>)
 800b4ae:	429c      	cmp	r4, r3
 800b4b0:	d120      	bne.n	800b4f4 <_puts_r+0x64>
 800b4b2:	686c      	ldr	r4, [r5, #4]
 800b4b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4b6:	07db      	lsls	r3, r3, #31
 800b4b8:	d405      	bmi.n	800b4c6 <_puts_r+0x36>
 800b4ba:	89a3      	ldrh	r3, [r4, #12]
 800b4bc:	0598      	lsls	r0, r3, #22
 800b4be:	d402      	bmi.n	800b4c6 <_puts_r+0x36>
 800b4c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4c2:	f000 fae7 	bl	800ba94 <__retarget_lock_acquire_recursive>
 800b4c6:	89a3      	ldrh	r3, [r4, #12]
 800b4c8:	0719      	lsls	r1, r3, #28
 800b4ca:	d51d      	bpl.n	800b508 <_puts_r+0x78>
 800b4cc:	6923      	ldr	r3, [r4, #16]
 800b4ce:	b1db      	cbz	r3, 800b508 <_puts_r+0x78>
 800b4d0:	3e01      	subs	r6, #1
 800b4d2:	68a3      	ldr	r3, [r4, #8]
 800b4d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b4d8:	3b01      	subs	r3, #1
 800b4da:	60a3      	str	r3, [r4, #8]
 800b4dc:	bb39      	cbnz	r1, 800b52e <_puts_r+0x9e>
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	da38      	bge.n	800b554 <_puts_r+0xc4>
 800b4e2:	4622      	mov	r2, r4
 800b4e4:	210a      	movs	r1, #10
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	f000 f85c 	bl	800b5a4 <__swbuf_r>
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	d011      	beq.n	800b514 <_puts_r+0x84>
 800b4f0:	250a      	movs	r5, #10
 800b4f2:	e011      	b.n	800b518 <_puts_r+0x88>
 800b4f4:	4b1b      	ldr	r3, [pc, #108]	; (800b564 <_puts_r+0xd4>)
 800b4f6:	429c      	cmp	r4, r3
 800b4f8:	d101      	bne.n	800b4fe <_puts_r+0x6e>
 800b4fa:	68ac      	ldr	r4, [r5, #8]
 800b4fc:	e7da      	b.n	800b4b4 <_puts_r+0x24>
 800b4fe:	4b1a      	ldr	r3, [pc, #104]	; (800b568 <_puts_r+0xd8>)
 800b500:	429c      	cmp	r4, r3
 800b502:	bf08      	it	eq
 800b504:	68ec      	ldreq	r4, [r5, #12]
 800b506:	e7d5      	b.n	800b4b4 <_puts_r+0x24>
 800b508:	4621      	mov	r1, r4
 800b50a:	4628      	mov	r0, r5
 800b50c:	f000 f89c 	bl	800b648 <__swsetup_r>
 800b510:	2800      	cmp	r0, #0
 800b512:	d0dd      	beq.n	800b4d0 <_puts_r+0x40>
 800b514:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b518:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b51a:	07da      	lsls	r2, r3, #31
 800b51c:	d405      	bmi.n	800b52a <_puts_r+0x9a>
 800b51e:	89a3      	ldrh	r3, [r4, #12]
 800b520:	059b      	lsls	r3, r3, #22
 800b522:	d402      	bmi.n	800b52a <_puts_r+0x9a>
 800b524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b526:	f000 fab6 	bl	800ba96 <__retarget_lock_release_recursive>
 800b52a:	4628      	mov	r0, r5
 800b52c:	bd70      	pop	{r4, r5, r6, pc}
 800b52e:	2b00      	cmp	r3, #0
 800b530:	da04      	bge.n	800b53c <_puts_r+0xac>
 800b532:	69a2      	ldr	r2, [r4, #24]
 800b534:	429a      	cmp	r2, r3
 800b536:	dc06      	bgt.n	800b546 <_puts_r+0xb6>
 800b538:	290a      	cmp	r1, #10
 800b53a:	d004      	beq.n	800b546 <_puts_r+0xb6>
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	1c5a      	adds	r2, r3, #1
 800b540:	6022      	str	r2, [r4, #0]
 800b542:	7019      	strb	r1, [r3, #0]
 800b544:	e7c5      	b.n	800b4d2 <_puts_r+0x42>
 800b546:	4622      	mov	r2, r4
 800b548:	4628      	mov	r0, r5
 800b54a:	f000 f82b 	bl	800b5a4 <__swbuf_r>
 800b54e:	3001      	adds	r0, #1
 800b550:	d1bf      	bne.n	800b4d2 <_puts_r+0x42>
 800b552:	e7df      	b.n	800b514 <_puts_r+0x84>
 800b554:	6823      	ldr	r3, [r4, #0]
 800b556:	250a      	movs	r5, #10
 800b558:	1c5a      	adds	r2, r3, #1
 800b55a:	6022      	str	r2, [r4, #0]
 800b55c:	701d      	strb	r5, [r3, #0]
 800b55e:	e7db      	b.n	800b518 <_puts_r+0x88>
 800b560:	0800d090 	.word	0x0800d090
 800b564:	0800d0b0 	.word	0x0800d0b0
 800b568:	0800d070 	.word	0x0800d070

0800b56c <puts>:
 800b56c:	4b02      	ldr	r3, [pc, #8]	; (800b578 <puts+0xc>)
 800b56e:	4601      	mov	r1, r0
 800b570:	6818      	ldr	r0, [r3, #0]
 800b572:	f7ff bf8d 	b.w	800b490 <_puts_r>
 800b576:	bf00      	nop
 800b578:	20000030 	.word	0x20000030

0800b57c <strrchr>:
 800b57c:	b538      	push	{r3, r4, r5, lr}
 800b57e:	4603      	mov	r3, r0
 800b580:	460c      	mov	r4, r1
 800b582:	b969      	cbnz	r1, 800b5a0 <strrchr+0x24>
 800b584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b588:	f000 bf0d 	b.w	800c3a6 <strchr>
 800b58c:	1c43      	adds	r3, r0, #1
 800b58e:	4605      	mov	r5, r0
 800b590:	4621      	mov	r1, r4
 800b592:	4618      	mov	r0, r3
 800b594:	f000 ff07 	bl	800c3a6 <strchr>
 800b598:	2800      	cmp	r0, #0
 800b59a:	d1f7      	bne.n	800b58c <strrchr+0x10>
 800b59c:	4628      	mov	r0, r5
 800b59e:	bd38      	pop	{r3, r4, r5, pc}
 800b5a0:	2500      	movs	r5, #0
 800b5a2:	e7f5      	b.n	800b590 <strrchr+0x14>

0800b5a4 <__swbuf_r>:
 800b5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a6:	460e      	mov	r6, r1
 800b5a8:	4614      	mov	r4, r2
 800b5aa:	4605      	mov	r5, r0
 800b5ac:	b118      	cbz	r0, 800b5b6 <__swbuf_r+0x12>
 800b5ae:	6983      	ldr	r3, [r0, #24]
 800b5b0:	b90b      	cbnz	r3, 800b5b6 <__swbuf_r+0x12>
 800b5b2:	f000 f9d1 	bl	800b958 <__sinit>
 800b5b6:	4b21      	ldr	r3, [pc, #132]	; (800b63c <__swbuf_r+0x98>)
 800b5b8:	429c      	cmp	r4, r3
 800b5ba:	d12b      	bne.n	800b614 <__swbuf_r+0x70>
 800b5bc:	686c      	ldr	r4, [r5, #4]
 800b5be:	69a3      	ldr	r3, [r4, #24]
 800b5c0:	60a3      	str	r3, [r4, #8]
 800b5c2:	89a3      	ldrh	r3, [r4, #12]
 800b5c4:	071a      	lsls	r2, r3, #28
 800b5c6:	d52f      	bpl.n	800b628 <__swbuf_r+0x84>
 800b5c8:	6923      	ldr	r3, [r4, #16]
 800b5ca:	b36b      	cbz	r3, 800b628 <__swbuf_r+0x84>
 800b5cc:	6923      	ldr	r3, [r4, #16]
 800b5ce:	6820      	ldr	r0, [r4, #0]
 800b5d0:	1ac0      	subs	r0, r0, r3
 800b5d2:	6963      	ldr	r3, [r4, #20]
 800b5d4:	b2f6      	uxtb	r6, r6
 800b5d6:	4283      	cmp	r3, r0
 800b5d8:	4637      	mov	r7, r6
 800b5da:	dc04      	bgt.n	800b5e6 <__swbuf_r+0x42>
 800b5dc:	4621      	mov	r1, r4
 800b5de:	4628      	mov	r0, r5
 800b5e0:	f000 f926 	bl	800b830 <_fflush_r>
 800b5e4:	bb30      	cbnz	r0, 800b634 <__swbuf_r+0x90>
 800b5e6:	68a3      	ldr	r3, [r4, #8]
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	60a3      	str	r3, [r4, #8]
 800b5ec:	6823      	ldr	r3, [r4, #0]
 800b5ee:	1c5a      	adds	r2, r3, #1
 800b5f0:	6022      	str	r2, [r4, #0]
 800b5f2:	701e      	strb	r6, [r3, #0]
 800b5f4:	6963      	ldr	r3, [r4, #20]
 800b5f6:	3001      	adds	r0, #1
 800b5f8:	4283      	cmp	r3, r0
 800b5fa:	d004      	beq.n	800b606 <__swbuf_r+0x62>
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	07db      	lsls	r3, r3, #31
 800b600:	d506      	bpl.n	800b610 <__swbuf_r+0x6c>
 800b602:	2e0a      	cmp	r6, #10
 800b604:	d104      	bne.n	800b610 <__swbuf_r+0x6c>
 800b606:	4621      	mov	r1, r4
 800b608:	4628      	mov	r0, r5
 800b60a:	f000 f911 	bl	800b830 <_fflush_r>
 800b60e:	b988      	cbnz	r0, 800b634 <__swbuf_r+0x90>
 800b610:	4638      	mov	r0, r7
 800b612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b614:	4b0a      	ldr	r3, [pc, #40]	; (800b640 <__swbuf_r+0x9c>)
 800b616:	429c      	cmp	r4, r3
 800b618:	d101      	bne.n	800b61e <__swbuf_r+0x7a>
 800b61a:	68ac      	ldr	r4, [r5, #8]
 800b61c:	e7cf      	b.n	800b5be <__swbuf_r+0x1a>
 800b61e:	4b09      	ldr	r3, [pc, #36]	; (800b644 <__swbuf_r+0xa0>)
 800b620:	429c      	cmp	r4, r3
 800b622:	bf08      	it	eq
 800b624:	68ec      	ldreq	r4, [r5, #12]
 800b626:	e7ca      	b.n	800b5be <__swbuf_r+0x1a>
 800b628:	4621      	mov	r1, r4
 800b62a:	4628      	mov	r0, r5
 800b62c:	f000 f80c 	bl	800b648 <__swsetup_r>
 800b630:	2800      	cmp	r0, #0
 800b632:	d0cb      	beq.n	800b5cc <__swbuf_r+0x28>
 800b634:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b638:	e7ea      	b.n	800b610 <__swbuf_r+0x6c>
 800b63a:	bf00      	nop
 800b63c:	0800d090 	.word	0x0800d090
 800b640:	0800d0b0 	.word	0x0800d0b0
 800b644:	0800d070 	.word	0x0800d070

0800b648 <__swsetup_r>:
 800b648:	4b32      	ldr	r3, [pc, #200]	; (800b714 <__swsetup_r+0xcc>)
 800b64a:	b570      	push	{r4, r5, r6, lr}
 800b64c:	681d      	ldr	r5, [r3, #0]
 800b64e:	4606      	mov	r6, r0
 800b650:	460c      	mov	r4, r1
 800b652:	b125      	cbz	r5, 800b65e <__swsetup_r+0x16>
 800b654:	69ab      	ldr	r3, [r5, #24]
 800b656:	b913      	cbnz	r3, 800b65e <__swsetup_r+0x16>
 800b658:	4628      	mov	r0, r5
 800b65a:	f000 f97d 	bl	800b958 <__sinit>
 800b65e:	4b2e      	ldr	r3, [pc, #184]	; (800b718 <__swsetup_r+0xd0>)
 800b660:	429c      	cmp	r4, r3
 800b662:	d10f      	bne.n	800b684 <__swsetup_r+0x3c>
 800b664:	686c      	ldr	r4, [r5, #4]
 800b666:	89a3      	ldrh	r3, [r4, #12]
 800b668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b66c:	0719      	lsls	r1, r3, #28
 800b66e:	d42c      	bmi.n	800b6ca <__swsetup_r+0x82>
 800b670:	06dd      	lsls	r5, r3, #27
 800b672:	d411      	bmi.n	800b698 <__swsetup_r+0x50>
 800b674:	2309      	movs	r3, #9
 800b676:	6033      	str	r3, [r6, #0]
 800b678:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b67c:	81a3      	strh	r3, [r4, #12]
 800b67e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b682:	e03e      	b.n	800b702 <__swsetup_r+0xba>
 800b684:	4b25      	ldr	r3, [pc, #148]	; (800b71c <__swsetup_r+0xd4>)
 800b686:	429c      	cmp	r4, r3
 800b688:	d101      	bne.n	800b68e <__swsetup_r+0x46>
 800b68a:	68ac      	ldr	r4, [r5, #8]
 800b68c:	e7eb      	b.n	800b666 <__swsetup_r+0x1e>
 800b68e:	4b24      	ldr	r3, [pc, #144]	; (800b720 <__swsetup_r+0xd8>)
 800b690:	429c      	cmp	r4, r3
 800b692:	bf08      	it	eq
 800b694:	68ec      	ldreq	r4, [r5, #12]
 800b696:	e7e6      	b.n	800b666 <__swsetup_r+0x1e>
 800b698:	0758      	lsls	r0, r3, #29
 800b69a:	d512      	bpl.n	800b6c2 <__swsetup_r+0x7a>
 800b69c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b69e:	b141      	cbz	r1, 800b6b2 <__swsetup_r+0x6a>
 800b6a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6a4:	4299      	cmp	r1, r3
 800b6a6:	d002      	beq.n	800b6ae <__swsetup_r+0x66>
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f000 fa5b 	bl	800bb64 <_free_r>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	6363      	str	r3, [r4, #52]	; 0x34
 800b6b2:	89a3      	ldrh	r3, [r4, #12]
 800b6b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6b8:	81a3      	strh	r3, [r4, #12]
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	6063      	str	r3, [r4, #4]
 800b6be:	6923      	ldr	r3, [r4, #16]
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	89a3      	ldrh	r3, [r4, #12]
 800b6c4:	f043 0308 	orr.w	r3, r3, #8
 800b6c8:	81a3      	strh	r3, [r4, #12]
 800b6ca:	6923      	ldr	r3, [r4, #16]
 800b6cc:	b94b      	cbnz	r3, 800b6e2 <__swsetup_r+0x9a>
 800b6ce:	89a3      	ldrh	r3, [r4, #12]
 800b6d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6d8:	d003      	beq.n	800b6e2 <__swsetup_r+0x9a>
 800b6da:	4621      	mov	r1, r4
 800b6dc:	4630      	mov	r0, r6
 800b6de:	f000 fa01 	bl	800bae4 <__smakebuf_r>
 800b6e2:	89a0      	ldrh	r0, [r4, #12]
 800b6e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6e8:	f010 0301 	ands.w	r3, r0, #1
 800b6ec:	d00a      	beq.n	800b704 <__swsetup_r+0xbc>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	60a3      	str	r3, [r4, #8]
 800b6f2:	6963      	ldr	r3, [r4, #20]
 800b6f4:	425b      	negs	r3, r3
 800b6f6:	61a3      	str	r3, [r4, #24]
 800b6f8:	6923      	ldr	r3, [r4, #16]
 800b6fa:	b943      	cbnz	r3, 800b70e <__swsetup_r+0xc6>
 800b6fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b700:	d1ba      	bne.n	800b678 <__swsetup_r+0x30>
 800b702:	bd70      	pop	{r4, r5, r6, pc}
 800b704:	0781      	lsls	r1, r0, #30
 800b706:	bf58      	it	pl
 800b708:	6963      	ldrpl	r3, [r4, #20]
 800b70a:	60a3      	str	r3, [r4, #8]
 800b70c:	e7f4      	b.n	800b6f8 <__swsetup_r+0xb0>
 800b70e:	2000      	movs	r0, #0
 800b710:	e7f7      	b.n	800b702 <__swsetup_r+0xba>
 800b712:	bf00      	nop
 800b714:	20000030 	.word	0x20000030
 800b718:	0800d090 	.word	0x0800d090
 800b71c:	0800d0b0 	.word	0x0800d0b0
 800b720:	0800d070 	.word	0x0800d070

0800b724 <__sflush_r>:
 800b724:	898a      	ldrh	r2, [r1, #12]
 800b726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b72a:	4605      	mov	r5, r0
 800b72c:	0710      	lsls	r0, r2, #28
 800b72e:	460c      	mov	r4, r1
 800b730:	d458      	bmi.n	800b7e4 <__sflush_r+0xc0>
 800b732:	684b      	ldr	r3, [r1, #4]
 800b734:	2b00      	cmp	r3, #0
 800b736:	dc05      	bgt.n	800b744 <__sflush_r+0x20>
 800b738:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	dc02      	bgt.n	800b744 <__sflush_r+0x20>
 800b73e:	2000      	movs	r0, #0
 800b740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b746:	2e00      	cmp	r6, #0
 800b748:	d0f9      	beq.n	800b73e <__sflush_r+0x1a>
 800b74a:	2300      	movs	r3, #0
 800b74c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b750:	682f      	ldr	r7, [r5, #0]
 800b752:	602b      	str	r3, [r5, #0]
 800b754:	d032      	beq.n	800b7bc <__sflush_r+0x98>
 800b756:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b758:	89a3      	ldrh	r3, [r4, #12]
 800b75a:	075a      	lsls	r2, r3, #29
 800b75c:	d505      	bpl.n	800b76a <__sflush_r+0x46>
 800b75e:	6863      	ldr	r3, [r4, #4]
 800b760:	1ac0      	subs	r0, r0, r3
 800b762:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b764:	b10b      	cbz	r3, 800b76a <__sflush_r+0x46>
 800b766:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b768:	1ac0      	subs	r0, r0, r3
 800b76a:	2300      	movs	r3, #0
 800b76c:	4602      	mov	r2, r0
 800b76e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b770:	6a21      	ldr	r1, [r4, #32]
 800b772:	4628      	mov	r0, r5
 800b774:	47b0      	blx	r6
 800b776:	1c43      	adds	r3, r0, #1
 800b778:	89a3      	ldrh	r3, [r4, #12]
 800b77a:	d106      	bne.n	800b78a <__sflush_r+0x66>
 800b77c:	6829      	ldr	r1, [r5, #0]
 800b77e:	291d      	cmp	r1, #29
 800b780:	d82c      	bhi.n	800b7dc <__sflush_r+0xb8>
 800b782:	4a2a      	ldr	r2, [pc, #168]	; (800b82c <__sflush_r+0x108>)
 800b784:	40ca      	lsrs	r2, r1
 800b786:	07d6      	lsls	r6, r2, #31
 800b788:	d528      	bpl.n	800b7dc <__sflush_r+0xb8>
 800b78a:	2200      	movs	r2, #0
 800b78c:	6062      	str	r2, [r4, #4]
 800b78e:	04d9      	lsls	r1, r3, #19
 800b790:	6922      	ldr	r2, [r4, #16]
 800b792:	6022      	str	r2, [r4, #0]
 800b794:	d504      	bpl.n	800b7a0 <__sflush_r+0x7c>
 800b796:	1c42      	adds	r2, r0, #1
 800b798:	d101      	bne.n	800b79e <__sflush_r+0x7a>
 800b79a:	682b      	ldr	r3, [r5, #0]
 800b79c:	b903      	cbnz	r3, 800b7a0 <__sflush_r+0x7c>
 800b79e:	6560      	str	r0, [r4, #84]	; 0x54
 800b7a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7a2:	602f      	str	r7, [r5, #0]
 800b7a4:	2900      	cmp	r1, #0
 800b7a6:	d0ca      	beq.n	800b73e <__sflush_r+0x1a>
 800b7a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7ac:	4299      	cmp	r1, r3
 800b7ae:	d002      	beq.n	800b7b6 <__sflush_r+0x92>
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	f000 f9d7 	bl	800bb64 <_free_r>
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	6360      	str	r0, [r4, #52]	; 0x34
 800b7ba:	e7c1      	b.n	800b740 <__sflush_r+0x1c>
 800b7bc:	6a21      	ldr	r1, [r4, #32]
 800b7be:	2301      	movs	r3, #1
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	47b0      	blx	r6
 800b7c4:	1c41      	adds	r1, r0, #1
 800b7c6:	d1c7      	bne.n	800b758 <__sflush_r+0x34>
 800b7c8:	682b      	ldr	r3, [r5, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d0c4      	beq.n	800b758 <__sflush_r+0x34>
 800b7ce:	2b1d      	cmp	r3, #29
 800b7d0:	d001      	beq.n	800b7d6 <__sflush_r+0xb2>
 800b7d2:	2b16      	cmp	r3, #22
 800b7d4:	d101      	bne.n	800b7da <__sflush_r+0xb6>
 800b7d6:	602f      	str	r7, [r5, #0]
 800b7d8:	e7b1      	b.n	800b73e <__sflush_r+0x1a>
 800b7da:	89a3      	ldrh	r3, [r4, #12]
 800b7dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7e0:	81a3      	strh	r3, [r4, #12]
 800b7e2:	e7ad      	b.n	800b740 <__sflush_r+0x1c>
 800b7e4:	690f      	ldr	r7, [r1, #16]
 800b7e6:	2f00      	cmp	r7, #0
 800b7e8:	d0a9      	beq.n	800b73e <__sflush_r+0x1a>
 800b7ea:	0793      	lsls	r3, r2, #30
 800b7ec:	680e      	ldr	r6, [r1, #0]
 800b7ee:	bf08      	it	eq
 800b7f0:	694b      	ldreq	r3, [r1, #20]
 800b7f2:	600f      	str	r7, [r1, #0]
 800b7f4:	bf18      	it	ne
 800b7f6:	2300      	movne	r3, #0
 800b7f8:	eba6 0807 	sub.w	r8, r6, r7
 800b7fc:	608b      	str	r3, [r1, #8]
 800b7fe:	f1b8 0f00 	cmp.w	r8, #0
 800b802:	dd9c      	ble.n	800b73e <__sflush_r+0x1a>
 800b804:	6a21      	ldr	r1, [r4, #32]
 800b806:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b808:	4643      	mov	r3, r8
 800b80a:	463a      	mov	r2, r7
 800b80c:	4628      	mov	r0, r5
 800b80e:	47b0      	blx	r6
 800b810:	2800      	cmp	r0, #0
 800b812:	dc06      	bgt.n	800b822 <__sflush_r+0xfe>
 800b814:	89a3      	ldrh	r3, [r4, #12]
 800b816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b81a:	81a3      	strh	r3, [r4, #12]
 800b81c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b820:	e78e      	b.n	800b740 <__sflush_r+0x1c>
 800b822:	4407      	add	r7, r0
 800b824:	eba8 0800 	sub.w	r8, r8, r0
 800b828:	e7e9      	b.n	800b7fe <__sflush_r+0xda>
 800b82a:	bf00      	nop
 800b82c:	20400001 	.word	0x20400001

0800b830 <_fflush_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	690b      	ldr	r3, [r1, #16]
 800b834:	4605      	mov	r5, r0
 800b836:	460c      	mov	r4, r1
 800b838:	b913      	cbnz	r3, 800b840 <_fflush_r+0x10>
 800b83a:	2500      	movs	r5, #0
 800b83c:	4628      	mov	r0, r5
 800b83e:	bd38      	pop	{r3, r4, r5, pc}
 800b840:	b118      	cbz	r0, 800b84a <_fflush_r+0x1a>
 800b842:	6983      	ldr	r3, [r0, #24]
 800b844:	b90b      	cbnz	r3, 800b84a <_fflush_r+0x1a>
 800b846:	f000 f887 	bl	800b958 <__sinit>
 800b84a:	4b14      	ldr	r3, [pc, #80]	; (800b89c <_fflush_r+0x6c>)
 800b84c:	429c      	cmp	r4, r3
 800b84e:	d11b      	bne.n	800b888 <_fflush_r+0x58>
 800b850:	686c      	ldr	r4, [r5, #4]
 800b852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d0ef      	beq.n	800b83a <_fflush_r+0xa>
 800b85a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b85c:	07d0      	lsls	r0, r2, #31
 800b85e:	d404      	bmi.n	800b86a <_fflush_r+0x3a>
 800b860:	0599      	lsls	r1, r3, #22
 800b862:	d402      	bmi.n	800b86a <_fflush_r+0x3a>
 800b864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b866:	f000 f915 	bl	800ba94 <__retarget_lock_acquire_recursive>
 800b86a:	4628      	mov	r0, r5
 800b86c:	4621      	mov	r1, r4
 800b86e:	f7ff ff59 	bl	800b724 <__sflush_r>
 800b872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b874:	07da      	lsls	r2, r3, #31
 800b876:	4605      	mov	r5, r0
 800b878:	d4e0      	bmi.n	800b83c <_fflush_r+0xc>
 800b87a:	89a3      	ldrh	r3, [r4, #12]
 800b87c:	059b      	lsls	r3, r3, #22
 800b87e:	d4dd      	bmi.n	800b83c <_fflush_r+0xc>
 800b880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b882:	f000 f908 	bl	800ba96 <__retarget_lock_release_recursive>
 800b886:	e7d9      	b.n	800b83c <_fflush_r+0xc>
 800b888:	4b05      	ldr	r3, [pc, #20]	; (800b8a0 <_fflush_r+0x70>)
 800b88a:	429c      	cmp	r4, r3
 800b88c:	d101      	bne.n	800b892 <_fflush_r+0x62>
 800b88e:	68ac      	ldr	r4, [r5, #8]
 800b890:	e7df      	b.n	800b852 <_fflush_r+0x22>
 800b892:	4b04      	ldr	r3, [pc, #16]	; (800b8a4 <_fflush_r+0x74>)
 800b894:	429c      	cmp	r4, r3
 800b896:	bf08      	it	eq
 800b898:	68ec      	ldreq	r4, [r5, #12]
 800b89a:	e7da      	b.n	800b852 <_fflush_r+0x22>
 800b89c:	0800d090 	.word	0x0800d090
 800b8a0:	0800d0b0 	.word	0x0800d0b0
 800b8a4:	0800d070 	.word	0x0800d070

0800b8a8 <std>:
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	b510      	push	{r4, lr}
 800b8ac:	4604      	mov	r4, r0
 800b8ae:	e9c0 3300 	strd	r3, r3, [r0]
 800b8b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8b6:	6083      	str	r3, [r0, #8]
 800b8b8:	8181      	strh	r1, [r0, #12]
 800b8ba:	6643      	str	r3, [r0, #100]	; 0x64
 800b8bc:	81c2      	strh	r2, [r0, #14]
 800b8be:	6183      	str	r3, [r0, #24]
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	2208      	movs	r2, #8
 800b8c4:	305c      	adds	r0, #92	; 0x5c
 800b8c6:	f7ff fdc3 	bl	800b450 <memset>
 800b8ca:	4b05      	ldr	r3, [pc, #20]	; (800b8e0 <std+0x38>)
 800b8cc:	6263      	str	r3, [r4, #36]	; 0x24
 800b8ce:	4b05      	ldr	r3, [pc, #20]	; (800b8e4 <std+0x3c>)
 800b8d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8d2:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <std+0x40>)
 800b8d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8d6:	4b05      	ldr	r3, [pc, #20]	; (800b8ec <std+0x44>)
 800b8d8:	6224      	str	r4, [r4, #32]
 800b8da:	6323      	str	r3, [r4, #48]	; 0x30
 800b8dc:	bd10      	pop	{r4, pc}
 800b8de:	bf00      	nop
 800b8e0:	0800c321 	.word	0x0800c321
 800b8e4:	0800c343 	.word	0x0800c343
 800b8e8:	0800c37b 	.word	0x0800c37b
 800b8ec:	0800c39f 	.word	0x0800c39f

0800b8f0 <_cleanup_r>:
 800b8f0:	4901      	ldr	r1, [pc, #4]	; (800b8f8 <_cleanup_r+0x8>)
 800b8f2:	f000 b8af 	b.w	800ba54 <_fwalk_reent>
 800b8f6:	bf00      	nop
 800b8f8:	0800b831 	.word	0x0800b831

0800b8fc <__sfmoreglue>:
 800b8fc:	b570      	push	{r4, r5, r6, lr}
 800b8fe:	2268      	movs	r2, #104	; 0x68
 800b900:	1e4d      	subs	r5, r1, #1
 800b902:	4355      	muls	r5, r2
 800b904:	460e      	mov	r6, r1
 800b906:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b90a:	f000 f997 	bl	800bc3c <_malloc_r>
 800b90e:	4604      	mov	r4, r0
 800b910:	b140      	cbz	r0, 800b924 <__sfmoreglue+0x28>
 800b912:	2100      	movs	r1, #0
 800b914:	e9c0 1600 	strd	r1, r6, [r0]
 800b918:	300c      	adds	r0, #12
 800b91a:	60a0      	str	r0, [r4, #8]
 800b91c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b920:	f7ff fd96 	bl	800b450 <memset>
 800b924:	4620      	mov	r0, r4
 800b926:	bd70      	pop	{r4, r5, r6, pc}

0800b928 <__sfp_lock_acquire>:
 800b928:	4801      	ldr	r0, [pc, #4]	; (800b930 <__sfp_lock_acquire+0x8>)
 800b92a:	f000 b8b3 	b.w	800ba94 <__retarget_lock_acquire_recursive>
 800b92e:	bf00      	nop
 800b930:	200017d9 	.word	0x200017d9

0800b934 <__sfp_lock_release>:
 800b934:	4801      	ldr	r0, [pc, #4]	; (800b93c <__sfp_lock_release+0x8>)
 800b936:	f000 b8ae 	b.w	800ba96 <__retarget_lock_release_recursive>
 800b93a:	bf00      	nop
 800b93c:	200017d9 	.word	0x200017d9

0800b940 <__sinit_lock_acquire>:
 800b940:	4801      	ldr	r0, [pc, #4]	; (800b948 <__sinit_lock_acquire+0x8>)
 800b942:	f000 b8a7 	b.w	800ba94 <__retarget_lock_acquire_recursive>
 800b946:	bf00      	nop
 800b948:	200017da 	.word	0x200017da

0800b94c <__sinit_lock_release>:
 800b94c:	4801      	ldr	r0, [pc, #4]	; (800b954 <__sinit_lock_release+0x8>)
 800b94e:	f000 b8a2 	b.w	800ba96 <__retarget_lock_release_recursive>
 800b952:	bf00      	nop
 800b954:	200017da 	.word	0x200017da

0800b958 <__sinit>:
 800b958:	b510      	push	{r4, lr}
 800b95a:	4604      	mov	r4, r0
 800b95c:	f7ff fff0 	bl	800b940 <__sinit_lock_acquire>
 800b960:	69a3      	ldr	r3, [r4, #24]
 800b962:	b11b      	cbz	r3, 800b96c <__sinit+0x14>
 800b964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b968:	f7ff bff0 	b.w	800b94c <__sinit_lock_release>
 800b96c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b970:	6523      	str	r3, [r4, #80]	; 0x50
 800b972:	4b13      	ldr	r3, [pc, #76]	; (800b9c0 <__sinit+0x68>)
 800b974:	4a13      	ldr	r2, [pc, #76]	; (800b9c4 <__sinit+0x6c>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	62a2      	str	r2, [r4, #40]	; 0x28
 800b97a:	42a3      	cmp	r3, r4
 800b97c:	bf04      	itt	eq
 800b97e:	2301      	moveq	r3, #1
 800b980:	61a3      	streq	r3, [r4, #24]
 800b982:	4620      	mov	r0, r4
 800b984:	f000 f820 	bl	800b9c8 <__sfp>
 800b988:	6060      	str	r0, [r4, #4]
 800b98a:	4620      	mov	r0, r4
 800b98c:	f000 f81c 	bl	800b9c8 <__sfp>
 800b990:	60a0      	str	r0, [r4, #8]
 800b992:	4620      	mov	r0, r4
 800b994:	f000 f818 	bl	800b9c8 <__sfp>
 800b998:	2200      	movs	r2, #0
 800b99a:	60e0      	str	r0, [r4, #12]
 800b99c:	2104      	movs	r1, #4
 800b99e:	6860      	ldr	r0, [r4, #4]
 800b9a0:	f7ff ff82 	bl	800b8a8 <std>
 800b9a4:	68a0      	ldr	r0, [r4, #8]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	2109      	movs	r1, #9
 800b9aa:	f7ff ff7d 	bl	800b8a8 <std>
 800b9ae:	68e0      	ldr	r0, [r4, #12]
 800b9b0:	2202      	movs	r2, #2
 800b9b2:	2112      	movs	r1, #18
 800b9b4:	f7ff ff78 	bl	800b8a8 <std>
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	61a3      	str	r3, [r4, #24]
 800b9bc:	e7d2      	b.n	800b964 <__sinit+0xc>
 800b9be:	bf00      	nop
 800b9c0:	0800d06c 	.word	0x0800d06c
 800b9c4:	0800b8f1 	.word	0x0800b8f1

0800b9c8 <__sfp>:
 800b9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ca:	4607      	mov	r7, r0
 800b9cc:	f7ff ffac 	bl	800b928 <__sfp_lock_acquire>
 800b9d0:	4b1e      	ldr	r3, [pc, #120]	; (800ba4c <__sfp+0x84>)
 800b9d2:	681e      	ldr	r6, [r3, #0]
 800b9d4:	69b3      	ldr	r3, [r6, #24]
 800b9d6:	b913      	cbnz	r3, 800b9de <__sfp+0x16>
 800b9d8:	4630      	mov	r0, r6
 800b9da:	f7ff ffbd 	bl	800b958 <__sinit>
 800b9de:	3648      	adds	r6, #72	; 0x48
 800b9e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	d503      	bpl.n	800b9f0 <__sfp+0x28>
 800b9e8:	6833      	ldr	r3, [r6, #0]
 800b9ea:	b30b      	cbz	r3, 800ba30 <__sfp+0x68>
 800b9ec:	6836      	ldr	r6, [r6, #0]
 800b9ee:	e7f7      	b.n	800b9e0 <__sfp+0x18>
 800b9f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9f4:	b9d5      	cbnz	r5, 800ba2c <__sfp+0x64>
 800b9f6:	4b16      	ldr	r3, [pc, #88]	; (800ba50 <__sfp+0x88>)
 800b9f8:	60e3      	str	r3, [r4, #12]
 800b9fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9fe:	6665      	str	r5, [r4, #100]	; 0x64
 800ba00:	f000 f847 	bl	800ba92 <__retarget_lock_init_recursive>
 800ba04:	f7ff ff96 	bl	800b934 <__sfp_lock_release>
 800ba08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba10:	6025      	str	r5, [r4, #0]
 800ba12:	61a5      	str	r5, [r4, #24]
 800ba14:	2208      	movs	r2, #8
 800ba16:	4629      	mov	r1, r5
 800ba18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba1c:	f7ff fd18 	bl	800b450 <memset>
 800ba20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba28:	4620      	mov	r0, r4
 800ba2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba2c:	3468      	adds	r4, #104	; 0x68
 800ba2e:	e7d9      	b.n	800b9e4 <__sfp+0x1c>
 800ba30:	2104      	movs	r1, #4
 800ba32:	4638      	mov	r0, r7
 800ba34:	f7ff ff62 	bl	800b8fc <__sfmoreglue>
 800ba38:	4604      	mov	r4, r0
 800ba3a:	6030      	str	r0, [r6, #0]
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	d1d5      	bne.n	800b9ec <__sfp+0x24>
 800ba40:	f7ff ff78 	bl	800b934 <__sfp_lock_release>
 800ba44:	230c      	movs	r3, #12
 800ba46:	603b      	str	r3, [r7, #0]
 800ba48:	e7ee      	b.n	800ba28 <__sfp+0x60>
 800ba4a:	bf00      	nop
 800ba4c:	0800d06c 	.word	0x0800d06c
 800ba50:	ffff0001 	.word	0xffff0001

0800ba54 <_fwalk_reent>:
 800ba54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba58:	4606      	mov	r6, r0
 800ba5a:	4688      	mov	r8, r1
 800ba5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba60:	2700      	movs	r7, #0
 800ba62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba66:	f1b9 0901 	subs.w	r9, r9, #1
 800ba6a:	d505      	bpl.n	800ba78 <_fwalk_reent+0x24>
 800ba6c:	6824      	ldr	r4, [r4, #0]
 800ba6e:	2c00      	cmp	r4, #0
 800ba70:	d1f7      	bne.n	800ba62 <_fwalk_reent+0xe>
 800ba72:	4638      	mov	r0, r7
 800ba74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba78:	89ab      	ldrh	r3, [r5, #12]
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d907      	bls.n	800ba8e <_fwalk_reent+0x3a>
 800ba7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba82:	3301      	adds	r3, #1
 800ba84:	d003      	beq.n	800ba8e <_fwalk_reent+0x3a>
 800ba86:	4629      	mov	r1, r5
 800ba88:	4630      	mov	r0, r6
 800ba8a:	47c0      	blx	r8
 800ba8c:	4307      	orrs	r7, r0
 800ba8e:	3568      	adds	r5, #104	; 0x68
 800ba90:	e7e9      	b.n	800ba66 <_fwalk_reent+0x12>

0800ba92 <__retarget_lock_init_recursive>:
 800ba92:	4770      	bx	lr

0800ba94 <__retarget_lock_acquire_recursive>:
 800ba94:	4770      	bx	lr

0800ba96 <__retarget_lock_release_recursive>:
 800ba96:	4770      	bx	lr

0800ba98 <__swhatbuf_r>:
 800ba98:	b570      	push	{r4, r5, r6, lr}
 800ba9a:	460e      	mov	r6, r1
 800ba9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa0:	2900      	cmp	r1, #0
 800baa2:	b096      	sub	sp, #88	; 0x58
 800baa4:	4614      	mov	r4, r2
 800baa6:	461d      	mov	r5, r3
 800baa8:	da08      	bge.n	800babc <__swhatbuf_r+0x24>
 800baaa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800baae:	2200      	movs	r2, #0
 800bab0:	602a      	str	r2, [r5, #0]
 800bab2:	061a      	lsls	r2, r3, #24
 800bab4:	d410      	bmi.n	800bad8 <__swhatbuf_r+0x40>
 800bab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baba:	e00e      	b.n	800bada <__swhatbuf_r+0x42>
 800babc:	466a      	mov	r2, sp
 800babe:	f000 fca1 	bl	800c404 <_fstat_r>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	dbf1      	blt.n	800baaa <__swhatbuf_r+0x12>
 800bac6:	9a01      	ldr	r2, [sp, #4]
 800bac8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bacc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bad0:	425a      	negs	r2, r3
 800bad2:	415a      	adcs	r2, r3
 800bad4:	602a      	str	r2, [r5, #0]
 800bad6:	e7ee      	b.n	800bab6 <__swhatbuf_r+0x1e>
 800bad8:	2340      	movs	r3, #64	; 0x40
 800bada:	2000      	movs	r0, #0
 800badc:	6023      	str	r3, [r4, #0]
 800bade:	b016      	add	sp, #88	; 0x58
 800bae0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bae4 <__smakebuf_r>:
 800bae4:	898b      	ldrh	r3, [r1, #12]
 800bae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bae8:	079d      	lsls	r5, r3, #30
 800baea:	4606      	mov	r6, r0
 800baec:	460c      	mov	r4, r1
 800baee:	d507      	bpl.n	800bb00 <__smakebuf_r+0x1c>
 800baf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800baf4:	6023      	str	r3, [r4, #0]
 800baf6:	6123      	str	r3, [r4, #16]
 800baf8:	2301      	movs	r3, #1
 800bafa:	6163      	str	r3, [r4, #20]
 800bafc:	b002      	add	sp, #8
 800bafe:	bd70      	pop	{r4, r5, r6, pc}
 800bb00:	ab01      	add	r3, sp, #4
 800bb02:	466a      	mov	r2, sp
 800bb04:	f7ff ffc8 	bl	800ba98 <__swhatbuf_r>
 800bb08:	9900      	ldr	r1, [sp, #0]
 800bb0a:	4605      	mov	r5, r0
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	f000 f895 	bl	800bc3c <_malloc_r>
 800bb12:	b948      	cbnz	r0, 800bb28 <__smakebuf_r+0x44>
 800bb14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb18:	059a      	lsls	r2, r3, #22
 800bb1a:	d4ef      	bmi.n	800bafc <__smakebuf_r+0x18>
 800bb1c:	f023 0303 	bic.w	r3, r3, #3
 800bb20:	f043 0302 	orr.w	r3, r3, #2
 800bb24:	81a3      	strh	r3, [r4, #12]
 800bb26:	e7e3      	b.n	800baf0 <__smakebuf_r+0xc>
 800bb28:	4b0d      	ldr	r3, [pc, #52]	; (800bb60 <__smakebuf_r+0x7c>)
 800bb2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb2c:	89a3      	ldrh	r3, [r4, #12]
 800bb2e:	6020      	str	r0, [r4, #0]
 800bb30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb34:	81a3      	strh	r3, [r4, #12]
 800bb36:	9b00      	ldr	r3, [sp, #0]
 800bb38:	6163      	str	r3, [r4, #20]
 800bb3a:	9b01      	ldr	r3, [sp, #4]
 800bb3c:	6120      	str	r0, [r4, #16]
 800bb3e:	b15b      	cbz	r3, 800bb58 <__smakebuf_r+0x74>
 800bb40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb44:	4630      	mov	r0, r6
 800bb46:	f000 fc6f 	bl	800c428 <_isatty_r>
 800bb4a:	b128      	cbz	r0, 800bb58 <__smakebuf_r+0x74>
 800bb4c:	89a3      	ldrh	r3, [r4, #12]
 800bb4e:	f023 0303 	bic.w	r3, r3, #3
 800bb52:	f043 0301 	orr.w	r3, r3, #1
 800bb56:	81a3      	strh	r3, [r4, #12]
 800bb58:	89a0      	ldrh	r0, [r4, #12]
 800bb5a:	4305      	orrs	r5, r0
 800bb5c:	81a5      	strh	r5, [r4, #12]
 800bb5e:	e7cd      	b.n	800bafc <__smakebuf_r+0x18>
 800bb60:	0800b8f1 	.word	0x0800b8f1

0800bb64 <_free_r>:
 800bb64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb66:	2900      	cmp	r1, #0
 800bb68:	d044      	beq.n	800bbf4 <_free_r+0x90>
 800bb6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb6e:	9001      	str	r0, [sp, #4]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f1a1 0404 	sub.w	r4, r1, #4
 800bb76:	bfb8      	it	lt
 800bb78:	18e4      	addlt	r4, r4, r3
 800bb7a:	f000 fc77 	bl	800c46c <__malloc_lock>
 800bb7e:	4a1e      	ldr	r2, [pc, #120]	; (800bbf8 <_free_r+0x94>)
 800bb80:	9801      	ldr	r0, [sp, #4]
 800bb82:	6813      	ldr	r3, [r2, #0]
 800bb84:	b933      	cbnz	r3, 800bb94 <_free_r+0x30>
 800bb86:	6063      	str	r3, [r4, #4]
 800bb88:	6014      	str	r4, [r2, #0]
 800bb8a:	b003      	add	sp, #12
 800bb8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb90:	f000 bc72 	b.w	800c478 <__malloc_unlock>
 800bb94:	42a3      	cmp	r3, r4
 800bb96:	d908      	bls.n	800bbaa <_free_r+0x46>
 800bb98:	6825      	ldr	r5, [r4, #0]
 800bb9a:	1961      	adds	r1, r4, r5
 800bb9c:	428b      	cmp	r3, r1
 800bb9e:	bf01      	itttt	eq
 800bba0:	6819      	ldreq	r1, [r3, #0]
 800bba2:	685b      	ldreq	r3, [r3, #4]
 800bba4:	1949      	addeq	r1, r1, r5
 800bba6:	6021      	streq	r1, [r4, #0]
 800bba8:	e7ed      	b.n	800bb86 <_free_r+0x22>
 800bbaa:	461a      	mov	r2, r3
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	b10b      	cbz	r3, 800bbb4 <_free_r+0x50>
 800bbb0:	42a3      	cmp	r3, r4
 800bbb2:	d9fa      	bls.n	800bbaa <_free_r+0x46>
 800bbb4:	6811      	ldr	r1, [r2, #0]
 800bbb6:	1855      	adds	r5, r2, r1
 800bbb8:	42a5      	cmp	r5, r4
 800bbba:	d10b      	bne.n	800bbd4 <_free_r+0x70>
 800bbbc:	6824      	ldr	r4, [r4, #0]
 800bbbe:	4421      	add	r1, r4
 800bbc0:	1854      	adds	r4, r2, r1
 800bbc2:	42a3      	cmp	r3, r4
 800bbc4:	6011      	str	r1, [r2, #0]
 800bbc6:	d1e0      	bne.n	800bb8a <_free_r+0x26>
 800bbc8:	681c      	ldr	r4, [r3, #0]
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	6053      	str	r3, [r2, #4]
 800bbce:	4421      	add	r1, r4
 800bbd0:	6011      	str	r1, [r2, #0]
 800bbd2:	e7da      	b.n	800bb8a <_free_r+0x26>
 800bbd4:	d902      	bls.n	800bbdc <_free_r+0x78>
 800bbd6:	230c      	movs	r3, #12
 800bbd8:	6003      	str	r3, [r0, #0]
 800bbda:	e7d6      	b.n	800bb8a <_free_r+0x26>
 800bbdc:	6825      	ldr	r5, [r4, #0]
 800bbde:	1961      	adds	r1, r4, r5
 800bbe0:	428b      	cmp	r3, r1
 800bbe2:	bf04      	itt	eq
 800bbe4:	6819      	ldreq	r1, [r3, #0]
 800bbe6:	685b      	ldreq	r3, [r3, #4]
 800bbe8:	6063      	str	r3, [r4, #4]
 800bbea:	bf04      	itt	eq
 800bbec:	1949      	addeq	r1, r1, r5
 800bbee:	6021      	streq	r1, [r4, #0]
 800bbf0:	6054      	str	r4, [r2, #4]
 800bbf2:	e7ca      	b.n	800bb8a <_free_r+0x26>
 800bbf4:	b003      	add	sp, #12
 800bbf6:	bd30      	pop	{r4, r5, pc}
 800bbf8:	200017dc 	.word	0x200017dc

0800bbfc <sbrk_aligned>:
 800bbfc:	b570      	push	{r4, r5, r6, lr}
 800bbfe:	4e0e      	ldr	r6, [pc, #56]	; (800bc38 <sbrk_aligned+0x3c>)
 800bc00:	460c      	mov	r4, r1
 800bc02:	6831      	ldr	r1, [r6, #0]
 800bc04:	4605      	mov	r5, r0
 800bc06:	b911      	cbnz	r1, 800bc0e <sbrk_aligned+0x12>
 800bc08:	f000 fb7a 	bl	800c300 <_sbrk_r>
 800bc0c:	6030      	str	r0, [r6, #0]
 800bc0e:	4621      	mov	r1, r4
 800bc10:	4628      	mov	r0, r5
 800bc12:	f000 fb75 	bl	800c300 <_sbrk_r>
 800bc16:	1c43      	adds	r3, r0, #1
 800bc18:	d00a      	beq.n	800bc30 <sbrk_aligned+0x34>
 800bc1a:	1cc4      	adds	r4, r0, #3
 800bc1c:	f024 0403 	bic.w	r4, r4, #3
 800bc20:	42a0      	cmp	r0, r4
 800bc22:	d007      	beq.n	800bc34 <sbrk_aligned+0x38>
 800bc24:	1a21      	subs	r1, r4, r0
 800bc26:	4628      	mov	r0, r5
 800bc28:	f000 fb6a 	bl	800c300 <_sbrk_r>
 800bc2c:	3001      	adds	r0, #1
 800bc2e:	d101      	bne.n	800bc34 <sbrk_aligned+0x38>
 800bc30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bc34:	4620      	mov	r0, r4
 800bc36:	bd70      	pop	{r4, r5, r6, pc}
 800bc38:	200017e0 	.word	0x200017e0

0800bc3c <_malloc_r>:
 800bc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc40:	1ccd      	adds	r5, r1, #3
 800bc42:	f025 0503 	bic.w	r5, r5, #3
 800bc46:	3508      	adds	r5, #8
 800bc48:	2d0c      	cmp	r5, #12
 800bc4a:	bf38      	it	cc
 800bc4c:	250c      	movcc	r5, #12
 800bc4e:	2d00      	cmp	r5, #0
 800bc50:	4607      	mov	r7, r0
 800bc52:	db01      	blt.n	800bc58 <_malloc_r+0x1c>
 800bc54:	42a9      	cmp	r1, r5
 800bc56:	d905      	bls.n	800bc64 <_malloc_r+0x28>
 800bc58:	230c      	movs	r3, #12
 800bc5a:	603b      	str	r3, [r7, #0]
 800bc5c:	2600      	movs	r6, #0
 800bc5e:	4630      	mov	r0, r6
 800bc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc64:	4e2e      	ldr	r6, [pc, #184]	; (800bd20 <_malloc_r+0xe4>)
 800bc66:	f000 fc01 	bl	800c46c <__malloc_lock>
 800bc6a:	6833      	ldr	r3, [r6, #0]
 800bc6c:	461c      	mov	r4, r3
 800bc6e:	bb34      	cbnz	r4, 800bcbe <_malloc_r+0x82>
 800bc70:	4629      	mov	r1, r5
 800bc72:	4638      	mov	r0, r7
 800bc74:	f7ff ffc2 	bl	800bbfc <sbrk_aligned>
 800bc78:	1c43      	adds	r3, r0, #1
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	d14d      	bne.n	800bd1a <_malloc_r+0xde>
 800bc7e:	6834      	ldr	r4, [r6, #0]
 800bc80:	4626      	mov	r6, r4
 800bc82:	2e00      	cmp	r6, #0
 800bc84:	d140      	bne.n	800bd08 <_malloc_r+0xcc>
 800bc86:	6823      	ldr	r3, [r4, #0]
 800bc88:	4631      	mov	r1, r6
 800bc8a:	4638      	mov	r0, r7
 800bc8c:	eb04 0803 	add.w	r8, r4, r3
 800bc90:	f000 fb36 	bl	800c300 <_sbrk_r>
 800bc94:	4580      	cmp	r8, r0
 800bc96:	d13a      	bne.n	800bd0e <_malloc_r+0xd2>
 800bc98:	6821      	ldr	r1, [r4, #0]
 800bc9a:	3503      	adds	r5, #3
 800bc9c:	1a6d      	subs	r5, r5, r1
 800bc9e:	f025 0503 	bic.w	r5, r5, #3
 800bca2:	3508      	adds	r5, #8
 800bca4:	2d0c      	cmp	r5, #12
 800bca6:	bf38      	it	cc
 800bca8:	250c      	movcc	r5, #12
 800bcaa:	4629      	mov	r1, r5
 800bcac:	4638      	mov	r0, r7
 800bcae:	f7ff ffa5 	bl	800bbfc <sbrk_aligned>
 800bcb2:	3001      	adds	r0, #1
 800bcb4:	d02b      	beq.n	800bd0e <_malloc_r+0xd2>
 800bcb6:	6823      	ldr	r3, [r4, #0]
 800bcb8:	442b      	add	r3, r5
 800bcba:	6023      	str	r3, [r4, #0]
 800bcbc:	e00e      	b.n	800bcdc <_malloc_r+0xa0>
 800bcbe:	6822      	ldr	r2, [r4, #0]
 800bcc0:	1b52      	subs	r2, r2, r5
 800bcc2:	d41e      	bmi.n	800bd02 <_malloc_r+0xc6>
 800bcc4:	2a0b      	cmp	r2, #11
 800bcc6:	d916      	bls.n	800bcf6 <_malloc_r+0xba>
 800bcc8:	1961      	adds	r1, r4, r5
 800bcca:	42a3      	cmp	r3, r4
 800bccc:	6025      	str	r5, [r4, #0]
 800bcce:	bf18      	it	ne
 800bcd0:	6059      	strne	r1, [r3, #4]
 800bcd2:	6863      	ldr	r3, [r4, #4]
 800bcd4:	bf08      	it	eq
 800bcd6:	6031      	streq	r1, [r6, #0]
 800bcd8:	5162      	str	r2, [r4, r5]
 800bcda:	604b      	str	r3, [r1, #4]
 800bcdc:	4638      	mov	r0, r7
 800bcde:	f104 060b 	add.w	r6, r4, #11
 800bce2:	f000 fbc9 	bl	800c478 <__malloc_unlock>
 800bce6:	f026 0607 	bic.w	r6, r6, #7
 800bcea:	1d23      	adds	r3, r4, #4
 800bcec:	1af2      	subs	r2, r6, r3
 800bcee:	d0b6      	beq.n	800bc5e <_malloc_r+0x22>
 800bcf0:	1b9b      	subs	r3, r3, r6
 800bcf2:	50a3      	str	r3, [r4, r2]
 800bcf4:	e7b3      	b.n	800bc5e <_malloc_r+0x22>
 800bcf6:	6862      	ldr	r2, [r4, #4]
 800bcf8:	42a3      	cmp	r3, r4
 800bcfa:	bf0c      	ite	eq
 800bcfc:	6032      	streq	r2, [r6, #0]
 800bcfe:	605a      	strne	r2, [r3, #4]
 800bd00:	e7ec      	b.n	800bcdc <_malloc_r+0xa0>
 800bd02:	4623      	mov	r3, r4
 800bd04:	6864      	ldr	r4, [r4, #4]
 800bd06:	e7b2      	b.n	800bc6e <_malloc_r+0x32>
 800bd08:	4634      	mov	r4, r6
 800bd0a:	6876      	ldr	r6, [r6, #4]
 800bd0c:	e7b9      	b.n	800bc82 <_malloc_r+0x46>
 800bd0e:	230c      	movs	r3, #12
 800bd10:	603b      	str	r3, [r7, #0]
 800bd12:	4638      	mov	r0, r7
 800bd14:	f000 fbb0 	bl	800c478 <__malloc_unlock>
 800bd18:	e7a1      	b.n	800bc5e <_malloc_r+0x22>
 800bd1a:	6025      	str	r5, [r4, #0]
 800bd1c:	e7de      	b.n	800bcdc <_malloc_r+0xa0>
 800bd1e:	bf00      	nop
 800bd20:	200017dc 	.word	0x200017dc

0800bd24 <__sfputc_r>:
 800bd24:	6893      	ldr	r3, [r2, #8]
 800bd26:	3b01      	subs	r3, #1
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	b410      	push	{r4}
 800bd2c:	6093      	str	r3, [r2, #8]
 800bd2e:	da08      	bge.n	800bd42 <__sfputc_r+0x1e>
 800bd30:	6994      	ldr	r4, [r2, #24]
 800bd32:	42a3      	cmp	r3, r4
 800bd34:	db01      	blt.n	800bd3a <__sfputc_r+0x16>
 800bd36:	290a      	cmp	r1, #10
 800bd38:	d103      	bne.n	800bd42 <__sfputc_r+0x1e>
 800bd3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd3e:	f7ff bc31 	b.w	800b5a4 <__swbuf_r>
 800bd42:	6813      	ldr	r3, [r2, #0]
 800bd44:	1c58      	adds	r0, r3, #1
 800bd46:	6010      	str	r0, [r2, #0]
 800bd48:	7019      	strb	r1, [r3, #0]
 800bd4a:	4608      	mov	r0, r1
 800bd4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd50:	4770      	bx	lr

0800bd52 <__sfputs_r>:
 800bd52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd54:	4606      	mov	r6, r0
 800bd56:	460f      	mov	r7, r1
 800bd58:	4614      	mov	r4, r2
 800bd5a:	18d5      	adds	r5, r2, r3
 800bd5c:	42ac      	cmp	r4, r5
 800bd5e:	d101      	bne.n	800bd64 <__sfputs_r+0x12>
 800bd60:	2000      	movs	r0, #0
 800bd62:	e007      	b.n	800bd74 <__sfputs_r+0x22>
 800bd64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd68:	463a      	mov	r2, r7
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	f7ff ffda 	bl	800bd24 <__sfputc_r>
 800bd70:	1c43      	adds	r3, r0, #1
 800bd72:	d1f3      	bne.n	800bd5c <__sfputs_r+0xa>
 800bd74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd78 <_vfiprintf_r>:
 800bd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7c:	460d      	mov	r5, r1
 800bd7e:	b09d      	sub	sp, #116	; 0x74
 800bd80:	4614      	mov	r4, r2
 800bd82:	4698      	mov	r8, r3
 800bd84:	4606      	mov	r6, r0
 800bd86:	b118      	cbz	r0, 800bd90 <_vfiprintf_r+0x18>
 800bd88:	6983      	ldr	r3, [r0, #24]
 800bd8a:	b90b      	cbnz	r3, 800bd90 <_vfiprintf_r+0x18>
 800bd8c:	f7ff fde4 	bl	800b958 <__sinit>
 800bd90:	4b89      	ldr	r3, [pc, #548]	; (800bfb8 <_vfiprintf_r+0x240>)
 800bd92:	429d      	cmp	r5, r3
 800bd94:	d11b      	bne.n	800bdce <_vfiprintf_r+0x56>
 800bd96:	6875      	ldr	r5, [r6, #4]
 800bd98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd9a:	07d9      	lsls	r1, r3, #31
 800bd9c:	d405      	bmi.n	800bdaa <_vfiprintf_r+0x32>
 800bd9e:	89ab      	ldrh	r3, [r5, #12]
 800bda0:	059a      	lsls	r2, r3, #22
 800bda2:	d402      	bmi.n	800bdaa <_vfiprintf_r+0x32>
 800bda4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bda6:	f7ff fe75 	bl	800ba94 <__retarget_lock_acquire_recursive>
 800bdaa:	89ab      	ldrh	r3, [r5, #12]
 800bdac:	071b      	lsls	r3, r3, #28
 800bdae:	d501      	bpl.n	800bdb4 <_vfiprintf_r+0x3c>
 800bdb0:	692b      	ldr	r3, [r5, #16]
 800bdb2:	b9eb      	cbnz	r3, 800bdf0 <_vfiprintf_r+0x78>
 800bdb4:	4629      	mov	r1, r5
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	f7ff fc46 	bl	800b648 <__swsetup_r>
 800bdbc:	b1c0      	cbz	r0, 800bdf0 <_vfiprintf_r+0x78>
 800bdbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdc0:	07dc      	lsls	r4, r3, #31
 800bdc2:	d50e      	bpl.n	800bde2 <_vfiprintf_r+0x6a>
 800bdc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdc8:	b01d      	add	sp, #116	; 0x74
 800bdca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdce:	4b7b      	ldr	r3, [pc, #492]	; (800bfbc <_vfiprintf_r+0x244>)
 800bdd0:	429d      	cmp	r5, r3
 800bdd2:	d101      	bne.n	800bdd8 <_vfiprintf_r+0x60>
 800bdd4:	68b5      	ldr	r5, [r6, #8]
 800bdd6:	e7df      	b.n	800bd98 <_vfiprintf_r+0x20>
 800bdd8:	4b79      	ldr	r3, [pc, #484]	; (800bfc0 <_vfiprintf_r+0x248>)
 800bdda:	429d      	cmp	r5, r3
 800bddc:	bf08      	it	eq
 800bdde:	68f5      	ldreq	r5, [r6, #12]
 800bde0:	e7da      	b.n	800bd98 <_vfiprintf_r+0x20>
 800bde2:	89ab      	ldrh	r3, [r5, #12]
 800bde4:	0598      	lsls	r0, r3, #22
 800bde6:	d4ed      	bmi.n	800bdc4 <_vfiprintf_r+0x4c>
 800bde8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdea:	f7ff fe54 	bl	800ba96 <__retarget_lock_release_recursive>
 800bdee:	e7e9      	b.n	800bdc4 <_vfiprintf_r+0x4c>
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	9309      	str	r3, [sp, #36]	; 0x24
 800bdf4:	2320      	movs	r3, #32
 800bdf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdfa:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdfe:	2330      	movs	r3, #48	; 0x30
 800be00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bfc4 <_vfiprintf_r+0x24c>
 800be04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be08:	f04f 0901 	mov.w	r9, #1
 800be0c:	4623      	mov	r3, r4
 800be0e:	469a      	mov	sl, r3
 800be10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be14:	b10a      	cbz	r2, 800be1a <_vfiprintf_r+0xa2>
 800be16:	2a25      	cmp	r2, #37	; 0x25
 800be18:	d1f9      	bne.n	800be0e <_vfiprintf_r+0x96>
 800be1a:	ebba 0b04 	subs.w	fp, sl, r4
 800be1e:	d00b      	beq.n	800be38 <_vfiprintf_r+0xc0>
 800be20:	465b      	mov	r3, fp
 800be22:	4622      	mov	r2, r4
 800be24:	4629      	mov	r1, r5
 800be26:	4630      	mov	r0, r6
 800be28:	f7ff ff93 	bl	800bd52 <__sfputs_r>
 800be2c:	3001      	adds	r0, #1
 800be2e:	f000 80aa 	beq.w	800bf86 <_vfiprintf_r+0x20e>
 800be32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be34:	445a      	add	r2, fp
 800be36:	9209      	str	r2, [sp, #36]	; 0x24
 800be38:	f89a 3000 	ldrb.w	r3, [sl]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f000 80a2 	beq.w	800bf86 <_vfiprintf_r+0x20e>
 800be42:	2300      	movs	r3, #0
 800be44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be4c:	f10a 0a01 	add.w	sl, sl, #1
 800be50:	9304      	str	r3, [sp, #16]
 800be52:	9307      	str	r3, [sp, #28]
 800be54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be58:	931a      	str	r3, [sp, #104]	; 0x68
 800be5a:	4654      	mov	r4, sl
 800be5c:	2205      	movs	r2, #5
 800be5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be62:	4858      	ldr	r0, [pc, #352]	; (800bfc4 <_vfiprintf_r+0x24c>)
 800be64:	f7f4 f994 	bl	8000190 <memchr>
 800be68:	9a04      	ldr	r2, [sp, #16]
 800be6a:	b9d8      	cbnz	r0, 800bea4 <_vfiprintf_r+0x12c>
 800be6c:	06d1      	lsls	r1, r2, #27
 800be6e:	bf44      	itt	mi
 800be70:	2320      	movmi	r3, #32
 800be72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be76:	0713      	lsls	r3, r2, #28
 800be78:	bf44      	itt	mi
 800be7a:	232b      	movmi	r3, #43	; 0x2b
 800be7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be80:	f89a 3000 	ldrb.w	r3, [sl]
 800be84:	2b2a      	cmp	r3, #42	; 0x2a
 800be86:	d015      	beq.n	800beb4 <_vfiprintf_r+0x13c>
 800be88:	9a07      	ldr	r2, [sp, #28]
 800be8a:	4654      	mov	r4, sl
 800be8c:	2000      	movs	r0, #0
 800be8e:	f04f 0c0a 	mov.w	ip, #10
 800be92:	4621      	mov	r1, r4
 800be94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be98:	3b30      	subs	r3, #48	; 0x30
 800be9a:	2b09      	cmp	r3, #9
 800be9c:	d94e      	bls.n	800bf3c <_vfiprintf_r+0x1c4>
 800be9e:	b1b0      	cbz	r0, 800bece <_vfiprintf_r+0x156>
 800bea0:	9207      	str	r2, [sp, #28]
 800bea2:	e014      	b.n	800bece <_vfiprintf_r+0x156>
 800bea4:	eba0 0308 	sub.w	r3, r0, r8
 800bea8:	fa09 f303 	lsl.w	r3, r9, r3
 800beac:	4313      	orrs	r3, r2
 800beae:	9304      	str	r3, [sp, #16]
 800beb0:	46a2      	mov	sl, r4
 800beb2:	e7d2      	b.n	800be5a <_vfiprintf_r+0xe2>
 800beb4:	9b03      	ldr	r3, [sp, #12]
 800beb6:	1d19      	adds	r1, r3, #4
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	9103      	str	r1, [sp, #12]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	bfbb      	ittet	lt
 800bec0:	425b      	neglt	r3, r3
 800bec2:	f042 0202 	orrlt.w	r2, r2, #2
 800bec6:	9307      	strge	r3, [sp, #28]
 800bec8:	9307      	strlt	r3, [sp, #28]
 800beca:	bfb8      	it	lt
 800becc:	9204      	strlt	r2, [sp, #16]
 800bece:	7823      	ldrb	r3, [r4, #0]
 800bed0:	2b2e      	cmp	r3, #46	; 0x2e
 800bed2:	d10c      	bne.n	800beee <_vfiprintf_r+0x176>
 800bed4:	7863      	ldrb	r3, [r4, #1]
 800bed6:	2b2a      	cmp	r3, #42	; 0x2a
 800bed8:	d135      	bne.n	800bf46 <_vfiprintf_r+0x1ce>
 800beda:	9b03      	ldr	r3, [sp, #12]
 800bedc:	1d1a      	adds	r2, r3, #4
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	9203      	str	r2, [sp, #12]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	bfb8      	it	lt
 800bee6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800beea:	3402      	adds	r4, #2
 800beec:	9305      	str	r3, [sp, #20]
 800beee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bfd4 <_vfiprintf_r+0x25c>
 800bef2:	7821      	ldrb	r1, [r4, #0]
 800bef4:	2203      	movs	r2, #3
 800bef6:	4650      	mov	r0, sl
 800bef8:	f7f4 f94a 	bl	8000190 <memchr>
 800befc:	b140      	cbz	r0, 800bf10 <_vfiprintf_r+0x198>
 800befe:	2340      	movs	r3, #64	; 0x40
 800bf00:	eba0 000a 	sub.w	r0, r0, sl
 800bf04:	fa03 f000 	lsl.w	r0, r3, r0
 800bf08:	9b04      	ldr	r3, [sp, #16]
 800bf0a:	4303      	orrs	r3, r0
 800bf0c:	3401      	adds	r4, #1
 800bf0e:	9304      	str	r3, [sp, #16]
 800bf10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf14:	482c      	ldr	r0, [pc, #176]	; (800bfc8 <_vfiprintf_r+0x250>)
 800bf16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf1a:	2206      	movs	r2, #6
 800bf1c:	f7f4 f938 	bl	8000190 <memchr>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d03f      	beq.n	800bfa4 <_vfiprintf_r+0x22c>
 800bf24:	4b29      	ldr	r3, [pc, #164]	; (800bfcc <_vfiprintf_r+0x254>)
 800bf26:	bb1b      	cbnz	r3, 800bf70 <_vfiprintf_r+0x1f8>
 800bf28:	9b03      	ldr	r3, [sp, #12]
 800bf2a:	3307      	adds	r3, #7
 800bf2c:	f023 0307 	bic.w	r3, r3, #7
 800bf30:	3308      	adds	r3, #8
 800bf32:	9303      	str	r3, [sp, #12]
 800bf34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf36:	443b      	add	r3, r7
 800bf38:	9309      	str	r3, [sp, #36]	; 0x24
 800bf3a:	e767      	b.n	800be0c <_vfiprintf_r+0x94>
 800bf3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf40:	460c      	mov	r4, r1
 800bf42:	2001      	movs	r0, #1
 800bf44:	e7a5      	b.n	800be92 <_vfiprintf_r+0x11a>
 800bf46:	2300      	movs	r3, #0
 800bf48:	3401      	adds	r4, #1
 800bf4a:	9305      	str	r3, [sp, #20]
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	f04f 0c0a 	mov.w	ip, #10
 800bf52:	4620      	mov	r0, r4
 800bf54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf58:	3a30      	subs	r2, #48	; 0x30
 800bf5a:	2a09      	cmp	r2, #9
 800bf5c:	d903      	bls.n	800bf66 <_vfiprintf_r+0x1ee>
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d0c5      	beq.n	800beee <_vfiprintf_r+0x176>
 800bf62:	9105      	str	r1, [sp, #20]
 800bf64:	e7c3      	b.n	800beee <_vfiprintf_r+0x176>
 800bf66:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e7f0      	b.n	800bf52 <_vfiprintf_r+0x1da>
 800bf70:	ab03      	add	r3, sp, #12
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	462a      	mov	r2, r5
 800bf76:	4b16      	ldr	r3, [pc, #88]	; (800bfd0 <_vfiprintf_r+0x258>)
 800bf78:	a904      	add	r1, sp, #16
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	f3af 8000 	nop.w
 800bf80:	4607      	mov	r7, r0
 800bf82:	1c78      	adds	r0, r7, #1
 800bf84:	d1d6      	bne.n	800bf34 <_vfiprintf_r+0x1bc>
 800bf86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf88:	07d9      	lsls	r1, r3, #31
 800bf8a:	d405      	bmi.n	800bf98 <_vfiprintf_r+0x220>
 800bf8c:	89ab      	ldrh	r3, [r5, #12]
 800bf8e:	059a      	lsls	r2, r3, #22
 800bf90:	d402      	bmi.n	800bf98 <_vfiprintf_r+0x220>
 800bf92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf94:	f7ff fd7f 	bl	800ba96 <__retarget_lock_release_recursive>
 800bf98:	89ab      	ldrh	r3, [r5, #12]
 800bf9a:	065b      	lsls	r3, r3, #25
 800bf9c:	f53f af12 	bmi.w	800bdc4 <_vfiprintf_r+0x4c>
 800bfa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfa2:	e711      	b.n	800bdc8 <_vfiprintf_r+0x50>
 800bfa4:	ab03      	add	r3, sp, #12
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	462a      	mov	r2, r5
 800bfaa:	4b09      	ldr	r3, [pc, #36]	; (800bfd0 <_vfiprintf_r+0x258>)
 800bfac:	a904      	add	r1, sp, #16
 800bfae:	4630      	mov	r0, r6
 800bfb0:	f000 f880 	bl	800c0b4 <_printf_i>
 800bfb4:	e7e4      	b.n	800bf80 <_vfiprintf_r+0x208>
 800bfb6:	bf00      	nop
 800bfb8:	0800d090 	.word	0x0800d090
 800bfbc:	0800d0b0 	.word	0x0800d0b0
 800bfc0:	0800d070 	.word	0x0800d070
 800bfc4:	0800d0d0 	.word	0x0800d0d0
 800bfc8:	0800d0da 	.word	0x0800d0da
 800bfcc:	00000000 	.word	0x00000000
 800bfd0:	0800bd53 	.word	0x0800bd53
 800bfd4:	0800d0d6 	.word	0x0800d0d6

0800bfd8 <_printf_common>:
 800bfd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfdc:	4616      	mov	r6, r2
 800bfde:	4699      	mov	r9, r3
 800bfe0:	688a      	ldr	r2, [r1, #8]
 800bfe2:	690b      	ldr	r3, [r1, #16]
 800bfe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	bfb8      	it	lt
 800bfec:	4613      	movlt	r3, r2
 800bfee:	6033      	str	r3, [r6, #0]
 800bff0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bff4:	4607      	mov	r7, r0
 800bff6:	460c      	mov	r4, r1
 800bff8:	b10a      	cbz	r2, 800bffe <_printf_common+0x26>
 800bffa:	3301      	adds	r3, #1
 800bffc:	6033      	str	r3, [r6, #0]
 800bffe:	6823      	ldr	r3, [r4, #0]
 800c000:	0699      	lsls	r1, r3, #26
 800c002:	bf42      	ittt	mi
 800c004:	6833      	ldrmi	r3, [r6, #0]
 800c006:	3302      	addmi	r3, #2
 800c008:	6033      	strmi	r3, [r6, #0]
 800c00a:	6825      	ldr	r5, [r4, #0]
 800c00c:	f015 0506 	ands.w	r5, r5, #6
 800c010:	d106      	bne.n	800c020 <_printf_common+0x48>
 800c012:	f104 0a19 	add.w	sl, r4, #25
 800c016:	68e3      	ldr	r3, [r4, #12]
 800c018:	6832      	ldr	r2, [r6, #0]
 800c01a:	1a9b      	subs	r3, r3, r2
 800c01c:	42ab      	cmp	r3, r5
 800c01e:	dc26      	bgt.n	800c06e <_printf_common+0x96>
 800c020:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c024:	1e13      	subs	r3, r2, #0
 800c026:	6822      	ldr	r2, [r4, #0]
 800c028:	bf18      	it	ne
 800c02a:	2301      	movne	r3, #1
 800c02c:	0692      	lsls	r2, r2, #26
 800c02e:	d42b      	bmi.n	800c088 <_printf_common+0xb0>
 800c030:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c034:	4649      	mov	r1, r9
 800c036:	4638      	mov	r0, r7
 800c038:	47c0      	blx	r8
 800c03a:	3001      	adds	r0, #1
 800c03c:	d01e      	beq.n	800c07c <_printf_common+0xa4>
 800c03e:	6823      	ldr	r3, [r4, #0]
 800c040:	68e5      	ldr	r5, [r4, #12]
 800c042:	6832      	ldr	r2, [r6, #0]
 800c044:	f003 0306 	and.w	r3, r3, #6
 800c048:	2b04      	cmp	r3, #4
 800c04a:	bf08      	it	eq
 800c04c:	1aad      	subeq	r5, r5, r2
 800c04e:	68a3      	ldr	r3, [r4, #8]
 800c050:	6922      	ldr	r2, [r4, #16]
 800c052:	bf0c      	ite	eq
 800c054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c058:	2500      	movne	r5, #0
 800c05a:	4293      	cmp	r3, r2
 800c05c:	bfc4      	itt	gt
 800c05e:	1a9b      	subgt	r3, r3, r2
 800c060:	18ed      	addgt	r5, r5, r3
 800c062:	2600      	movs	r6, #0
 800c064:	341a      	adds	r4, #26
 800c066:	42b5      	cmp	r5, r6
 800c068:	d11a      	bne.n	800c0a0 <_printf_common+0xc8>
 800c06a:	2000      	movs	r0, #0
 800c06c:	e008      	b.n	800c080 <_printf_common+0xa8>
 800c06e:	2301      	movs	r3, #1
 800c070:	4652      	mov	r2, sl
 800c072:	4649      	mov	r1, r9
 800c074:	4638      	mov	r0, r7
 800c076:	47c0      	blx	r8
 800c078:	3001      	adds	r0, #1
 800c07a:	d103      	bne.n	800c084 <_printf_common+0xac>
 800c07c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c084:	3501      	adds	r5, #1
 800c086:	e7c6      	b.n	800c016 <_printf_common+0x3e>
 800c088:	18e1      	adds	r1, r4, r3
 800c08a:	1c5a      	adds	r2, r3, #1
 800c08c:	2030      	movs	r0, #48	; 0x30
 800c08e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c092:	4422      	add	r2, r4
 800c094:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c098:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c09c:	3302      	adds	r3, #2
 800c09e:	e7c7      	b.n	800c030 <_printf_common+0x58>
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	4622      	mov	r2, r4
 800c0a4:	4649      	mov	r1, r9
 800c0a6:	4638      	mov	r0, r7
 800c0a8:	47c0      	blx	r8
 800c0aa:	3001      	adds	r0, #1
 800c0ac:	d0e6      	beq.n	800c07c <_printf_common+0xa4>
 800c0ae:	3601      	adds	r6, #1
 800c0b0:	e7d9      	b.n	800c066 <_printf_common+0x8e>
	...

0800c0b4 <_printf_i>:
 800c0b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b8:	7e0f      	ldrb	r7, [r1, #24]
 800c0ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c0bc:	2f78      	cmp	r7, #120	; 0x78
 800c0be:	4691      	mov	r9, r2
 800c0c0:	4680      	mov	r8, r0
 800c0c2:	460c      	mov	r4, r1
 800c0c4:	469a      	mov	sl, r3
 800c0c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c0ca:	d807      	bhi.n	800c0dc <_printf_i+0x28>
 800c0cc:	2f62      	cmp	r7, #98	; 0x62
 800c0ce:	d80a      	bhi.n	800c0e6 <_printf_i+0x32>
 800c0d0:	2f00      	cmp	r7, #0
 800c0d2:	f000 80d8 	beq.w	800c286 <_printf_i+0x1d2>
 800c0d6:	2f58      	cmp	r7, #88	; 0x58
 800c0d8:	f000 80a3 	beq.w	800c222 <_printf_i+0x16e>
 800c0dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0e4:	e03a      	b.n	800c15c <_printf_i+0xa8>
 800c0e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0ea:	2b15      	cmp	r3, #21
 800c0ec:	d8f6      	bhi.n	800c0dc <_printf_i+0x28>
 800c0ee:	a101      	add	r1, pc, #4	; (adr r1, 800c0f4 <_printf_i+0x40>)
 800c0f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0f4:	0800c14d 	.word	0x0800c14d
 800c0f8:	0800c161 	.word	0x0800c161
 800c0fc:	0800c0dd 	.word	0x0800c0dd
 800c100:	0800c0dd 	.word	0x0800c0dd
 800c104:	0800c0dd 	.word	0x0800c0dd
 800c108:	0800c0dd 	.word	0x0800c0dd
 800c10c:	0800c161 	.word	0x0800c161
 800c110:	0800c0dd 	.word	0x0800c0dd
 800c114:	0800c0dd 	.word	0x0800c0dd
 800c118:	0800c0dd 	.word	0x0800c0dd
 800c11c:	0800c0dd 	.word	0x0800c0dd
 800c120:	0800c26d 	.word	0x0800c26d
 800c124:	0800c191 	.word	0x0800c191
 800c128:	0800c24f 	.word	0x0800c24f
 800c12c:	0800c0dd 	.word	0x0800c0dd
 800c130:	0800c0dd 	.word	0x0800c0dd
 800c134:	0800c28f 	.word	0x0800c28f
 800c138:	0800c0dd 	.word	0x0800c0dd
 800c13c:	0800c191 	.word	0x0800c191
 800c140:	0800c0dd 	.word	0x0800c0dd
 800c144:	0800c0dd 	.word	0x0800c0dd
 800c148:	0800c257 	.word	0x0800c257
 800c14c:	682b      	ldr	r3, [r5, #0]
 800c14e:	1d1a      	adds	r2, r3, #4
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	602a      	str	r2, [r5, #0]
 800c154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c158:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c15c:	2301      	movs	r3, #1
 800c15e:	e0a3      	b.n	800c2a8 <_printf_i+0x1f4>
 800c160:	6820      	ldr	r0, [r4, #0]
 800c162:	6829      	ldr	r1, [r5, #0]
 800c164:	0606      	lsls	r6, r0, #24
 800c166:	f101 0304 	add.w	r3, r1, #4
 800c16a:	d50a      	bpl.n	800c182 <_printf_i+0xce>
 800c16c:	680e      	ldr	r6, [r1, #0]
 800c16e:	602b      	str	r3, [r5, #0]
 800c170:	2e00      	cmp	r6, #0
 800c172:	da03      	bge.n	800c17c <_printf_i+0xc8>
 800c174:	232d      	movs	r3, #45	; 0x2d
 800c176:	4276      	negs	r6, r6
 800c178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c17c:	485e      	ldr	r0, [pc, #376]	; (800c2f8 <_printf_i+0x244>)
 800c17e:	230a      	movs	r3, #10
 800c180:	e019      	b.n	800c1b6 <_printf_i+0x102>
 800c182:	680e      	ldr	r6, [r1, #0]
 800c184:	602b      	str	r3, [r5, #0]
 800c186:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c18a:	bf18      	it	ne
 800c18c:	b236      	sxthne	r6, r6
 800c18e:	e7ef      	b.n	800c170 <_printf_i+0xbc>
 800c190:	682b      	ldr	r3, [r5, #0]
 800c192:	6820      	ldr	r0, [r4, #0]
 800c194:	1d19      	adds	r1, r3, #4
 800c196:	6029      	str	r1, [r5, #0]
 800c198:	0601      	lsls	r1, r0, #24
 800c19a:	d501      	bpl.n	800c1a0 <_printf_i+0xec>
 800c19c:	681e      	ldr	r6, [r3, #0]
 800c19e:	e002      	b.n	800c1a6 <_printf_i+0xf2>
 800c1a0:	0646      	lsls	r6, r0, #25
 800c1a2:	d5fb      	bpl.n	800c19c <_printf_i+0xe8>
 800c1a4:	881e      	ldrh	r6, [r3, #0]
 800c1a6:	4854      	ldr	r0, [pc, #336]	; (800c2f8 <_printf_i+0x244>)
 800c1a8:	2f6f      	cmp	r7, #111	; 0x6f
 800c1aa:	bf0c      	ite	eq
 800c1ac:	2308      	moveq	r3, #8
 800c1ae:	230a      	movne	r3, #10
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1b6:	6865      	ldr	r5, [r4, #4]
 800c1b8:	60a5      	str	r5, [r4, #8]
 800c1ba:	2d00      	cmp	r5, #0
 800c1bc:	bfa2      	ittt	ge
 800c1be:	6821      	ldrge	r1, [r4, #0]
 800c1c0:	f021 0104 	bicge.w	r1, r1, #4
 800c1c4:	6021      	strge	r1, [r4, #0]
 800c1c6:	b90e      	cbnz	r6, 800c1cc <_printf_i+0x118>
 800c1c8:	2d00      	cmp	r5, #0
 800c1ca:	d04d      	beq.n	800c268 <_printf_i+0x1b4>
 800c1cc:	4615      	mov	r5, r2
 800c1ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800c1d2:	fb03 6711 	mls	r7, r3, r1, r6
 800c1d6:	5dc7      	ldrb	r7, [r0, r7]
 800c1d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c1dc:	4637      	mov	r7, r6
 800c1de:	42bb      	cmp	r3, r7
 800c1e0:	460e      	mov	r6, r1
 800c1e2:	d9f4      	bls.n	800c1ce <_printf_i+0x11a>
 800c1e4:	2b08      	cmp	r3, #8
 800c1e6:	d10b      	bne.n	800c200 <_printf_i+0x14c>
 800c1e8:	6823      	ldr	r3, [r4, #0]
 800c1ea:	07de      	lsls	r6, r3, #31
 800c1ec:	d508      	bpl.n	800c200 <_printf_i+0x14c>
 800c1ee:	6923      	ldr	r3, [r4, #16]
 800c1f0:	6861      	ldr	r1, [r4, #4]
 800c1f2:	4299      	cmp	r1, r3
 800c1f4:	bfde      	ittt	le
 800c1f6:	2330      	movle	r3, #48	; 0x30
 800c1f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c1fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c200:	1b52      	subs	r2, r2, r5
 800c202:	6122      	str	r2, [r4, #16]
 800c204:	f8cd a000 	str.w	sl, [sp]
 800c208:	464b      	mov	r3, r9
 800c20a:	aa03      	add	r2, sp, #12
 800c20c:	4621      	mov	r1, r4
 800c20e:	4640      	mov	r0, r8
 800c210:	f7ff fee2 	bl	800bfd8 <_printf_common>
 800c214:	3001      	adds	r0, #1
 800c216:	d14c      	bne.n	800c2b2 <_printf_i+0x1fe>
 800c218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c21c:	b004      	add	sp, #16
 800c21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c222:	4835      	ldr	r0, [pc, #212]	; (800c2f8 <_printf_i+0x244>)
 800c224:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c228:	6829      	ldr	r1, [r5, #0]
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c230:	6029      	str	r1, [r5, #0]
 800c232:	061d      	lsls	r5, r3, #24
 800c234:	d514      	bpl.n	800c260 <_printf_i+0x1ac>
 800c236:	07df      	lsls	r7, r3, #31
 800c238:	bf44      	itt	mi
 800c23a:	f043 0320 	orrmi.w	r3, r3, #32
 800c23e:	6023      	strmi	r3, [r4, #0]
 800c240:	b91e      	cbnz	r6, 800c24a <_printf_i+0x196>
 800c242:	6823      	ldr	r3, [r4, #0]
 800c244:	f023 0320 	bic.w	r3, r3, #32
 800c248:	6023      	str	r3, [r4, #0]
 800c24a:	2310      	movs	r3, #16
 800c24c:	e7b0      	b.n	800c1b0 <_printf_i+0xfc>
 800c24e:	6823      	ldr	r3, [r4, #0]
 800c250:	f043 0320 	orr.w	r3, r3, #32
 800c254:	6023      	str	r3, [r4, #0]
 800c256:	2378      	movs	r3, #120	; 0x78
 800c258:	4828      	ldr	r0, [pc, #160]	; (800c2fc <_printf_i+0x248>)
 800c25a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c25e:	e7e3      	b.n	800c228 <_printf_i+0x174>
 800c260:	0659      	lsls	r1, r3, #25
 800c262:	bf48      	it	mi
 800c264:	b2b6      	uxthmi	r6, r6
 800c266:	e7e6      	b.n	800c236 <_printf_i+0x182>
 800c268:	4615      	mov	r5, r2
 800c26a:	e7bb      	b.n	800c1e4 <_printf_i+0x130>
 800c26c:	682b      	ldr	r3, [r5, #0]
 800c26e:	6826      	ldr	r6, [r4, #0]
 800c270:	6961      	ldr	r1, [r4, #20]
 800c272:	1d18      	adds	r0, r3, #4
 800c274:	6028      	str	r0, [r5, #0]
 800c276:	0635      	lsls	r5, r6, #24
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	d501      	bpl.n	800c280 <_printf_i+0x1cc>
 800c27c:	6019      	str	r1, [r3, #0]
 800c27e:	e002      	b.n	800c286 <_printf_i+0x1d2>
 800c280:	0670      	lsls	r0, r6, #25
 800c282:	d5fb      	bpl.n	800c27c <_printf_i+0x1c8>
 800c284:	8019      	strh	r1, [r3, #0]
 800c286:	2300      	movs	r3, #0
 800c288:	6123      	str	r3, [r4, #16]
 800c28a:	4615      	mov	r5, r2
 800c28c:	e7ba      	b.n	800c204 <_printf_i+0x150>
 800c28e:	682b      	ldr	r3, [r5, #0]
 800c290:	1d1a      	adds	r2, r3, #4
 800c292:	602a      	str	r2, [r5, #0]
 800c294:	681d      	ldr	r5, [r3, #0]
 800c296:	6862      	ldr	r2, [r4, #4]
 800c298:	2100      	movs	r1, #0
 800c29a:	4628      	mov	r0, r5
 800c29c:	f7f3 ff78 	bl	8000190 <memchr>
 800c2a0:	b108      	cbz	r0, 800c2a6 <_printf_i+0x1f2>
 800c2a2:	1b40      	subs	r0, r0, r5
 800c2a4:	6060      	str	r0, [r4, #4]
 800c2a6:	6863      	ldr	r3, [r4, #4]
 800c2a8:	6123      	str	r3, [r4, #16]
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2b0:	e7a8      	b.n	800c204 <_printf_i+0x150>
 800c2b2:	6923      	ldr	r3, [r4, #16]
 800c2b4:	462a      	mov	r2, r5
 800c2b6:	4649      	mov	r1, r9
 800c2b8:	4640      	mov	r0, r8
 800c2ba:	47d0      	blx	sl
 800c2bc:	3001      	adds	r0, #1
 800c2be:	d0ab      	beq.n	800c218 <_printf_i+0x164>
 800c2c0:	6823      	ldr	r3, [r4, #0]
 800c2c2:	079b      	lsls	r3, r3, #30
 800c2c4:	d413      	bmi.n	800c2ee <_printf_i+0x23a>
 800c2c6:	68e0      	ldr	r0, [r4, #12]
 800c2c8:	9b03      	ldr	r3, [sp, #12]
 800c2ca:	4298      	cmp	r0, r3
 800c2cc:	bfb8      	it	lt
 800c2ce:	4618      	movlt	r0, r3
 800c2d0:	e7a4      	b.n	800c21c <_printf_i+0x168>
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	4632      	mov	r2, r6
 800c2d6:	4649      	mov	r1, r9
 800c2d8:	4640      	mov	r0, r8
 800c2da:	47d0      	blx	sl
 800c2dc:	3001      	adds	r0, #1
 800c2de:	d09b      	beq.n	800c218 <_printf_i+0x164>
 800c2e0:	3501      	adds	r5, #1
 800c2e2:	68e3      	ldr	r3, [r4, #12]
 800c2e4:	9903      	ldr	r1, [sp, #12]
 800c2e6:	1a5b      	subs	r3, r3, r1
 800c2e8:	42ab      	cmp	r3, r5
 800c2ea:	dcf2      	bgt.n	800c2d2 <_printf_i+0x21e>
 800c2ec:	e7eb      	b.n	800c2c6 <_printf_i+0x212>
 800c2ee:	2500      	movs	r5, #0
 800c2f0:	f104 0619 	add.w	r6, r4, #25
 800c2f4:	e7f5      	b.n	800c2e2 <_printf_i+0x22e>
 800c2f6:	bf00      	nop
 800c2f8:	0800d0e1 	.word	0x0800d0e1
 800c2fc:	0800d0f2 	.word	0x0800d0f2

0800c300 <_sbrk_r>:
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	4d06      	ldr	r5, [pc, #24]	; (800c31c <_sbrk_r+0x1c>)
 800c304:	2300      	movs	r3, #0
 800c306:	4604      	mov	r4, r0
 800c308:	4608      	mov	r0, r1
 800c30a:	602b      	str	r3, [r5, #0]
 800c30c:	f7f6 f9e0 	bl	80026d0 <_sbrk>
 800c310:	1c43      	adds	r3, r0, #1
 800c312:	d102      	bne.n	800c31a <_sbrk_r+0x1a>
 800c314:	682b      	ldr	r3, [r5, #0]
 800c316:	b103      	cbz	r3, 800c31a <_sbrk_r+0x1a>
 800c318:	6023      	str	r3, [r4, #0]
 800c31a:	bd38      	pop	{r3, r4, r5, pc}
 800c31c:	200017e4 	.word	0x200017e4

0800c320 <__sread>:
 800c320:	b510      	push	{r4, lr}
 800c322:	460c      	mov	r4, r1
 800c324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c328:	f000 f8ac 	bl	800c484 <_read_r>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	bfab      	itete	ge
 800c330:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c332:	89a3      	ldrhlt	r3, [r4, #12]
 800c334:	181b      	addge	r3, r3, r0
 800c336:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c33a:	bfac      	ite	ge
 800c33c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c33e:	81a3      	strhlt	r3, [r4, #12]
 800c340:	bd10      	pop	{r4, pc}

0800c342 <__swrite>:
 800c342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c346:	461f      	mov	r7, r3
 800c348:	898b      	ldrh	r3, [r1, #12]
 800c34a:	05db      	lsls	r3, r3, #23
 800c34c:	4605      	mov	r5, r0
 800c34e:	460c      	mov	r4, r1
 800c350:	4616      	mov	r6, r2
 800c352:	d505      	bpl.n	800c360 <__swrite+0x1e>
 800c354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c358:	2302      	movs	r3, #2
 800c35a:	2200      	movs	r2, #0
 800c35c:	f000 f874 	bl	800c448 <_lseek_r>
 800c360:	89a3      	ldrh	r3, [r4, #12]
 800c362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c36a:	81a3      	strh	r3, [r4, #12]
 800c36c:	4632      	mov	r2, r6
 800c36e:	463b      	mov	r3, r7
 800c370:	4628      	mov	r0, r5
 800c372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c376:	f000 b823 	b.w	800c3c0 <_write_r>

0800c37a <__sseek>:
 800c37a:	b510      	push	{r4, lr}
 800c37c:	460c      	mov	r4, r1
 800c37e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c382:	f000 f861 	bl	800c448 <_lseek_r>
 800c386:	1c43      	adds	r3, r0, #1
 800c388:	89a3      	ldrh	r3, [r4, #12]
 800c38a:	bf15      	itete	ne
 800c38c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c38e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c396:	81a3      	strheq	r3, [r4, #12]
 800c398:	bf18      	it	ne
 800c39a:	81a3      	strhne	r3, [r4, #12]
 800c39c:	bd10      	pop	{r4, pc}

0800c39e <__sclose>:
 800c39e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3a2:	f000 b81f 	b.w	800c3e4 <_close_r>

0800c3a6 <strchr>:
 800c3a6:	b2c9      	uxtb	r1, r1
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3ae:	b11a      	cbz	r2, 800c3b8 <strchr+0x12>
 800c3b0:	428a      	cmp	r2, r1
 800c3b2:	d1f9      	bne.n	800c3a8 <strchr+0x2>
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	4770      	bx	lr
 800c3b8:	2900      	cmp	r1, #0
 800c3ba:	bf18      	it	ne
 800c3bc:	2300      	movne	r3, #0
 800c3be:	e7f9      	b.n	800c3b4 <strchr+0xe>

0800c3c0 <_write_r>:
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	4d07      	ldr	r5, [pc, #28]	; (800c3e0 <_write_r+0x20>)
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	4608      	mov	r0, r1
 800c3c8:	4611      	mov	r1, r2
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	602a      	str	r2, [r5, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	f7fd f906 	bl	80095e0 <_write>
 800c3d4:	1c43      	adds	r3, r0, #1
 800c3d6:	d102      	bne.n	800c3de <_write_r+0x1e>
 800c3d8:	682b      	ldr	r3, [r5, #0]
 800c3da:	b103      	cbz	r3, 800c3de <_write_r+0x1e>
 800c3dc:	6023      	str	r3, [r4, #0]
 800c3de:	bd38      	pop	{r3, r4, r5, pc}
 800c3e0:	200017e4 	.word	0x200017e4

0800c3e4 <_close_r>:
 800c3e4:	b538      	push	{r3, r4, r5, lr}
 800c3e6:	4d06      	ldr	r5, [pc, #24]	; (800c400 <_close_r+0x1c>)
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	4604      	mov	r4, r0
 800c3ec:	4608      	mov	r0, r1
 800c3ee:	602b      	str	r3, [r5, #0]
 800c3f0:	f7f6 f939 	bl	8002666 <_close>
 800c3f4:	1c43      	adds	r3, r0, #1
 800c3f6:	d102      	bne.n	800c3fe <_close_r+0x1a>
 800c3f8:	682b      	ldr	r3, [r5, #0]
 800c3fa:	b103      	cbz	r3, 800c3fe <_close_r+0x1a>
 800c3fc:	6023      	str	r3, [r4, #0]
 800c3fe:	bd38      	pop	{r3, r4, r5, pc}
 800c400:	200017e4 	.word	0x200017e4

0800c404 <_fstat_r>:
 800c404:	b538      	push	{r3, r4, r5, lr}
 800c406:	4d07      	ldr	r5, [pc, #28]	; (800c424 <_fstat_r+0x20>)
 800c408:	2300      	movs	r3, #0
 800c40a:	4604      	mov	r4, r0
 800c40c:	4608      	mov	r0, r1
 800c40e:	4611      	mov	r1, r2
 800c410:	602b      	str	r3, [r5, #0]
 800c412:	f7f6 f934 	bl	800267e <_fstat>
 800c416:	1c43      	adds	r3, r0, #1
 800c418:	d102      	bne.n	800c420 <_fstat_r+0x1c>
 800c41a:	682b      	ldr	r3, [r5, #0]
 800c41c:	b103      	cbz	r3, 800c420 <_fstat_r+0x1c>
 800c41e:	6023      	str	r3, [r4, #0]
 800c420:	bd38      	pop	{r3, r4, r5, pc}
 800c422:	bf00      	nop
 800c424:	200017e4 	.word	0x200017e4

0800c428 <_isatty_r>:
 800c428:	b538      	push	{r3, r4, r5, lr}
 800c42a:	4d06      	ldr	r5, [pc, #24]	; (800c444 <_isatty_r+0x1c>)
 800c42c:	2300      	movs	r3, #0
 800c42e:	4604      	mov	r4, r0
 800c430:	4608      	mov	r0, r1
 800c432:	602b      	str	r3, [r5, #0]
 800c434:	f7f6 f933 	bl	800269e <_isatty>
 800c438:	1c43      	adds	r3, r0, #1
 800c43a:	d102      	bne.n	800c442 <_isatty_r+0x1a>
 800c43c:	682b      	ldr	r3, [r5, #0]
 800c43e:	b103      	cbz	r3, 800c442 <_isatty_r+0x1a>
 800c440:	6023      	str	r3, [r4, #0]
 800c442:	bd38      	pop	{r3, r4, r5, pc}
 800c444:	200017e4 	.word	0x200017e4

0800c448 <_lseek_r>:
 800c448:	b538      	push	{r3, r4, r5, lr}
 800c44a:	4d07      	ldr	r5, [pc, #28]	; (800c468 <_lseek_r+0x20>)
 800c44c:	4604      	mov	r4, r0
 800c44e:	4608      	mov	r0, r1
 800c450:	4611      	mov	r1, r2
 800c452:	2200      	movs	r2, #0
 800c454:	602a      	str	r2, [r5, #0]
 800c456:	461a      	mov	r2, r3
 800c458:	f7f6 f92c 	bl	80026b4 <_lseek>
 800c45c:	1c43      	adds	r3, r0, #1
 800c45e:	d102      	bne.n	800c466 <_lseek_r+0x1e>
 800c460:	682b      	ldr	r3, [r5, #0]
 800c462:	b103      	cbz	r3, 800c466 <_lseek_r+0x1e>
 800c464:	6023      	str	r3, [r4, #0]
 800c466:	bd38      	pop	{r3, r4, r5, pc}
 800c468:	200017e4 	.word	0x200017e4

0800c46c <__malloc_lock>:
 800c46c:	4801      	ldr	r0, [pc, #4]	; (800c474 <__malloc_lock+0x8>)
 800c46e:	f7ff bb11 	b.w	800ba94 <__retarget_lock_acquire_recursive>
 800c472:	bf00      	nop
 800c474:	200017d8 	.word	0x200017d8

0800c478 <__malloc_unlock>:
 800c478:	4801      	ldr	r0, [pc, #4]	; (800c480 <__malloc_unlock+0x8>)
 800c47a:	f7ff bb0c 	b.w	800ba96 <__retarget_lock_release_recursive>
 800c47e:	bf00      	nop
 800c480:	200017d8 	.word	0x200017d8

0800c484 <_read_r>:
 800c484:	b538      	push	{r3, r4, r5, lr}
 800c486:	4d07      	ldr	r5, [pc, #28]	; (800c4a4 <_read_r+0x20>)
 800c488:	4604      	mov	r4, r0
 800c48a:	4608      	mov	r0, r1
 800c48c:	4611      	mov	r1, r2
 800c48e:	2200      	movs	r2, #0
 800c490:	602a      	str	r2, [r5, #0]
 800c492:	461a      	mov	r2, r3
 800c494:	f7f6 f8ca 	bl	800262c <_read>
 800c498:	1c43      	adds	r3, r0, #1
 800c49a:	d102      	bne.n	800c4a2 <_read_r+0x1e>
 800c49c:	682b      	ldr	r3, [r5, #0]
 800c49e:	b103      	cbz	r3, 800c4a2 <_read_r+0x1e>
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	bd38      	pop	{r3, r4, r5, pc}
 800c4a4:	200017e4 	.word	0x200017e4

0800c4a8 <_init>:
 800c4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4aa:	bf00      	nop
 800c4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ae:	bc08      	pop	{r3}
 800c4b0:	469e      	mov	lr, r3
 800c4b2:	4770      	bx	lr

0800c4b4 <_fini>:
 800c4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b6:	bf00      	nop
 800c4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ba:	bc08      	pop	{r3}
 800c4bc:	469e      	mov	lr, r3
 800c4be:	4770      	bx	lr
